<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>呼和浩特中学英才计划招生政策</title>
      <link href="/Talent_Program/"/>
      <url>/Talent_Program/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note warning flat"><p>本文记录各种呼和浩特市各个有<strong>科技特长生政策的中学</strong>的政策解读。</p></div><div class="note warning flat"><p>在阅读过程中有任何问题都可以发布到评论区，有价值的问题将会放到文章末尾Q&amp;A之中！</p></div><h1 id="呼和浩特市第二中学"><a href="#呼和浩特市第二中学" class="headerlink" title="呼和浩特市第二中学"></a>呼和浩特市第二中学</h1><h2 id="官方链接"><a href="#官方链接" class="headerlink" title="官方链接"></a>官方链接</h2><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://mp.weixin.qq.com/s/0KYRmNKxJu44efJnzV5YAQ">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">呼和浩特市第二中学</div>            <div class="tag-link-sitename">英才计划</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="报考条件"><a href="#报考条件" class="headerlink" title="报考条件"></a>报考条件</h2><h3 id="数学类"><a href="#数学类" class="headerlink" title="数学类"></a>数学类</h3><div class="note success no-icon flat"><p>满足下列条件之一：</p><p>① 呼市2024—2025学年度<strong>第一学期初三期末</strong>(全市统一测试)<strong>总分</strong>（包括语文、数学、英语、物理、历史、化学、政治七科成绩）成绩在 <strong>430 分（含430）以上</strong>。</p><p>② 2024—2025学年度<strong>第一学期初三期末</strong>(全市统一测试)<strong>数学单科成绩在87分</strong>（含87）以上。</p></div><h3 id="信息学类"><a href="#信息学类" class="headerlink" title="信息学类"></a>信息学类</h3><div class="note success no-icon flat"><p>满足下列条件之一：</p><p>① <strong>CCF CSP-S 2024</strong>第二轮成绩达到<strong>100分</strong>及以上。</p><p>② <strong>CCF CSP-J 2024</strong>第二轮成绩达到<strong>200分</strong>及以上。</p></div><h2 id="面试范围"><a href="#面试范围" class="headerlink" title="面试范围"></a>面试范围</h2><h3 id="数学类-1"><a href="#数学类-1" class="headerlink" title="数学类"></a>数学类</h3><div class="note success no-icon flat"><p>初中数学所学知识+拓展知识。</p></div><h3 id="信息学类-1"><a href="#信息学类-1" class="headerlink" title="信息学类"></a>信息学类</h3><div class="note success no-icon flat"><p>2023<strong>NOI大纲</strong>入门级与提高级相关知识点。</p></div><h1 id="中央民族大学附属中学"><a href="#中央民族大学附属中学" class="headerlink" title="中央民族大学附属中学"></a>中央民族大学附属中学</h1><h2 id="官方链接-1"><a href="#官方链接-1" class="headerlink" title="官方链接"></a>官方链接</h2><p><strong>英才计划</strong></p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://mp.weixin.qq.com/s/Papg0ofgaiFNvv-64cFnFQ">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">中央民族大学附属中学</div>            <div class="tag-link-sitename">英才计划</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="报考条件-1"><a href="#报考条件-1" class="headerlink" title="报考条件"></a>报考条件</h2><div class="note success no-icon flat"><p>1.呼和浩特市四区具有科技创新潜质的初三优秀学生。</p><p>2.具有强烈的好奇心和探究欲，对物理、数学、化学、生物、信息技术某一学科兴趣浓厚，学业表现突出，已达到高中、大学专业课程水平的学生优先。</p></div><h2 id="面试范围-1"><a href="#面试范围-1" class="headerlink" title="面试范围"></a>面试范围</h2><h3 id="英才计划"><a href="#英才计划" class="headerlink" title="英才计划"></a>英才计划</h3><div class="note success no-icon flat"><p>考试内容为<strong>数学、物理、化学</strong>学科的初中知识及<strong>拓展知识</strong>（分值为200分）</p></div><h2 id="培养方式"><a href="#培养方式" class="headerlink" title="培养方式"></a>培养方式</h2><h3 id="英才计划-1"><a href="#英才计划-1" class="headerlink" title="英才计划"></a>英才计划</h3><div class="note success no-icon flat"><p><strong>1.贯通培养（高效率，强基础）：</strong>实行初高中课程贯通衔接的一体化培养方案，强化初三及高中三年课程的系统整合和一体化贯通设计，打破初高中知识衔接的壁垒，避免重复学习和知识断层，让学生的学习过程更加连贯高效，德智体美劳各方面全面发展。</p><p><strong>2.小班教学（高标准，导师制）：</strong>贯通培育改革实施小班教学，针对学生的科学兴趣爱好、特长优势和未来发展方向，配备个人发展导师，“一人一策”，量身定制培养方式和学习策略，提供个性化进阶课程，满足不同学生个体发展需求，锚定国内一流世界名校，实现让每一位学生成为国家科技创新人才的梦想。</p><p><strong>3.师资配备（高素质，有经验）：</strong>引进了5位特级教师驻校进行课程开发和跟踪指导，确保贯通课程系统科学，高效实施。由10名毕业于北京大学、清华大学、中科大、墨尔本大学等一流大学，已有两届初高中贯通培养经验的优秀教师担任学科教学。</p><p><strong>4.课程建设（高起点，重素养）：</strong>开足开齐国家课程，夯实基础，优化个性化研究性学习，实现学生全面而充分发展。对标新高考国家拔尖创新人才选拔标准，成功研发实施《英文科学专著研读》《物理数学》《学科探究实践学习》等跨学科深度学习课程。引入脑科学研究成果和AI技术，精准学生学习发展，着力学生创新思维、科学品质和自主学习能力培养，提升学习效能和综合解决实际问题的能力。</p></div><h1 id="呼和浩特市第一中学"><a href="#呼和浩特市第一中学" class="headerlink" title="呼和浩特市第一中学"></a>呼和浩特市第一中学</h1><h2 id="官方链接-2"><a href="#官方链接-2" class="headerlink" title="官方链接"></a>官方链接</h2><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://mp.weixin.qq.com/s/7ir5eAxncsxKDYwaFq_uiA">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">呼和浩特市第一中学</div>            <div class="tag-link-sitename">英才计划</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="报考条件-2"><a href="#报考条件-2" class="headerlink" title="报考条件"></a>报考条件</h2><div class="note success no-icon flat"><p>身心健康，品行端正，综合素质全面，在<strong>数学、物理、化学、生物、信息技术</strong>有突出学科特长、创新精神和发展潜质的2024年呼和浩特市市区在籍应届初中优秀毕业生。</p></div><h2 id="面试范围-2"><a href="#面试范围-2" class="headerlink" title="面试范围"></a>面试范围</h2><div class="note success no-icon flat"><p>笔试科目为数理素养测试、语言能力测试。</p><ol><li>其中数理素养测试分值200分，主要考查学生数学、物理素养及能力；</li><li>语言能力测试分值200分，主要考查学生英语、语文的语言理解能力。</li></ol></div><h2 id="培养方式-1"><a href="#培养方式-1" class="headerlink" title="培养方式"></a>培养方式</h2><div class="note success no-icon flat"><p>经过面试择优录取30名考生，学校与通过面试的考生及监护人签订《英才计划录取协议书》，发放录取通知书。</p><p>学生<strong>不再参加中考</strong>，需<strong>参加 “英才计划”专属研学营</strong>。</p></div><div class="note success no-icon flat"><p>学生入学后直接编入我校2024级“英才班”，全学科<strong>配备顶级名师</strong>，按物理选课方向实行导师制培养，同时享有参加<strong>首都知名高校、中学交流学习的优先权</strong>，参加自治区“英才计划”优先权，参加<strong>奥赛强基培优课程培训优先权</strong>，参加<strong>课程研学优先权</strong>，<strong>清北及其他国内名校“强基计划”优先推荐权</strong>以及获得<strong>各类奖学金优先权</strong>等。</p></div><h1 id="内蒙古师范大学附属中学"><a href="#内蒙古师范大学附属中学" class="headerlink" title="内蒙古师范大学附属中学"></a>内蒙古师范大学附属中学</h1><h2 id="官方链接-3"><a href="#官方链接-3" class="headerlink" title="官方链接"></a>官方链接</h2><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://mp.weixin.qq.com/s/QU1J5PzIe5bn7MM7tWhv3A">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">内蒙古师范大学附属中学</div>            <div class="tag-link-sitename">英才计划</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="报考条件-3"><a href="#报考条件-3" class="headerlink" title="报考条件"></a>报考条件</h2><div class="note success no-icon flat"><p>报考学生需同时满足以下两个条件：</p><ol><li>呼和浩特市市区内品德优良、综合素质全面的应届初三毕业生，对<strong>数学、物理</strong>等学科有浓厚兴趣及一定特长，且具备发展潜能；</li><li>呼市<strong>一模总成绩裸分470分以上（含470分）</strong>；或<strong>数学单科成绩达到100分以上（含100分）</strong>。</li></ol></div><h2 id="面试范围-3"><a href="#面试范围-3" class="headerlink" title="面试范围"></a>面试范围</h2><div class="note success no-icon flat"><p>我校自行组织命题、考试和阅卷。笔试内容为<strong>初中数学知识和高中理科拓展知识</strong>。</p></div><h2 id="培养方式-2"><a href="#培养方式-2" class="headerlink" title="培养方式"></a>培养方式</h2><div class="note success no-icon flat"><ol><li>通过高中“英才计划”招生录取的学生，直接<strong>编入我校“英才计划”基地班</strong>，实施专门培养，分配导师，<strong>“一人一策”</strong>，因材施教。</li><li>英才基地班实施“双导师、双基地”制度，聘任<strong>内蒙古大学</strong>和<strong>内蒙古师范大学的教授、博导等为导师</strong>，每周安排固定课程。同时，学生利用周末、寒暑假等<strong>走进大学和科研院所</strong>，在导师指导下开展学习与研究等。</li><li>加强数学等学科竞赛课程，以提高学生的学习能力，拓展学生的学科视野。同时<strong>对接高校强基计划的选拔要求</strong>，把学科竞赛与强基选拔有机结合。一方面，细化竞赛教学计划，确保培训达到专业组要求。另一方面，<strong>聘请校外教练进驻</strong>，与校内教练分工合作，提高竞赛教学的效率，提升竞赛教学的效果。同时，学校将和区外优质高中建立长期稳健的合作机制，共同培养“英才计划”尖端人才。</li></ol></div><h1 id="内蒙古师范大学附属第二中学"><a href="#内蒙古师范大学附属第二中学" class="headerlink" title="内蒙古师范大学附属第二中学"></a>内蒙古师范大学附属第二中学</h1><p><a href="https://mp.weixin.qq.com/s/Kq86i77zWx2FzWXzRP8Xwg">https://mp.weixin.qq.com/s/Kq86i77zWx2FzWXzRP8Xwg</a></p><h1 id="呼和浩特市第十四中学"><a href="#呼和浩特市第十四中学" class="headerlink" title="呼和浩特市第十四中学"></a>呼和浩特市第十四中学</h1><p><a href="https://mp.weixin.qq.com/s/-MEZoszLgivmcKXsXaHbSg">https://mp.weixin.qq.com/s/-MEZoszLgivmcKXsXaHbSg</a></p><h1 id="呼和浩特市第三十中学"><a href="#呼和浩特市第三十中学" class="headerlink" title="呼和浩特市第三十中学"></a>呼和浩特市第三十中学</h1><p><a href="https://mp.weixin.qq.com/s/o8bzJjK1d7bHWbJ9y0WMnQ">https://mp.weixin.qq.com/s/o8bzJjK1d7bHWbJ9y0WMnQ</a></p><h1 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1>]]></content>
      
      
      <categories>
          
          <category> 英才计划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英才计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 变量、运算与顺序结构</title>
      <link href="/Py_data/"/>
      <url>/Py_data/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note warning flat"><p>本文记录 Python 相关的<strong>变量、运算</strong>与<strong>输入输出</strong>的相关知识。</p></div><div class="note warning flat"><p>在阅读过程中有任何问题都可以发布到评论区，有价值的问题将会放到文章末尾Q&amp;A之中！</p></div><h1 id="什么是编程"><a href="#什么是编程" class="headerlink" title="什么是编程"></a>什么是编程</h1><div class="note success no-icon flat"><p><strong>编程</strong>是编写程序代码的中文简称，就是<strong>让计算机代码解决某个问题</strong>，对某个计算体系规定一定的运算方式，使计算体系按照该计算方式运行，并最终得到相应结果的过程。</p><p>通俗来讲，编程就是<strong>人类和计算机沟通的一种方式</strong>。</p></div><h1 id="Python语言基本框架"><a href="#Python语言基本框架" class="headerlink" title="Python语言基本框架"></a>Python语言基本框架</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调用库</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以直接写代码</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以写在函数中</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello from main!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用入口判断</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello, World!</span><br><span class="line">Hello from main!</span><br></pre></td></tr></table></figure><h2 id="库"><a href="#库" class="headerlink" title="库"></a>库</h2><div class="note success no-icon flat"><p>Python 中有一个独特的概念叫做 <strong>“库”</strong></p><p><strong>库（Library）</strong> 是 Python 中预先编写好的<strong>代码集合</strong>，包含了一系列<strong>函数、类、变量</strong>等，用于解决特定领域的问题。</p><p>可以将库理解为<strong>工具箱</strong>，每个工具箱里都有专门解决某类问题的工具。</p></div><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><div class="note success no-icon flat"><p>一般来说，Python中的<strong>库</strong>大致可以分为两类。</p><ul><li><p>一类是 Python <strong>自带</strong>的库，无需额外安装，<strong>直接调用</strong>即可，被称为<strong>标准库</strong>（Standard Library）。</p></li><li><p>另一类是 由<strong>社区开发者创建</strong>，需要通过<strong>包管理工具 <code>pip</code> 安装</strong>所使用的库，被称为<strong>第三方库</strong>（Third-party Libraries）。</p></li></ul></div><h4 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h4><div class="note success no-icon flat"><p>常用的一些<strong>标准库</strong>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> os</span><br></pre></td></tr></table></figure></div><h4 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h4><div class="note success no-icon flat"><p>常用的一些<strong>第三方库</strong>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> pandas</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br></pre></td></tr></table></figure></div><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><div class="note success no-icon flat"><p>在 python 中，<strong>调用库</strong>时需要使用 <strong><code>import</code> 关键字</strong>。</p><p>在调用时，可以调用<strong>完整的库</strong>，也可以调用某些<strong>特定的功能</strong>。</p><p>同时为了简化，也可以在调用的过程中给库进行<strong>重命名</strong>。</p></div><h4 id="导入整个库"><a href="#导入整个库" class="headerlink" title="导入整个库"></a>导入整个库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调用 math 库，内置一些有关于数学计算的函数</span></span><br><span class="line"><span class="comment"># 比如 根号: sqrt 圆周率: pi 对数: log</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 math 库中的 sqrt 计算根号 16</span></span><br><span class="line"><span class="built_in">print</span>(math.sqrt(<span class="number">16</span>))      <span class="comment"># 4.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 math 库中的 pi 获取圆周率</span></span><br><span class="line"><span class="built_in">print</span>(math.pi)            <span class="comment"># 3.141592653589793</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 math 库中的 log 计算对数</span></span><br><span class="line"><span class="built_in">print</span>(math.log(<span class="number">100</span>, <span class="number">10</span>))  <span class="comment"># 2.0</span></span><br></pre></td></tr></table></figure><h4 id="导入特定功能"><a href="#导入特定功能" class="headerlink" title="导入特定功能"></a>导入特定功能</h4><div class="note success no-icon flat"><p>在导入特定功能时，需要使用 <strong><code>from</code> 关键字</strong>来读取被调用的库，再使用 <strong><code>import</code> 调用特定的功能</strong>。</p><p>同时导入特定功能后，在使用时就<strong>无需再写库名</strong>，直接使用功能即可。</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从 math 库中调用 sqrt 和 pi 功能</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt, pi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在使用的过程中，无需再写库名，直接使用功能即可</span></span><br><span class="line"><span class="built_in">print</span>(sqrt(<span class="number">16</span>))           <span class="comment"># 4.0</span></span><br><span class="line"><span class="built_in">print</span>(pi)                 <span class="comment"># 3.141592653589793</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># log 未从 math 中调用，会报错</span></span><br><span class="line"><span class="built_in">print</span>(log(<span class="number">100</span>, <span class="number">10</span>))  <span class="comment"># 2.0</span></span><br></pre></td></tr></table></figure><h4 id="给库重命名"><a href="#给库重命名" class="headerlink" title="给库重命名"></a>给库重命名</h4><div class="note success no-icon flat"><p>在调用库的过程中，可以使用 <strong><code>as</code> 关键字</strong>来对库进行<strong>重命名</strong>，重命名之后在编写代码时会简洁一些。</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调用 numpy 库 并且重命名为 np</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 调用 pandas 库 并且重命名为 pd</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># 调用 matplotlib.pyplot 库 并且重命名为 plt</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在使用 numpy 库中的功能时，直接写 np 即可</span></span><br><span class="line">arr = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><h3 id="安装第三方库"><a href="#安装第三方库" class="headerlink" title="安装第三方库"></a>安装第三方库</h3><h4 id="什么是-pip？"><a href="#什么是-pip？" class="headerlink" title="什么是 pip？"></a>什么是 pip？</h4><div class="note success no-icon flat"><p><strong>pip</strong> 是 Python 的官方包管理工具，可以轻松地<strong>安装、卸载</strong>和<strong>管理</strong>第三方库。</p></div><h4 id="基本安装方法"><a href="#基本安装方法" class="headerlink" title="基本安装方法"></a>基本安装方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 pip 安装单个库</span></span><br><span class="line">pip install requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一次性安装多个库（用空格分隔）</span></span><br><span class="line">pip install numpy pandas matplotlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定特定版本安装（避免兼容性问题）</span></span><br><span class="line">pip install requests==2.25.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装最新版本（不推荐在生产环境使用）</span></span><br><span class="line">pip install --upgrade requests</span><br></pre></td></tr></table></figure><h4 id="国内镜像加速安装"><a href="#国内镜像加速安装" class="headerlink" title="国内镜像加速安装"></a>国内镜像加速安装</h4><div class="note info flat"><p>由于网络原因，直接从国外源下载可能很慢，建议使用国内镜像源：</p></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用清华镜像源</span></span><br><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用阿里云镜像源</span></span><br><span class="line">pip install -i https://mirrors.aliyun.com/pypi/simple/ numpy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置永久镜像源（推荐）</span></span><br><span class="line">pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><h2 id="主函数【程序入口】"><a href="#主函数【程序入口】" class="headerlink" title="主函数【程序入口】"></a>主函数【程序入口】</h2><div class="note success no-icon flat"><p>对于 python 来说，实际上<strong>并没有一个明确的主函数</strong>。</p><p>也就是说，在编写python代码时，可以<strong>直接进行编写</strong>，不需要写道特定的某个函数内部。</p><p>但是没有一个明确的主函数的情况下，如果当前文件被其他文件<strong>导入使用</strong>的话，就有可能会<strong>产生错误</strong>。</p><p>所以，在编写 python 代码的过程中，通常要<strong>写明一个函数作为程序的入口</strong>，该函数被称为<strong>主函数</strong>。</p></div><div class="note danger no-icon flat"><p>对于<strong>函数类型</strong>的知识点，在之后的<strong>函数篇章</strong>内具体讲解。</p></div><h3 id="定义主函数"><a href="#定义主函数" class="headerlink" title="定义主函数"></a>定义主函数</h3><div class="note success no-icon flat"><p>在 python 代码中，需要通过一个<strong>特殊变量 <code>__name__</code></strong> 来获取当前<strong>模块的名称</strong>。</p><p>一般我们会将<strong>主函数命名为 <code>main</code></strong> ，然后再<strong>定义一个 <code>main</code> 函数</strong>来编写我们的代码内容。</p></div><div class="note success no-icon flat"><p>在上述代码中，<strong>主函数</strong>片段如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 主函数入口</span><br><span class="line"><span class="function">def <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"><span class="function">    print(<span class="string">&quot;Hello from main!&quot;</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># 常用入口判断</span></span><br><span class="line"><span class="function">if __name__ =</span>= <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">main</span>()</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello from main!</span><br></pre></td></tr></table></figure></div><div class="note danger no-icon flat"><p>但是要注意的是，在 python 中，程序<strong>不会去自动读取</strong>main 函数作为程序的入口。</p><p>也就是说，如果在上述代码片段上面还有未放入任何函数的代码时，会<strong>先去执行该代码片段</strong>。</p></div><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><div class="note success no-icon flat"><p>在 <strong>python</strong> 代码的编写过程中，需要<strong>严格控制缩进格数</strong>。</p><p>在 <strong>Python</strong> 中函数内容是通过<strong>缩进</strong>来规定<strong>函数、判断、循环</strong>等等的范围的，处于<strong>同一缩进长度</strong>下的代码片段为<strong>同一片程序片段</strong>。</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数入口</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 该 print 输出内容为 main 函数下的程序片段</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello from main!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用入口判断</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 调用main函数的程序为 if 判断下的内容</span></span><br><span class="line">    main()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="comment"># print 输出 i 这个片段为 for 循环结构下的内容</span></span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h3 id="英文输入"><a href="#英文输入" class="headerlink" title="英文输入"></a>英文输入</h3><div class="note success no-icon flat"><p>在 Python 程序编写的过程中，<strong>除注释外</strong>，所有的内容都要用<strong>英文输入</strong>，包括所有的符号。</p></div><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><div class="note success no-icon flat"><p>在 python 中，注释使用 <code>#</code> 来说明，注释内容，<strong>不参与编译</strong>，相当于<strong>学习笔记</strong>。</p></div><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><div class="note success no-icon flat"><p>不管使用编程语言进行编程时，都需要用到<strong>各种变量</strong>来<strong>存储各种信息</strong>。变量保留的是它<strong>所存储的值的内存位置</strong>。</p><p>这意味着，当您<strong>创建一个变量</strong>时，就会在内存中<strong>保留一些空间</strong>。</p></div><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><div class="note success no-icon flat"><p>在 python 中，<strong>常用的数据类型</strong>有如下几种：</p></div><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><table><thead><tr><th>类型</th><th>关键字</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>整型</td><td><code>int</code></td><td><code>age = 25</code></td><td>整数，无大小限制</td></tr><tr><td>浮点型</td><td><code>float</code></td><td><code>price = 19.99</code></td><td>带小数点的数字</td></tr><tr><td>字符串</td><td><code>str</code></td><td><code>name = &quot;Alice&quot;</code></td><td>文本数据，用单&#x2F;双引号</td></tr><tr><td>布尔型</td><td><code>bool</code></td><td><code>is_active = True</code></td><td>逻辑值：<code>True</code> 或 <code>False</code></td></tr><tr><td>空类型</td><td><code>NoneType</code></td><td><code>result = None</code></td><td>表示空值或无值</td></tr></tbody></table><h3 id="容器数据类型"><a href="#容器数据类型" class="headerlink" title="容器数据类型"></a>容器数据类型</h3><table><thead><tr><th>类型</th><th>关键字</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>列表</td><td><code>list</code></td><td><code>numbers = [1, 2, 3]</code></td><td>有序、可变的元素集合</td></tr><tr><td>元组</td><td><code>tuple</code></td><td><code>coordinates = (10, 20)</code></td><td>有序、不可变的元素集合</td></tr><tr><td>字典</td><td><code>dict</code></td><td><code>person = &#123;&quot;name&quot;: &quot;Bob&quot;&#125;</code></td><td>键值对集合</td></tr><tr><td>集合</td><td><code>set</code></td><td><code>unique_numbers = &#123;1, 2, 3&#125;</code></td><td>无序、不重复元素集合</td></tr></tbody></table><h2 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h2><div class="note success no-icon flat"><p>python中定义变量时无需说明变量是什么类型的，直接写变量名同时用 <code>=</code> 进行赋值或者输入即可。</p><p><strong>浮点数</strong>的赋值可以用<strong>科学计数法</strong>。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 定义字符串变量 - 用于存储文本信息</span><br><span class="line">name = <span class="string">&quot;张三&quot;</span></span><br><span class="line"><span class="built_in">print</span>(f<span class="string">&quot;姓名: &#123;name&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"># 定义整数变量 - 用于存储整数值 - 使用输入的方式进行定义</span><br><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入你的年龄：&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(f<span class="string">&quot;年龄: &#123;age&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"># 定义浮点数变量 - 用于存储带小数的数值</span><br><span class="line">height = <span class="number">1.75</span></span><br><span class="line"><span class="built_in">print</span>(f<span class="string">&quot;身高: &#123;height&#125; 米&quot;</span>)</span><br><span class="line"></span><br><span class="line"># 定义布尔变量 - 用于存储真/假值</span><br><span class="line">is_student = True</span><br><span class="line"><span class="built_in">print</span>(f<span class="string">&quot;是否学生: &#123;is_student&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"># 定义空值变量 - 表示变量尚未赋值或值为空</span><br><span class="line">address = None</span><br><span class="line"><span class="built_in">print</span>(f<span class="string">&quot;地址: &#123;address&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><h2 id="变量命名规则"><a href="#变量命名规则" class="headerlink" title="变量命名规则"></a>变量命名规则</h2><h3 id="允许的字符"><a href="#允许的字符" class="headerlink" title="允许的字符"></a>允许的字符</h3><div class="note success no-icon flat"><ul><li>变量名只能包含<strong>字母</strong>（a-z, A-Z）、<strong>数字</strong>（0-9）和<strong>下划线</strong>（_）</li><li>变量名不能以数字开头</li><li>变量名是<strong>大小写敏感</strong>的（age, Age, AGE 是三个不同的变量）</li></ul></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ✅ 允许使用的字符：字母、数字、下划线</span></span><br><span class="line">username = <span class="string">&quot;张三&quot;</span>        <span class="comment"># 字母</span></span><br><span class="line">user_name = <span class="string">&quot;李四&quot;</span>      <span class="comment"># 字母 + 下划线</span></span><br><span class="line">user2 = <span class="string">&quot;王五&quot;</span>          <span class="comment"># 字母 + 数字</span></span><br><span class="line">_user = <span class="string">&quot;赵六&quot;</span>          <span class="comment"># 下划线开头</span></span><br><span class="line">user_ = <span class="string">&quot;钱七&quot;</span>          <span class="comment"># 下划线结尾</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;合法的变量名示例：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;username: <span class="subst">&#123;username&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;user_name: <span class="subst">&#123;user_name&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;user2: <span class="subst">&#123;user2&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;_user: <span class="subst">&#123;_user&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;user_: <span class="subst">&#123;user_&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ❌ 不允许使用的字符</span></span><br><span class="line"><span class="comment"># 2user = &quot;错误&quot;        # 数字开头 - 不允许！</span></span><br><span class="line"><span class="comment"># user-name = &quot;错误&quot;    # 连字符 - 不允许！</span></span><br><span class="line"><span class="comment"># user name = &quot;错误&quot;    # 空格 - 不允许！</span></span><br><span class="line"><span class="comment"># user@name = &quot;错误&quot;    # 特殊符号 - 不允许！</span></span><br></pre></td></tr></table></figure><h3 id="命名惯例-非强制要求"><a href="#命名惯例-非强制要求" class="headerlink" title="命名惯例[非强制要求]"></a>命名惯例[非强制要求]</h3><div class="note success no-icon flat"><ul><li>使用有意义的变量名</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ❌ 不推荐的命名方式</span></span><br><span class="line">n = <span class="number">10</span>                    <span class="comment"># 含义不明确</span></span><br><span class="line">d = <span class="string">&quot;2024-01-01&quot;</span>          <span class="comment"># 不知道是什么日期</span></span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]           <span class="comment"># 过于简写</span></span><br><span class="line">tmp = calculate_value()    <span class="comment"># 临时变量但长期使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ✅ 推荐的命名方式</span></span><br><span class="line">student_count = <span class="number">10</span>                    <span class="comment"># 明确表示学生数量</span></span><br><span class="line">registration_date = <span class="string">&quot;2024-01-01&quot;</span>      <span class="comment"># 明确表示注册日期</span></span><br><span class="line">student_scores = [<span class="number">95</span>, <span class="number">88</span>, <span class="number">92</span>]         <span class="comment"># 明确表示学生分数列表</span></span><br><span class="line">calculated_average = calculate_value() <span class="comment"># 明确表示计算得到的平均值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;有意义的变量名示例：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;学生人数: <span class="subst">&#123;student_count&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;注册日期: <span class="subst">&#123;registration_date&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;学生分数: <span class="subst">&#123;student_scores&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;计算平均值: <span class="subst">&#123;calculated_average&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更多好的示例</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_user_order</span>(<span class="params">user_id, order_items</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;处理用户订单&quot;&quot;&quot;</span></span><br><span class="line">    total_amount = calculate_total(order_items)</span><br><span class="line">    order_status = <span class="string">&quot;processing&quot;</span></span><br><span class="line">    <span class="keyword">return</span> order_status, total_amount</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">validate_email_format</span>(<span class="params">email_address</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;验证邮箱格式&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;@&quot;</span> <span class="keyword">in</span> email_address <span class="keyword">and</span> <span class="string">&quot;.&quot;</span> <span class="keyword">in</span> email_address:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><ul><li>使用小写字母，单词之间用下划线连接（蛇形命名法）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ✅ 蛇形命名法：所有字母小写，单词间用下划线连接</span></span><br><span class="line">student_name = <span class="string">&quot;张三&quot;</span></span><br><span class="line">total_score = <span class="number">95.5</span></span><br><span class="line">is_registered = <span class="literal">True</span></span><br><span class="line">max_connection_count = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;蛇形命名法示例：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;学生姓名: <span class="subst">&#123;student_name&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;总分: <span class="subst">&#123;total_score&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;是否注册: <span class="subst">&#123;is_registered&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最大连接数: <span class="subst">&#123;max_connection_count&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在函数名中的应用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_total_price</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_user_info_by_id</span>(<span class="params">user_id</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;用户<span class="subst">&#123;user_id&#125;</span>的信息&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在变量名中的应用</span></span><br><span class="line">user_list = [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>]</span><br><span class="line">config_file_path = <span class="string">&quot;/etc/app/config.ini&quot;</span></span><br><span class="line">database_connection_pool = <span class="string">&quot;连接池对象&quot;</span></span><br></pre></td></tr></table></figure><ul><li>避免使用单个字符（除非在循环计数器等简单场景）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ✅ 简单的循环计数器可以使用 i, j, k</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;外层循环: <span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  内层循环: <span class="subst">&#123;j&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>类名使用驼峰命名法（每个单词首字母大写，不使用下划线）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ✅ 小驼峰命名法：第一个单词小写，后续单词首字母大写</span></span><br><span class="line">studentName = <span class="string">&quot;张三&quot;</span></span><br><span class="line">totalScore = <span class="number">95.5</span></span><br><span class="line">isRegistered = <span class="literal">True</span></span><br><span class="line">maxConnectionCount = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;小驼峰命名法示例：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;学生姓名: <span class="subst">&#123;studentName&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;总分: <span class="subst">&#123;totalScore&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;是否注册: <span class="subst">&#123;isRegistered&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最大连接数: <span class="subst">&#123;maxConnectionCount&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ✅ 大驼峰命名法：所有单词首字母大写（用于类名）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StudentInfo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.name = <span class="string">&quot;学生&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DatabaseConnection</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.connected = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserManagementSystem</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.users = []</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;类名使用大驼峰命名法：&quot;</span>)</span><br><span class="line">student = StudentInfo()</span><br><span class="line">db_conn = DatabaseConnection()</span><br><span class="line">ums = UserManagementSystem()</span><br></pre></td></tr></table></figure></div><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><div class="note success no-icon flat"><p><strong>不能使用</strong>Python的<strong>保留字（关键字）</strong>作为变量名。</p><p>Python的保留字包括：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">False</span>, <span class="literal">None</span>, <span class="literal">True</span>, <span class="keyword">and</span>, <span class="keyword">as</span>, <span class="keyword">assert</span>, <span class="keyword">async</span>, <span class="keyword">await</span>, <span class="keyword">break</span>, <span class="keyword">class</span>, <span class="keyword">continue</span>, <span class="keyword">def</span>, <span class="keyword">del</span>, <span class="keyword">elif</span>, <span class="keyword">else</span>, <span class="keyword">except</span>, <span class="keyword">finally</span>, <span class="keyword">for</span>, <span class="keyword">from</span>, <span class="keyword">global</span>, <span class="keyword">if</span>, <span class="keyword">import</span>, <span class="keyword">in</span>, <span class="keyword">is</span>, <span class="keyword">lambda</span>, <span class="keyword">nonlocal</span>, <span class="keyword">not</span>, <span class="keyword">or</span>, <span class="keyword">pass</span>, <span class="keyword">raise</span>, <span class="keyword">return</span>, <span class="keyword">try</span>, <span class="keyword">while</span>, <span class="keyword">with</span>, <span class="keyword">yield</span></span><br></pre></td></tr></table></figure></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python 的关键字列表</span></span><br><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Python 关键字列表：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(keyword.kwlist)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ❌ 以下都是错误示例（取消注释会报错）</span></span><br><span class="line"><span class="comment"># if = 10              # if 是关键字</span></span><br><span class="line"><span class="comment"># for = &quot;循环&quot;         # for 是关键字</span></span><br><span class="line"><span class="comment"># class = &quot;类&quot;         # class 是关键字</span></span><br><span class="line"><span class="comment"># def = &quot;函数&quot;         # def 是关键字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ✅ 合法的替代命名</span></span><br><span class="line">if_condition = <span class="number">10</span>      <span class="comment"># 添加下划线</span></span><br><span class="line">for_loop = <span class="string">&quot;循环&quot;</span>      <span class="comment"># 添加下划线</span></span><br><span class="line">class_name = <span class="string">&quot;类&quot;</span>      <span class="comment"># 使用有意义的名称</span></span><br><span class="line">function_def = <span class="string">&quot;函数&quot;</span>  <span class="comment"># 使用完整单词</span></span><br></pre></td></tr></table></figure><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><div class="note success no-icon flat"><p><strong>作用域</strong>指的是变量在程序中的<strong>可访问范围</strong>，决定了在程序的哪个部分可以访问哪个变量。</p><p>Python中有四种作用域，按照从内到外的顺序：</p><ul><li><strong>局部作用域（Local）</strong>：当前函数内部</li><li><strong>闭包作用域（Enclosing）</strong>：包含当前函数的外部函数的作用域</li><li><strong>全局作用域（Global）</strong>：当前模块（文件）的作用域</li><li><strong>内置作用域（Built-in）</strong>：Python内置函数和异常等</li></ul><p>这就是所谓的<strong>LEGB规则</strong>。</p></div><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><div class="note success no-icon flat"><p>✅ <strong>局部变量</strong>在函数内部定义，只能在<strong>定义它的函数内部</strong>访问。</p></div><h4 id="基本局部变量"><a href="#基本局部变量" class="headerlink" title="基本局部变量"></a>基本局部变量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_area</span>():</span><br><span class="line">    <span class="comment"># 这些都是局部变量，只能在函数内部使用</span></span><br><span class="line">    length = <span class="number">10</span></span><br><span class="line">    width = <span class="number">5</span></span><br><span class="line">    area = length * width</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;面积是: <span class="subst">&#123;area&#125;</span>&quot;</span>)  <span class="comment"># 在函数内部可以正常使用</span></span><br><span class="line"></span><br><span class="line">calculate_area()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ❌ 下面的代码会报错，因为局部变量在函数外部不可用</span></span><br><span class="line"><span class="comment"># print(length)  # 错误！</span></span><br><span class="line"><span class="comment"># print(width)   # 错误！</span></span><br><span class="line"><span class="comment"># print(area)    # 错误！</span></span><br></pre></td></tr></table></figure><h4 id="不同函数的局部变量"><a href="#不同函数的局部变量" class="headerlink" title="不同函数的局部变量"></a>不同函数的局部变量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">function1</span>():</span><br><span class="line">    number = <span class="number">100</span>  <span class="comment"># function1的局部变量</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;function1中的number: <span class="subst">&#123;number&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">function2</span>():</span><br><span class="line">    number = <span class="number">200</span>  <span class="comment"># function2的局部变量（和function1的无关）</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;function2中的number: <span class="subst">&#123;number&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">function1()  <span class="comment"># 输出: function1中的number: 100</span></span><br><span class="line">function2()  <span class="comment"># 输出: function2中的number: 200</span></span><br></pre></td></tr></table></figure><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><div class="note success no-icon flat"><p><strong>全局变量</strong>在函数外部定义，可以在<strong>整个模块中</strong>访问。</p></div><h4 id="基本全局变量"><a href="#基本全局变量" class="headerlink" title="基本全局变量"></a>基本全局变量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局变量 - 在所有函数外面定义</span></span><br><span class="line">school = <span class="string">&quot;阳光小学&quot;</span></span><br><span class="line">class_name = <span class="string">&quot;三年级二班&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_info</span>():</span><br><span class="line">    <span class="comment"># 在函数内部可以直接使用全局变量</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;学校: <span class="subst">&#123;school&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;班级: <span class="subst">&#123;class_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_class</span>():</span><br><span class="line">    <span class="keyword">global</span> class_name  <span class="comment"># 告诉Python我们要修改全局变量</span></span><br><span class="line">    class_name = <span class="string">&quot;四年级一班&quot;</span>  <span class="comment"># 修改全局变量</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;班级已改为: <span class="subst">&#123;class_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用函数</span></span><br><span class="line">show_info()      <span class="comment"># 输出: 学校: 阳光小学, 班级: 三年级二班</span></span><br><span class="line">change_class()   <span class="comment"># 输出: 班级已改为: 四年级一班</span></span><br><span class="line">show_info()      <span class="comment"># 输出: 学校: 阳光小学, 班级: 四年级一班</span></span><br></pre></td></tr></table></figure><h4 id="全局变量与局部变量同名"><a href="#全局变量与局部变量同名" class="headerlink" title="全局变量与局部变量同名"></a>全局变量与局部变量同名</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="number">95</span>  <span class="comment"># 全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_score</span>():</span><br><span class="line">    score = <span class="number">88</span>  <span class="comment"># 局部变量（和全局变量同名）</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;函数内部的score: <span class="subst">&#123;score&#125;</span>&quot;</span>)  <span class="comment"># 输出: 88（使用局部变量）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_global</span>():</span><br><span class="line">    <span class="keyword">global</span> score  <span class="comment"># 声明使用全局变量</span></span><br><span class="line">    score = <span class="number">100</span>   <span class="comment"># 修改全局变量</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;修改后的全局score: <span class="subst">&#123;score&#125;</span>&quot;</span>)  <span class="comment"># 输出: 100</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最初的score: <span class="subst">&#123;score&#125;</span>&quot;</span>)  <span class="comment"># 输出: 95</span></span><br><span class="line">test_score()                   <span class="comment"># 输出: 函数内部的score: 88</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;test_score后的score: <span class="subst">&#123;score&#125;</span>&quot;</span>)  <span class="comment"># 输出: 95（全局变量没变）</span></span><br><span class="line">test_global()                  <span class="comment"># 输出: 修改后的全局score: 100</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;test_global后的score: <span class="subst">&#123;score&#125;</span>&quot;</span>)  <span class="comment"># 输出: 100（全局变量变了）</span></span><br></pre></td></tr></table></figure><h1 id="输入、输出"><a href="#输入、输出" class="headerlink" title="输入、输出"></a>输入、输出</h1><h2 id="输出函数-print"><a href="#输出函数-print" class="headerlink" title="输出函数 - print()"></a>输出函数 - print()</h2><h3 id="什么是输出？"><a href="#什么是输出？" class="headerlink" title="什么是输出？"></a>什么是输出？</h3><div class="note success no-icon flat"><p>输出就是把电脑里的信息<strong>显示给我们看</strong>，就像在纸上写字一样。</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最简单的输出 - 显示一句话</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;你好，Python！&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出数字</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">123</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">3.14</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一次输出多个内容</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我的名字是：&quot;</span>, <span class="string">&quot;小明&quot;</span>, <span class="string">&quot;今年&quot;</span>, <span class="number">10</span>, <span class="string">&quot;岁&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用加号连接文字</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我&quot;</span> + <span class="string">&quot;喜欢&quot;</span> + <span class="string">&quot;编程&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="格式符基本介绍"><a href="#格式符基本介绍" class="headerlink" title="格式符基本介绍"></a>格式符基本介绍</h3><div class="note success no-icon flat"><p>当使用 print <strong>对变量进行输出</strong>时，可以使用<strong>格式符</strong>来替代语句中的变量，然后再<strong>使用 <code>%</code> 进行链接</strong>。</p><ul><li><p>如果对应一个变量，则<strong>直接写在 <code>%</code> 后面</strong></p></li><li><p>如果有多个变量，则<strong>用 <code>()</code> 将所有变量括起来</strong>，一一<strong>对应</strong>。</p></li></ul></div><table><thead><tr><th>格式符</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>%d</code></td><td>格式化整数，会直接取整</td><td><code>%d</code> → 3</td></tr><tr><td><code>%f</code></td><td>格式化浮点数，可以设置保留的小数点</td><td><code>%.2f</code> → 3.14</td></tr><tr><td><code>%s</code></td><td>格式化字符串</td><td><code>%s</code> → “小明”</td></tr></tbody></table><h3 id="基本格式化语法"><a href="#基本格式化语法" class="headerlink" title="基本格式化语法"></a>基本格式化语法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本格式：在字符串中使用格式符，然后用%连接数据</span></span><br><span class="line"><span class="string">&quot;格式化字符串&quot;</span> % (数据<span class="number">1</span>, 数据<span class="number">2</span>, 数据<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h4 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单个数据格式化</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数字：%d&quot;</span> % <span class="number">10</span>)  <span class="comment"># 输出：数字：10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多个数据格式化</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d + %d = %d&quot;</span> % (<span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>))  <span class="comment"># 输出：3 + 5 = 8</span></span><br></pre></td></tr></table></figure><h3 id="详细用法示例"><a href="#详细用法示例" class="headerlink" title="详细用法示例"></a>详细用法示例</h3><h4 id="整数格式化-d"><a href="#整数格式化-d" class="headerlink" title="整数格式化 %d"></a>整数格式化 <code>%d</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">12</span></span><br><span class="line">height = <span class="number">150.7</span>  <span class="comment"># 浮点数会被取整</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我今年%d岁&quot;</span> % age)          <span class="comment"># 输出：我今年12岁</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;身高大约%d厘米&quot;</span> % height)    <span class="comment"># 输出：身高大约150厘米</span></span><br></pre></td></tr></table></figure><h4 id="浮点数格式化-f"><a href="#浮点数格式化-f" class="headerlink" title="浮点数格式化 %f"></a>浮点数格式化 <code>%f</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pi = <span class="number">3.1415926</span></span><br><span class="line">weight = <span class="number">45.5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;圆周率：%f&quot;</span> % pi)           <span class="comment"># 输出：圆周率：3.141593（默认6位小数）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;体重：%.1f公斤&quot;</span> % weight)   <span class="comment"># 输出：体重：45.5公斤（保留1位小数）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;身高：%.2f米&quot;</span> % <span class="number">1.75</span>)       <span class="comment"># 输出：身高：1.75米（保留2位小数）</span></span><br></pre></td></tr></table></figure><h4 id="字符串格式化-s"><a href="#字符串格式化-s" class="headerlink" title="字符串格式化 %s"></a>字符串格式化 <code>%s</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;小明&quot;</span></span><br><span class="line">hobby = <span class="string">&quot;打篮球&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我叫%s&quot;</span> % name)                  <span class="comment"># 输出：我叫小明</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%s喜欢%s&quot;</span> % (name, hobby))       <span class="comment"># 输出：小明喜欢打篮球</span></span><br></pre></td></tr></table></figure><h3 id="综合应用示例"><a href="#综合应用示例" class="headerlink" title="综合应用示例"></a>综合应用示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;小明&quot;</span></span><br><span class="line">age = <span class="number">12</span></span><br><span class="line">height = <span class="number">1.4567</span></span><br><span class="line">weight = <span class="number">45.123</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 综合使用各种格式符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我的名字叫%s，今年%d岁了，身高%.2f米，体重%.1f公斤&quot;</span> % (name, age, height, weight))</span><br><span class="line"><span class="comment"># 输出：我的名字叫小明，今年12岁了，身高1.46米，体重45.1公斤</span></span><br></pre></td></tr></table></figure><h3 id="宽度控制（占位符）"><a href="#宽度控制（占位符）" class="headerlink" title="宽度控制（占位符）"></a>宽度控制（占位符）</h3><h4 id="浮点数宽度控制"><a href="#浮点数宽度控制" class="headerlink" title="浮点数宽度控制"></a>浮点数宽度控制</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">number = <span class="number">12.345</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数字：%8.2f&quot;</span> % number)   <span class="comment"># 输出：数字：   12.35（总共8个字符宽度）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数字：%5.1f&quot;</span> % number)   <span class="comment"># 输出：数字： 12.3（总共5个字符宽度）</span></span><br></pre></td></tr></table></figure><h4 id="字符串宽度控制"><a href="#字符串宽度控制" class="headerlink" title="字符串宽度控制"></a>字符串宽度控制</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;小明&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;姓名：%10s&quot;</span> % name)      <span class="comment"># 输出：姓名：        小明（右对齐）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;姓名：%-10s&quot;</span> % name)     <span class="comment"># 输出：姓名：小明        （左对齐）</span></span><br></pre></td></tr></table></figure><h4 id="更多宽度控制示例"><a href="#更多宽度控制示例" class="headerlink" title="更多宽度控制示例"></a>更多宽度控制示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数字宽度控制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;|%5d|&quot;</span> % <span class="number">123</span>)        <span class="comment"># 输出：|  123|（右对齐）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;|%-5d|&quot;</span> % <span class="number">123</span>)       <span class="comment"># 输出：|123  |（左对齐）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 浮点数宽度控制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;|%8.2f|&quot;</span> % <span class="number">3.14159</span>)  <span class="comment"># 输出：|    3.14|</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;|%-8.2f|&quot;</span> % <span class="number">3.14159</span>) <span class="comment"># 输出：|3.14    |</span></span><br></pre></td></tr></table></figure><h3 id="实用小技巧"><a href="#实用小技巧" class="headerlink" title="实用小技巧"></a>实用小技巧</h3><h4 id="对齐显示表格"><a href="#对齐显示表格" class="headerlink" title="对齐显示表格"></a>对齐显示表格</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%-10s %5s %8s&quot;</span> % (<span class="string">&quot;姓名&quot;</span>, <span class="string">&quot;年龄&quot;</span>, <span class="string">&quot;身高&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%-10s %5d %8.2f&quot;</span> % (<span class="string">&quot;小明&quot;</span>, <span class="number">12</span>, <span class="number">1.56</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%-10s %5d %8.2f&quot;</span> % (<span class="string">&quot;小红&quot;</span>, <span class="number">11</span>, <span class="number">1.48</span>))</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">姓名         年龄      身高</span><br><span class="line">小明           12     1.56</span><br><span class="line">小红           11     1.48</span><br></pre></td></tr></table></figure><h4 id="百分比显示"><a href="#百分比显示" class="headerlink" title="百分比显示"></a>百分比显示</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="number">0.8567</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;正确率：%.1f%%&quot;</span> % (score * <span class="number">100</span>))  <span class="comment"># 输出：正确率：85.7%</span></span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><div class="note danger no-icon flat"><ol><li><strong>格式符顺序</strong>：格式符的顺序必须与后面数据的顺序一致</li><li><strong>数据类型匹配</strong>：确保格式符与数据类型匹配</li><li><strong>转义百分号</strong>：要显示真正的<code>%</code>符号，需要写两个<code>%%</code></li></ol></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正确的写法</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%s考了%d分，正确率%.1f%%&quot;</span> % (<span class="string">&quot;小明&quot;</span>, <span class="number">95</span>, <span class="number">95.0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误的写法（顺序不匹配）</span></span><br><span class="line"><span class="comment"># print(&quot;%s考了%d分&quot; % (95, &quot;小明&quot;))  # 会报错</span></span><br></pre></td></tr></table></figure><div class="note warning no-icon flat"><p>这种格式化方法虽然经典，但在Python 3.6+中，更推荐使用<strong>f-string格式化方法</strong>，它更加简洁易读！</p></div><h2 id="输入函数-input"><a href="#输入函数-input" class="headerlink" title="输入函数 - input()"></a>输入函数 - input()</h2><h3 id="什么是输入？"><a href="#什么是输入？" class="headerlink" title="什么是输入？"></a>什么是输入？</h3><div class="note success no-icon flat"><p>输入就是我们通过键盘<strong>给电脑发送信息</strong>，就像<strong>跟电脑说话</strong>一样。</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最简单的输入</span></span><br><span class="line"><span class="built_in">input</span>()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 带提示的输入</span></span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;请输入你的名字：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;你好，&quot;</span>, name)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入数字进行计算</span></span><br><span class="line">num1 = <span class="built_in">input</span>(<span class="string">&quot;请输入第一个数字：&quot;</span>)</span><br><span class="line">num2 = <span class="built_in">input</span>(<span class="string">&quot;请输入第二个数字：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;两个数字相加等于：&quot;</span>, num1 + num2)</span><br></pre></td></tr></table></figure><div class="note warning no-icon flat"><p><strong>注意：</strong> 上面这个例子有问题！input()输入的都是文字，不能直接计算。</p></div><h2 id="输入内容的类型转换"><a href="#输入内容的类型转换" class="headerlink" title="输入内容的类型转换"></a>输入内容的类型转换</h2><h3 id="为什么需要转换？"><a href="#为什么需要转换？" class="headerlink" title="为什么需要转换？"></a>为什么需要转换？</h3><div class="note success no-icon flat"><p>因为<code>input()</code>把所有的输入都当作<strong>文字[字符类型]<strong>处理，数字也需要先变成</strong>真正的数字</strong>才能计算。</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把输入的文字转换成数字</span></span><br><span class="line">num1 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入第一个数字：&quot;</span>))</span><br><span class="line">num2 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入第二个数字：&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;两个数字相加等于：&quot;</span>, num1 + num2)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转换成小数</span></span><br><span class="line">price = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入商品价格：&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;价格是：&quot;</span>, price)</span><br></pre></td></tr></table></figure><h2 id="实用的输入输出例子"><a href="#实用的输入输出例子" class="headerlink" title="实用的输入输出例子"></a>实用的输入输出例子</h2><h3 id="例子1：简单的自我介绍"><a href="#例子1：简单的自我介绍" class="headerlink" title="例子1：简单的自我介绍"></a>例子1：简单的自我介绍</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;你叫什么名字？&quot;</span>)</span><br><span class="line">age = <span class="built_in">input</span>(<span class="string">&quot;你今年几岁？&quot;</span>)</span><br><span class="line">hobby = <span class="built_in">input</span>(<span class="string">&quot;你喜欢做什么？&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;大家好，我叫&quot;</span>, name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我今年&quot;</span>, age, <span class="string">&quot;岁&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我喜欢&quot;</span>, hobby)</span><br></pre></td></tr></table></figure><h3 id="例子2：计算器"><a href="#例子2：计算器" class="headerlink" title="例子2：计算器"></a>例子2：计算器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=== 简单计算器 ===&quot;</span>)</span><br><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入第一个数：&quot;</span>))</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入第二个数：&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a, <span class="string">&quot;+&quot;</span>, b, <span class="string">&quot;=&quot;</span>, a + b)</span><br><span class="line"><span class="built_in">print</span>(a, <span class="string">&quot;-&quot;</span>, b, <span class="string">&quot;=&quot;</span>, a - b)</span><br><span class="line"><span class="built_in">print</span>(a, <span class="string">&quot;×&quot;</span>, b, <span class="string">&quot;=&quot;</span>, a * b)</span><br><span class="line"><span class="built_in">print</span>(a, <span class="string">&quot;÷&quot;</span>, b, <span class="string">&quot;=&quot;</span>, a / b)</span><br></pre></td></tr></table></figure><h3 id="例子3：画三角"><a href="#例子3：画三角" class="headerlink" title="例子3：画三角"></a>例子3：画三角</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">char = <span class="built_in">input</span>(<span class="string">&quot;你想用什么字符画三角？&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;  &quot;</span> + char)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span> + char*<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(char*<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h2 id="小贴士"><a href="#小贴士" class="headerlink" title="小贴士"></a>小贴士</h2><div class="note danger no-icon flat"><ol><li><strong>引号要用英文的</strong>：<code>&quot;正确&quot;</code> ✅ <code>“错误”</code> ❌</li><li><strong>括号也要用英文的</strong>：<code>print()</code> ✅ <code>print（）</code> ❌</li><li><strong>冒号不能少</strong>：<code>if age &gt; 10:</code> ✅ <code>if age &gt; 10</code> ❌</li><li><code>input()</code>  输入的都是<b>文字[字符类型]</b>，需要计算时要转换成<b>数字</b></li></ol></div><h1 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h1><div class="note success no-icon flat"><p>运算符是一种告诉计算机执行特定的<strong>数学或逻辑操作</strong>的符号。</p><p>基本的运算符包括简单的<strong>加【+】减【-】乘【*】除【&#x2F;】</strong></p><p>在 Python 语言中，额外的运算还包括：</p><ul><li><strong>取余数【%】</strong> - 计算除法后的余数</li><li><b>幂运算【**】 </b>- 计算一个数的多少次方</li><li><strong>整除【&#x2F;&#x2F;】</strong> - 只保留除法结果的整数部分</li></ul></div><div class="note success no-icon flat"><p>除此之外，Python 中还有一些特殊的赋值运算符，例如：</p><ul><li><strong>累加【+&#x3D;】</strong> - 给变量自身加上一个值</li><li><strong>累减【-&#x3D;】</strong> - 给变量自身减去一个值</li><li><strong>累乘【*&#x3D;】</strong> - 给变量自身乘以一个值</li><li><strong>累除【&#x2F;&#x3D;】</strong> - 给变量自身除以一个值</li></ul></div><div class="note success no-icon flat"><p>Python 还提供了<strong>类型转换函数</strong>来改变数据的类型，比如：</p><ul><li><strong>int()</strong> - 转换成整数</li><li><strong>str()</strong> - 转换成字符串</li><li><strong>float()</strong> - 转换成小数</li><li><strong>bool()</strong> - 转换成布尔值（True或False）</li></ul></div><h2 id="简单的算术运算"><a href="#简单的算术运算" class="headerlink" title="简单的算术运算"></a>简单的算术运算</h2><h3 id="加法运算"><a href="#加法运算" class="headerlink" title="加法运算"></a>加法运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加法就像把两个数放在一起</span></span><br><span class="line">a = <span class="number">5</span> + <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出：8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以直接输出</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> + <span class="number">2</span>)  <span class="comment"># 输出：12</span></span><br></pre></td></tr></table></figure><h3 id="减法运算"><a href="#减法运算" class="headerlink" title="减法运算"></a>减法运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 减法就像从一个数中拿走一部分</span></span><br><span class="line">b = <span class="number">10</span> - <span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># 输出：6</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">15</span> - <span class="number">8</span>)  <span class="comment"># 输出：7</span></span><br></pre></td></tr></table></figure><h3 id="乘法运算"><a href="#乘法运算" class="headerlink" title="乘法运算"></a>乘法运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 乘法就像重复加很多次</span></span><br><span class="line">c = <span class="number">3</span> * <span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(c)  <span class="comment"># 输出：12</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用*号表示乘法</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">5</span> * <span class="number">6</span>)  <span class="comment"># 输出：30</span></span><br></pre></td></tr></table></figure><h3 id="除法运算"><a href="#除法运算" class="headerlink" title="除法运算"></a>除法运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 除法就像把东西平均分</span></span><br><span class="line">d = <span class="number">10</span> / <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(d)  <span class="comment"># 输出：5.0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">9</span> / <span class="number">3</span>)  <span class="comment"># 输出：3.0</span></span><br></pre></td></tr></table></figure><h2 id="特殊的运算"><a href="#特殊的运算" class="headerlink" title="特殊的运算"></a>特殊的运算</h2><h3 id="整除运算"><a href="#整除运算" class="headerlink" title="整除运算"></a>整除运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 整除只保留整数部分，去掉小数</span></span><br><span class="line">e = <span class="number">10</span> // <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(e)  <span class="comment"># 输出：3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">7</span> // <span class="number">2</span>)  <span class="comment"># 输出：3</span></span><br></pre></td></tr></table></figure><h3 id="求余运算"><a href="#求余运算" class="headerlink" title="求余运算"></a>求余运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 求余就是算除法后剩下的部分</span></span><br><span class="line">f = <span class="number">10</span> % <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(f)  <span class="comment"># 输出：1（因为10÷3=3余1）</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">7</span> % <span class="number">2</span>)  <span class="comment"># 输出：1</span></span><br></pre></td></tr></table></figure><h3 id="幂运算"><a href="#幂运算" class="headerlink" title="幂运算"></a>幂运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 幂运算就像连乘</span></span><br><span class="line">g = <span class="number">2</span> ** <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(g)  <span class="comment"># 输出：8（2×2×2=8）</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> ** <span class="number">2</span>)  <span class="comment"># 输出：9（3×3=9）</span></span><br></pre></td></tr></table></figure><h2 id="变量自运算"><a href="#变量自运算" class="headerlink" title="变量自运算"></a>变量自运算</h2><h3 id="累加运算"><a href="#累加运算" class="headerlink" title="累加运算"></a>累加运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 累加就是自己加上一个数</span></span><br><span class="line">x = <span class="number">5</span></span><br><span class="line">x += <span class="number">3</span>  <span class="comment"># 相当于 x = x + 3</span></span><br><span class="line"><span class="built_in">print</span>(x)  <span class="comment"># 输出：8</span></span><br><span class="line"></span><br><span class="line">y = <span class="number">10</span></span><br><span class="line">y += <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(y)  <span class="comment"># 输出：12</span></span><br></pre></td></tr></table></figure><h3 id="累减运算"><a href="#累减运算" class="headerlink" title="累减运算"></a>累减运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 累减就是自己减去一个数</span></span><br><span class="line">m = <span class="number">10</span></span><br><span class="line">m -= <span class="number">4</span>  <span class="comment"># 相当于 m = m - 4</span></span><br><span class="line"><span class="built_in">print</span>(m)  <span class="comment"># 输出：6</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">8</span></span><br><span class="line">n -= <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(n)  <span class="comment"># 输出：5</span></span><br></pre></td></tr></table></figure><h2 id="实际应用例子"><a href="#实际应用例子" class="headerlink" title="实际应用例子"></a>实际应用例子</h2><h3 id="温度转换器"><a href="#温度转换器" class="headerlink" title="温度转换器"></a>温度转换器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把摄氏度转换成华氏度</span></span><br><span class="line">celsius = <span class="number">25</span>  <span class="comment"># 摄氏度</span></span><br><span class="line">fahrenheit = <span class="number">9</span> / <span class="number">5</span> * celsius + <span class="number">32</span>  <span class="comment"># 华氏度公式</span></span><br><span class="line"><span class="built_in">print</span>(fahrenheit)  <span class="comment"># 输出：77.0</span></span><br></pre></td></tr></table></figure><h3 id="购物计算"><a href="#购物计算" class="headerlink" title="购物计算"></a>购物计算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算买文具的总价</span></span><br><span class="line">pencil_price = <span class="number">2</span>  <span class="comment"># 铅笔单价</span></span><br><span class="line">notebook_price = <span class="number">5</span>  <span class="comment"># 笔记本单价</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 买3支铅笔和2个笔记本</span></span><br><span class="line">total = pencil_price * <span class="number">3</span> + notebook_price * <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(total)  <span class="comment"># 输出：16</span></span><br></pre></td></tr></table></figure><h3 id="分糖果游戏"><a href="#分糖果游戏" class="headerlink" title="分糖果游戏"></a>分糖果游戏</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 10个糖果分给3个小朋友</span></span><br><span class="line">candies = <span class="number">10</span></span><br><span class="line">children = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个小朋友分几个？还剩几个？</span></span><br><span class="line">each = candies // children</span><br><span class="line">left = candies % children</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;每个小朋友分到:&quot;</span>, each, <span class="string">&quot;个糖果&quot;</span>)  <span class="comment"># 输出：3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;还剩下:&quot;</span>, left, <span class="string">&quot;个糖果&quot;</span>)  <span class="comment"># 输出：1</span></span><br></pre></td></tr></table></figure><h2 id="小贴士-💡"><a href="#小贴士-💡" class="headerlink" title="小贴士 💡"></a>小贴士 💡</h2><div class="note success no-icon flat"><ol><li><strong>运算顺序</strong>：和数学一样，先乘除后加减</li><li><strong>括号优先</strong>：有括号先算括号里的</li><li><strong>注意符号</strong>：乘号是<code>*</code>，不是<code>×</code>；除号是<code>/</code>，不是<code>÷</code></li></ol><p>这些运算就像做数学题一样简单有趣，多练习就能熟练掌握！</p></div><h1 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python 基础语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 结构体和联合体</title>
      <link href="/CPP_struct/"/>
      <url>/CPP_struct/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note warning flat"><p>本文记录 C++ 相关的<strong>结构体</strong>的相关知识。</p></div><div class="note warning flat"><p>在阅读过程中有任何问题都可以发布到评论区，有价值的问题将会放到文章末尾Q&amp;A之中！</p></div><h1 id="什么叫结构体"><a href="#什么叫结构体" class="headerlink" title="什么叫结构体"></a>什么叫结构体</h1><div class="note success no-icon flat"><p>在生活中，我们的书包内可以同时放入语文书、数学书、文具盒等等<strong>不同类型</strong>的物品。</p><p>这些物品的<strong>类型不同</strong>，但是都是属于你的<strong>学习用品</strong>。</p><p>在程序中，结构体的功能和书包相同，就是将<strong>相关但是不同的数据类型</strong>“<strong>打包</strong>”在一起。</p></div><h2 id="为什么要“打包”数据"><a href="#为什么要“打包”数据" class="headerlink" title="为什么要“打包”数据"></a>为什么要“打包”数据</h2><div class="note success no-icon flat"><p>比如说在一个班级中，每个学生都有自己的姓名、学号、成绩等等不同的信息。</p><p>如果这些信息是相对独立的，那么就没办法通过学生的姓名查询到成绩，学号等等相关信息。</p><p>在代码中，我们也可以模拟一下这种情形。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> id, sorce;</span><br><span class="line">    string name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note success no-icon flat"><p>使用这种方法来定义的话，必须通过<strong>判断</strong>的形式来获取到相关联的信息，特别麻烦。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> id, sorce;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="keyword">if</span>(name == <span class="string">&quot;A&quot;</span>)&#123;</span><br><span class="line">        id = <span class="number">1</span>;</span><br><span class="line">        sorce = <span class="number">98</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(name == <span class="string">&quot;B&quot;</span>)&#123;</span><br><span class="line">        id = <span class="number">2</span>;</span><br><span class="line">        sorce = <span class="number">89</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning no-icon flat"><p>结构体的功能就是<strong>将多个不同类型的数据联系起来</strong>。</p></div><h1 id="什么叫联合体"><a href="#什么叫联合体" class="headerlink" title="什么叫联合体"></a>什么叫联合体</h1><div class="note success no-icon flat"><p>联合体和结构体十分类似，同样也是可以同时定义多个不同类型的变量。</p><p>但是和结构体不同的是，结构体中的每个成员都有自己的内存空间，而<strong>联合体中的所有元素共用同一片内存空间</strong>。</p><p>类似于<strong>变形金刚</strong>，有汽车和汽车人两种形态，但是<strong>同一时间只会存在一种形态</strong>。</p></div><h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><div class="note success no-icon flat"><p>结构体的<strong>声明</strong>是通过 <code>struct</code> 关键字来定义的。</p><p>具体定义方式如下。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> &#123; <span class="comment">// 创建了一个新的类型，叫 Student</span></span><br><span class="line">    string name; <span class="comment">// 成员1：姓名</span></span><br><span class="line">    <span class="type">int</span> age;     <span class="comment">// 成员2：年龄</span></span><br><span class="line">    <span class="type">double</span> score; <span class="comment">// 成员3：分数</span></span><br><span class="line">&#125;; <span class="comment">// 注意！这里的分号不能丢！</span></span><br></pre></td></tr></table></figure><div class="note warning no-icon flat"><p>强调：<code>struct</code> 是<strong>创建一个新的数据类型</strong>，而不是创建变量。</p><p>在此处，<code>Student</code> 的作用和 <code>int</code> 的作用是相同的。</p></div><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><div class="note danger no-icon flat"><p>那么，既然 <code>Student</code> 的作用和 <code>int</code> 的作用是<strong>相同</strong>的，该如何<strong>定义</strong>一个结构体变量呢？</p></div><div class="note success no-icon flat"><p>很简单，就像我们定义一个整数类型变量，或者整数类型数组的方式即可。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">double</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b[<span class="number">110</span>];</span><br><span class="line">    Student st1;</span><br><span class="line">    student st2[<span class="number">110</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><div class="note danger no-icon flat"><p>如何<strong>访问</strong>一个结构体内的成员呢？</p></div><div class="note success no-icon flat"><p>访问结构体内的元素时，需要用 <code>.</code> 来进行访问。</p><p>访问之后所有的操作和普通的数据类型<strong>基本相似</strong>。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">double</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Student st1;<span class="comment">// 定义一个结构体变量 st1</span></span><br><span class="line">    cin &gt;&gt; st1.name &gt;&gt; st1.age &gt;&gt; st1.score;<span class="comment">// 分别输入姓名，年龄和成绩。</span></span><br><span class="line">    </span><br><span class="line">    Student st2[<span class="number">110</span>];<span class="comment">// 定义一个结构体数组 st2</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++ )&#123;</span><br><span class="line">        <span class="comment">// 和访问数组的元素的方式相同，用下标进行访问</span></span><br><span class="line">        cin &gt;&gt; st2[i].name &gt;&gt; st2[i].age &gt;&gt; st2[i].sorce;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Student st3 = &#123;<span class="string">&quot;abc&quot;</span>, <span class="number">18</span>, <span class="number">92.6</span>&#125;;<span class="comment">// 特别的，结构体的初始化需要使用&#123; &#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输出和输入同样，用 . 访问之后就和基础的数据类型一样操作即可</span></span><br><span class="line">    cout &lt;&lt; st1.name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; st1.age &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; st1.score &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数中的结构体"><a href="#函数中的结构体" class="headerlink" title="函数中的结构体"></a>函数中的结构体</h2><div class="note success no-icon flat"><p>当结构体作为函数的参数进行传递的时候，同样也有<strong>传值参数</strong>和<strong>引用参数</strong>两种方式。</p><p>同样的，作为传值参数传递的时候在函数中修改结构体的变量的值<strong>不会影响</strong>到原结构体中的内容。</p><p>作为引用参数传递的时候在函数中修改结构体的变量的值<strong>会影响到</strong>原结构体中的内容。</p></div><h3 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">double</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 值传递：会创建结构体的副本</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printStudent</span><span class="params">(Student s)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名: &quot;</span> &lt;&lt; s.name &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;年龄: &quot;</span> &lt;&lt; s.age &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;成绩: &quot;</span> &lt;&lt; s.score &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 修改不会影响原结构体</span></span><br><span class="line">    s.age = <span class="number">20</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Student st1 = &#123;<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>, <span class="number">90.5</span>&#125;;</span><br><span class="line">    <span class="built_in">printStudent</span>(st1);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;实际年龄: &quot;</span> &lt;&lt; st1.age &lt;&lt; endl; <span class="comment">// 还是18，未被修改</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">double</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用传递：不会创建副本，直接操作原结构体</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updateStudent</span><span class="params">(Student &amp;s, <span class="type">double</span> newScore)</span> </span>&#123;</span><br><span class="line">    s.score = newScore; <span class="comment">// 直接修改原结构体</span></span><br><span class="line">    cout &lt;&lt; s.name &lt;&lt; <span class="string">&quot;的成绩已更新为: &quot;</span> &lt;&lt; s.score &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Student st1 = &#123;<span class="string">&quot;李四&quot;</span>, <span class="number">17</span>, <span class="number">85.0</span>&#125;;</span><br><span class="line">    <span class="built_in">updateStudent</span>(st1, <span class="number">92.5</span>); <span class="comment">// 传递引用</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;更新后的成绩: &quot;</span> &lt;&lt; st1.score &lt;&lt; endl; <span class="comment">// 变为92.5</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><div class="note success no-icon flat"><p>结构体同样也可以作为另外一个结构体中的成员，形成<strong>嵌套结构。</strong></p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义日期结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Date</span> &#123;</span><br><span class="line">    <span class="type">int</span> year;</span><br><span class="line">    <span class="type">int</span> month;</span><br><span class="line">    <span class="type">int</span> day;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义地址结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    string province;</span><br><span class="line">    string city;</span><br><span class="line">    string street;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学生结构体嵌套其他结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">double</span> score;</span><br><span class="line">    Date birthday;      <span class="comment">// 嵌套日期结构体</span></span><br><span class="line">    Address address;    <span class="comment">// 嵌套地址结构体</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化嵌套结构体</span></span><br><span class="line">    Student stu1 = &#123;</span><br><span class="line">        <span class="string">&quot;张三&quot;</span>, </span><br><span class="line">        <span class="number">18</span>, </span><br><span class="line">        <span class="number">90.5</span>,</span><br><span class="line">        &#123;<span class="number">2005</span>, <span class="number">5</span>, <span class="number">15</span>&#125;,           <span class="comment">// 初始化birthday</span></span><br><span class="line">        &#123;<span class="string">&quot;A省&quot;</span>, <span class="string">&quot;B市&quot;</span>, <span class="string">&quot;C区&quot;</span>&#125; <span class="comment">// 初始化address</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 访问嵌套结构体成员</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;学生信息:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名: &quot;</span> &lt;&lt; stu1.name &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;生日: &quot;</span> &lt;&lt; stu1.birthday.year &lt;&lt; <span class="string">&quot;年&quot;</span> </span><br><span class="line">         &lt;&lt; stu1.birthday.month &lt;&lt; <span class="string">&quot;月&quot;</span> </span><br><span class="line">         &lt;&lt; stu1.birthday.day &lt;&lt; <span class="string">&quot;日&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;地址: &quot;</span> &lt;&lt; stu1.address.province </span><br><span class="line">         &lt;&lt; stu1.address.city </span><br><span class="line">         &lt;&lt; stu1.address.street &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体排序"><a href="#结构体排序" class="headerlink" title="结构体排序"></a>结构体排序</h2><div class="note success no-icon flat"><p>在程序设计中，我们经常需要对一组数据进行排序。</p><p>当这组数据是结构体时，排序就变得更加实用和有趣。</p><p>接下来将会讲解两种对结构体进行排序的方法：传统的<strong>冒泡排序</strong>和现代的STL <strong>sort函数</strong>。</p></div><h3 id="为什么需要结构体排序？"><a href="#为什么需要结构体排序？" class="headerlink" title="为什么需要结构体排序？"></a>为什么需要结构体排序？</h3><div class="note success no-icon flat"><p>在实际应用中，我们很少只对单一数据进行排序。比如学生管理系统，我们可能需要：</p><ul><li>按成绩从高到低排名</li><li>按年龄从小到大排序</li><li>先按班级排序，再按成绩排序</li><li>按姓名拼音顺序排列</li></ul><p>结构体排序让我们能够<strong>以多种方式组织和查看数据</strong>，满足不同的业务需求。</p></div><h4 id="初始化结构体"><a href="#初始化结构体" class="headerlink" title="初始化结构体"></a>初始化结构体</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span> <span class="comment">// 包含sort函数</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">double</span> score;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 为了方便输出，添加一个显示方法</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; name &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; age &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; score &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="方法一：冒泡排序-理解排序的本质"><a href="#方法一：冒泡排序-理解排序的本质" class="headerlink" title="方法一：冒泡排序 - 理解排序的本质"></a>方法一：冒泡排序 - 理解排序的本质</h4><div class="note success no-icon flat"><p>冒泡排序是最经典的排序算法之一，通过<strong>相邻元素的比较和交换</strong>来达到排序的目的。</p></div><p><strong>基本原理</strong></p><div class="note warning no-icon flat"><p>冒泡排序就像水中的气泡一样，较大的元素会逐渐”浮”到数组的顶端。它的核心思想是：</p><ol><li>从第一个元素开始，<strong>比较相邻的两个元素</strong></li><li>如果顺序不对，就<strong>交换</strong>它们</li><li>重复这个过程，直到整个数组有序</li></ol></div><p><strong>按成绩降序排序</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 冒泡排序：按成绩降序排列</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubbleSortByScore</span><span class="params">(Student arr[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 每次循环将最大的元素&quot;冒泡&quot;到末尾</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n-i<span class="number">-1</span>; j++) &#123;</span><br><span class="line">            <span class="comment">// 比较相邻两个学生的成绩</span></span><br><span class="line">            <span class="keyword">if</span>(arr[j].score &lt; arr[j+<span class="number">1</span>].score) &#123;</span><br><span class="line">                <span class="comment">// 交换两个结构体</span></span><br><span class="line">                Student temp = arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note danger no-icon flat"><p><strong>代码解析：</strong></p><ul><li>外层循环控制排序的<strong>轮数</strong></li><li>内层循环进行相邻元素的<strong>比较和交换</strong></li><li><code>n-i-1</code> 是因为每轮排序后，最后的元素已经是最大的了</li></ul></div><p><strong>按年龄升序排序</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 冒泡排序：按年龄升序排列</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubbleSortByAge</span><span class="params">(Student arr[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n-i<span class="number">-1</span>; j++) &#123;</span><br><span class="line">            <span class="comment">// 比较年龄，小的在前</span></span><br><span class="line">            <span class="keyword">if</span>(arr[j].age &gt; arr[j+<span class="number">1</span>].age) &#123;</span><br><span class="line">                Student temp = arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>多级排序</strong>：更复杂的排序需求</p><div class="note success no-icon flat"><p>在实际应用中，我们经常需要<strong>多级排序</strong>。比如先按成绩排序，成绩相同的再按年龄排序：</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多级排序：成绩降序，成绩相同按年龄升序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubbleSortMultiLevel</span><span class="params">(Student arr[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n-i<span class="number">-1</span>; j++) &#123;</span><br><span class="line">            <span class="comment">// 先比较主要条件：成绩</span></span><br><span class="line">            <span class="keyword">if</span>(arr[j].score &lt; arr[j+<span class="number">1</span>].score) &#123;</span><br><span class="line">                Student temp = arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果成绩相同，再比较次要条件：年龄</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(arr[j].score == arr[j+<span class="number">1</span>].score &amp;&amp; arr[j].age &gt; arr[j+<span class="number">1</span>].age) &#123;</span><br><span class="line">                Student temp = arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>冒泡排序的完整示例</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">demonstrateBubbleSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Student students[<span class="number">5</span>] = &#123;</span><br><span class="line">        &#123;<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>, <span class="number">85.5</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;李四&quot;</span>, <span class="number">17</span>, <span class="number">92.0</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;王五&quot;</span>, <span class="number">19</span>, <span class="number">78.5</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;赵六&quot;</span>, <span class="number">18</span>, <span class="number">88.0</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;孙七&quot;</span>, <span class="number">17</span>, <span class="number">95.5</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;=== 冒泡排序演示 ===&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;排序前:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名\t年龄\t成绩&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        students[i].<span class="built_in">display</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">bubbleSortMultiLevel</span>(students, <span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n排序后(成绩降序，成绩相同年龄升序):&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名\t年龄\t成绩&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        students[i].<span class="built_in">display</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法二：sort函数-现代C-的利器"><a href="#方法二：sort函数-现代C-的利器" class="headerlink" title="方法二：sort函数 - 现代C++的利器"></a>方法二：sort函数 - 现代C++的利器</h4><div class="note success no-icon flat"><p><strong>STL</strong> 中的 <strong>sort</strong>函数是一个高效且灵活的排序工具，它采用了快速排序、堆排序和插入排序的混合算法。</p></div><p><strong>使用比较函数</strong></p><div class="note success no-icon flat"><p><strong>比较函数</strong>是告诉sort函数如何比较两个元素的关键：</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比较函数：按成绩降序</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compareByScore</span><span class="params">(<span class="type">const</span> Student &amp;a, <span class="type">const</span> Student &amp;b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.score &gt; b.score; <span class="comment">// 降序排列</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较函数：按年龄升序  </span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compareByAge</span><span class="params">(<span class="type">const</span> Student &amp;a, <span class="type">const</span> Student &amp;b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.age &lt; b.age; <span class="comment">// 升序排列</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较函数：多级排序（成绩降序，成绩相同按年龄升序）</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compareMultiLevel</span><span class="params">(<span class="type">const</span> Student &amp;a, <span class="type">const</span> Student &amp;b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.score != b.score)</span><br><span class="line">        <span class="keyword">return</span> a.score &gt; b.score; <span class="comment">// 成绩不同，按成绩降序</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> a.age &lt; b.age;     <span class="comment">// 成绩相同，按年龄升序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用sort函数排序</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">demonstrateSortFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Student students[<span class="number">5</span>] = &#123;</span><br><span class="line">        &#123;<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>, <span class="number">85.5</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;李四&quot;</span>, <span class="number">17</span>, <span class="number">92.0</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;王五&quot;</span>, <span class="number">19</span>, <span class="number">78.5</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;赵六&quot;</span>, <span class="number">18</span>, <span class="number">88.0</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;孙七&quot;</span>, <span class="number">17</span>, <span class="number">95.5</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;=== STL sort函数演示 ===&quot;</span> &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 按成绩降序排序</span></span><br><span class="line">    <span class="built_in">sort</span>(students, students + <span class="number">5</span>, compareByScore);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;按成绩降序:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名\t年龄\t成绩&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) </span><br><span class="line">        students[i].<span class="built_in">display</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 按年龄升序排序</span></span><br><span class="line">    <span class="built_in">sort</span>(students, students + <span class="number">5</span>, compareByAge);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n按年龄升序:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名\t年龄\t成绩&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) </span><br><span class="line">        students[i].<span class="built_in">display</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 多级排序</span></span><br><span class="line">    <span class="built_in">sort</span>(students, students + <span class="number">5</span>, compareMultiLevel);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n多级排序(成绩降序，成绩相同年龄升序):&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名\t年龄\t成绩&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) </span><br><span class="line">        students[i].<span class="built_in">display</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="联合体"><a href="#联合体" class="headerlink" title="联合体"></a>联合体</h1><div class="note success no-icon flat"><p>联合体（union）是C++中一种特殊的数据类型，它允许在<strong>同一块内存空间</strong>中存储不同的数据类型。</p><p>联合体的所有成员<strong>共享同一块内存</strong>，这意味着同一时间只能有一个成员是有效的。</p></div><h2 id="声明、定义和访问"><a href="#声明、定义和访问" class="headerlink" title="声明、定义和访问"></a>声明、定义和访问</h2><div class="note success no-icon flat"><p>联合体的声明、定义和访问的方式和结构体是<strong>完全相同的</strong>。</p><p>只不过在访问的过程中，后访问的元素会<strong>覆盖掉</strong>先访问到的元素。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> <span class="title class_">Data</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">double</span> d;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Data data;  <span class="comment">// 声明联合体变量</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用整型成员</span></span><br><span class="line">    data.i = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;整数: &quot;</span> &lt;&lt; data.i &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用浮点型成员（会覆盖整数值）</span></span><br><span class="line">    data.d = <span class="number">3.14</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;浮点数: &quot;</span> &lt;&lt; data.d &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用字符成员（会覆盖浮点数值）</span></span><br><span class="line">    data.c = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;字符: &quot;</span> &lt;&lt; data.c &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><table><thead><tr><th align="center">特性</th><th align="center">结构体 (struct)</th><th align="center">联合体 (union)</th></tr></thead><tbody><tr><td align="center"><strong>关键字</strong></td><td align="center"><code>struct</code></td><td align="center"><code>union</code></td></tr><tr><td align="center"><strong>内存分配</strong></td><td align="center">每个成员有<strong>独立内存空间</strong></td><td align="center">所有成员<strong>共享同一块内存</strong></td></tr><tr><td align="center"><strong>内存大小</strong></td><td align="center">≥ 所有成员大小之<strong>和</strong>（内存对齐）</td><td align="center">&#x3D; <strong>最大成员</strong>的大小</td></tr><tr><td align="center"><strong>成员使用</strong></td><td align="center">所有成员可以<strong>同时使用和访问</strong></td><td align="center">同一时间<strong>只能有一个成员有效</strong></td></tr><tr><td align="center"><strong>数据安全</strong></td><td align="center">成员<strong>相互独立</strong>，不会意外覆盖</td><td align="center">可能因错误使用导致<strong>数据覆盖</strong></td></tr><tr><td align="center"><strong>初始化</strong></td><td align="center">可以同时<strong>初始化所有成员</strong></td><td align="center">只能<strong>初始化第一个成员</strong></td></tr><tr><td align="center"><strong>访问方式</strong></td><td align="center">使用点运算符<code>.</code>访问成员</td><td align="center">使用点运算符<code>.</code>访问成员</td></tr><tr><td align="center"><strong>比喻</strong></td><td align="center"><strong>书包</strong> - 可同时放书、笔、本子</td><td align="center"><strong>变形金刚</strong> - 同一时间只能是一种形态</td></tr><tr><td align="center"><strong>适用场景</strong></td><td align="center">数据记录、对象建模、需要同时使用多个数据</td><td align="center">节省内存、类型转换、硬件编程、数据互斥</td></tr></tbody></table><h1 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h1><h2 id="typedef-简化"><a href="#typedef-简化" class="headerlink" title="typedef 简化"></a>typedef 简化</h2><h2 id="什么是typedef？"><a href="#什么是typedef？" class="headerlink" title="什么是typedef？"></a>什么是typedef？</h2><p><code>typedef</code> 是C++中的关键字，用于<strong>为已有的数据类型创建新的名称（别名）</strong>。就像给人<strong>起外号</strong>一样，让复杂的名字变得简单好记。</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> 原类型名 新类型名;</span><br></pre></td></tr></table></figure><h2 id="简化结构体类型名"><a href="#简化结构体类型名" class="headerlink" title="简化结构体类型名"></a>简化结构体类型名</h2><h3 id="传统方式的问题"><a href="#传统方式的问题" class="headerlink" title="传统方式的问题"></a>传统方式的问题</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每次声明变量都要写 struct 关键字</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> stu1;        <span class="comment">// 有点啰嗦</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> students[<span class="number">100</span>]; <span class="comment">// 更啰嗦</span></span><br></pre></td></tr></table></figure><h3 id="使用typedef简化"><a href="#使用typedef简化" class="headerlink" title="使用typedef简化"></a>使用typedef简化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法1：先定义结构体，再用typedef起别名</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">double</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Student</span> Stu;  <span class="comment">// 给 struct Student 起别名叫 Stu</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在可以用更简短的名字了</span></span><br><span class="line">Stu stu1;                   <span class="comment">// 等价于 struct Student stu1</span></span><br><span class="line">Stu students[<span class="number">100</span>];          <span class="comment">// 等价于 struct Student students[100]</span></span><br></pre></td></tr></table></figure><h3 id="更简洁的定义方式"><a href="#更简洁的定义方式" class="headerlink" title="更简洁的定义方式"></a>更简洁的定义方式</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法2：在定义结构体时直接使用typedef</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">double</span> score;</span><br><span class="line">&#125; Stu;  <span class="comment">// Stu 是 struct Student 的别名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 立即可以使用</span></span><br><span class="line">Stu stu1;</span><br><span class="line">stu1.name = <span class="string">&quot;李四&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="最简洁的方式（匿名结构体）"><a href="#最简洁的方式（匿名结构体）" class="headerlink" title="最简洁的方式（匿名结构体）"></a>最简洁的方式（匿名结构体）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法3：使用匿名结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">double</span> score;</span><br><span class="line">&#125; Stu;  <span class="comment">// 直接定义 Student 类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用起来最简洁</span></span><br><span class="line">Stu stu1;</span><br><span class="line">Stu class1[<span class="number">50</span>];</span><br></pre></td></tr></table></figure><h1 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ 基础语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 函数</title>
      <link href="/CPP_function/"/>
      <url>/CPP_function/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note warning flat"><p>本文记录 C++ 相关的<strong>函数</strong>的相关知识。</p></div><div class="note warning flat"><p>在阅读过程中有任何问题都可以发布到评论区，有价值的问题将会放到文章末尾Q&amp;A之中！</p></div><h1 id="函数示例"><a href="#函数示例" class="headerlink" title="函数示例"></a>函数示例</h1><h2 id="函数实现Hello-World"><a href="#函数实现Hello-World" class="headerlink" title="函数实现Hello World"></a>函数实现Hello World</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">fun</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数实现阶乘"><a href="#函数实现阶乘" class="headerlink" title="函数实现阶乘"></a>函数实现阶乘</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun1</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )&#123;</span><br><span class="line">        res *= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> num = <span class="number">5</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> ans = <span class="built_in">fun1</span>(num);</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h1><h2 id="函数的类型"><a href="#函数的类型" class="headerlink" title="函数的类型"></a>函数的类型</h2><div class="note success no-icon flat"><p>首先需要声明<strong>函数类型</strong>，其次需要写明<strong>函数名</strong>【任意起名】。</p></div><div class="note info no-icon flat"><p>​      函数的类型声明了该函数需要<strong>返回的值是什么类型</strong>。</p><p>​      注意函数的类型和变量的类型相比多一个<strong>void类型</strong>，即<strong>空类型</strong>，当函数定义为void类型，<strong>不需要返回值</strong>。</p><p>​      当函数类型<strong>不为 void 类型</strong>时，必须要有<strong>和函数类型相同的返回值</strong>。在函数内部<strong>使用 return</strong> 返回。</p></div><h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><div class="note success no-icon flat"><p>在函数名之后需要加一个<code>()</code>，括号内写明<strong>函数所需参数</strong>。</p></div><div class="note info no-icon flat"><p>​      注意不是所有的函数都需要参数，也就是说，函数的声明的括号内的参数<strong>可以为空。</strong></p><p>​      参数就是各种类型的变量，但是声明参数的过程和变量定义的过程有一些不同。</p><p>​      <strong>变量定义</strong>时，<strong>多个同类型变量</strong>可以用逗号 <code>,</code> 隔开定义即可。</p><p>​      <strong>函数的参数</strong>的声明<strong>即使是同类型的参数</strong>，也必须<strong>多次声明参数类型</strong>，每次声明用<code>,</code>隔开。</p></div><h2 id="函数体"><a href="#函数体" class="headerlink" title="函数体"></a>函数体</h2><div class="note success no-icon flat"><p>之后需要将函数的具体内容【函数体】 用 <code>{}</code> 括起来。</p></div><div class="note info no-icon flat"><p>​     与判断和循环不同的是，判断和循环内部如果只有一行代码，可以省略 {} </p><p>​     但是<strong>函数就算只有一行代码也必须写 {}</strong></p></div><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><div class="note success no-icon flat"><p>最后在函数体内部<strong>如果不是空类型，必须有返回值</strong>。如果不写返回值，返回的有可能是一个随机数。</p></div><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个返回类型为空类型的函数</span></span><br><span class="line"><span class="comment">// 函数名：fun1，没有参数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...; </span><br><span class="line">    <span class="comment">// 空类型函数无需 return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个返回类型为双精度浮点数类型的【double】的函数</span></span><br><span class="line"><span class="comment">// 函数名：fun2，有两个参数，均为 char 类型，每个参数的定义都需要写明类型并且用 , 隔开</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">fun2</span><span class="params">(<span class="type">char</span> a, <span class="type">char</span> b)</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> ans;</span><br><span class="line">    ...;</span><br><span class="line">    <span class="comment">// 函数类型是 double 类型，需要返回一个 double 类型的值</span></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h1><div class="note success no-icon flat"><p><strong>空类型无参函数</strong>调用时<strong>直接写明函数名，后面加上 ()</strong> 即可。</p><p><strong>如果函数有参数</strong>的话，需要在 () 内部<strong>给定同类型的参数</strong>，该参数可以是<strong>同类型的变量</strong>，或者<strong>直接赋值</strong>都可以。</p><p>其次看函数的<strong>类型是什么</strong>，如果<strong>不是空类型</strong>，那么则需要定义一个<strong>同类型的变量来接受返回值</strong>，也可以直接进行输出。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun2</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;n = &quot;</span> &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun3</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = n * m;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;调用 fun1(): &quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// fun1 为空类型，同时没有参数，调用直接写明函数名和()即可</span></span><br><span class="line">    <span class="built_in">fun1</span>();</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;调用 fun2(): &quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// fun2 为空类型，没有返回值。</span></span><br><span class="line">    <span class="comment">// 同时有一个int类型的参数，需要在()传递一个 int 类型的变量或者 int 类型的值</span></span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fun2</span>(a);</span><br><span class="line">    <span class="built_in">fun2</span>(<span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;调用 fun3(): &quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// fun3 为 int 类型，需要一个 int 类型的变量来接收返回值</span></span><br><span class="line">    <span class="comment">// 同时有两个 int 类型，需要在()内传递两个 int 类型的变量或者 int 类型的值</span></span><br><span class="line">    <span class="type">int</span> c = <span class="number">3</span>, d = <span class="number">4</span>;</span><br><span class="line">    <span class="type">int</span> e = <span class="built_in">fun3</span>(c, <span class="number">5</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;e = &quot;</span> &lt;&lt; e &lt;&lt; <span class="string">&quot;\nf = &quot;</span> &lt;&lt; <span class="built_in">fun3</span>(<span class="number">6</span>, d) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note danger no-icon flat"><p>一般来说<strong>主函数只能调用其他函数</strong>，不能被其他函数调用。</p><p>除主函数外，<strong>任何一个函数都可以调用任何一个函数</strong>，包括自己。</p></div><h1 id="函数的声明"><a href="#函数的声明" class="headerlink" title="函数的声明"></a>函数的声明</h1><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><div class="note success no-icon flat"><p>在程序中，也可以<strong>先对函数进行声明</strong>，之后在<strong>写明具体的函数体内容</strong>。</p><p>如同在定义变量的过程中，我们可以先<strong>定义变量</strong>，再进行<strong>赋值</strong>。</p></div><div class="note success no-icon flat"><p>在函数声明的过程中，函数的参数的<strong>参数名不是必须的</strong>，但是<strong>参数类型是必须的</strong>。</p><p>也就是说，<strong>参数名可以不写</strong>，但是<strong>类型必须声明</strong>。</p><p>在函数声明的最后，需要用 <code>;</code> 结束声明</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数的声明</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun1</span><span class="params">(<span class="type">int</span> ,<span class="type">int</span> )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数的定义</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun1</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span></span>&#123;</span><br><span class="line">    ...;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><div class="note danger no-icon flat"><p>如果<strong>不进行函数声明</strong>，那么<strong>被调用的函数一定要定义在调用函数的上面</strong>。</p><p>即如果 A 函数中要调用 B 函数，那么 B 函数必须定义在 A 函数之上。</p><p><strong>错误写法：这种写法会导致 fun1 找不到 fun2 函数。</strong></p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...;</span><br><span class="line">    <span class="comment">// 在 fun1 函数中调用 fun2 函数失败</span></span><br><span class="line">    <span class="built_in">fun2</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...;</span><br><span class="line">    <span class="built_in">fun1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正确写法：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被调用的 fun2 要写在调用 fun2 的 fun1 之上</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...;</span><br><span class="line">    <span class="built_in">fun2</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...;</span><br><span class="line">    <span class="built_in">fun1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info no-icon flat"><p>如果进行了函数的<strong>声明</strong>，那么函数的<strong>位置就没有要求</strong>。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun1</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...;</span><br><span class="line">    <span class="built_in">fun2</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...;</span><br><span class="line">    <span class="built_in">fun1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数的执行顺序"><a href="#函数的执行顺序" class="headerlink" title="函数的执行顺序"></a>函数的执行顺序</h1><h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><div class="note success no-icon flat"><p>所有的C++代码都是以主函数<strong>【main函数】</strong>为<strong>程序的入口</strong>的。</p><p>函数的调用都是<strong>从主函数中开始调用</strong>的。</p><p>在程序执行的过程中，当调用了一个函数，则必须<strong>完成该函数的内容之后</strong>才可以<strong>继续执行调用语句之后</strong>的内容。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun2</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;进入fun2():&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="type">int</span> m = n * n;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;fun2 执行结束&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;进入fun1()：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="type">int</span> res = <span class="built_in">fun2</span>(<span class="number">5</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;res = &quot;</span> &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;fun1 执行结束&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;调用fun1():&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">fun1</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;完成调用fun1()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><div class="note success no-icon flat"><p>在计算机内部，有一种常用的<strong>数据结构</strong>叫做<strong>栈</strong>。</p><p>栈的特点是<strong>从一端实现数据的出入</strong>，先入栈的数据后出栈，后入栈的数据先进栈。<strong>【先进后出】</strong></p></div><div class="note info no-icon flat"><p>函数的调用过程就是一个<strong>入栈出栈</strong>的过程。</p><p>每次<strong>调用一个函数</strong>都会将该函数<strong>入栈</strong>，在该函数<strong>执行完成</strong>之后该函数<strong>出栈</strong>。</p><p>之后调用这个函数的函数才会继续执行。</p><p>栈中<strong>最底层的是 main  函数</strong>。</p></div><h1 id="参数的类型"><a href="#参数的类型" class="headerlink" title="参数的类型"></a>参数的类型</h1><h2 id="传值参数"><a href="#传值参数" class="headerlink" title="传值参数"></a>传值参数</h2><div class="note success no-icon flat"><p>当函数内初始化一个<strong>非引用类型的变量</strong>时， 调用时所传递的值会<strong>拷贝到该变量</strong>上。</p><p>此时，在函数内部<strong>改变该参数</strong>的值<strong>不会影响</strong>到调用时原变量的<strong>初始值</strong>。</p></div><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><div class="note info no-icon flat"><p>在下面这个程序中，函数内定义了一个参数 <code>n</code> </p><p>在主函数中调用 fun1 函数时，原函数<strong>传递的</strong> <code>a</code> 的值为 <code>5</code>.</p><p>在 fun1 函数中将接收到的<strong>参数值</strong> <code>n</code> 改变为 <code>100</code></p><p>但是在 fun1 调用完成之后<strong>原函数中</strong> <code>a</code> 的值仍然为 <code>5</code>，没有变化。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun1</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;接收到的值：&quot;</span> &lt;&lt; a &lt;&lt; endl; </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;函数中改变参数值为100&quot;</span> &lt;&lt; endl;</span><br><span class="line">    a = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line">    </span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;调用函数：&quot;</span> &lt;&lt; endl;</span><br><span class="line">   </span><br><span class="line">   <span class="type">int</span> ans = <span class="built_in">fun1</span>(a);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;函数返回值：&quot;</span> &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;调用完成&quot;</span> &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;原函数中 a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="引用参数"><a href="#引用参数" class="headerlink" title="引用参数"></a>引用参数</h2><div class="note success no-icon flat"><p>当函数内初始化一个<strong>引用类型的变量</strong>时。</p><p>此时，在函数内部<strong>改变该参数</strong>的值<strong>会影响</strong>到调用时原变量的<strong>初始值</strong>。</p><p>引用的方法就是在函数定义时在参数前面加一个地址符<code>&amp;</code></p></div><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><div class="note info no-icon flat"><p>在下面这个程序中，函数内定义了两个参数<code>n, m</code></p><p>在主函数中调用 fun1 函数时，<strong>传递</strong>的 <code>a, b</code> 的值为 <code>3, 4</code>.</p><p>在 fun1 函数中将接收到的<strong>参数值</strong> <code>n, m</code> 改变为 <code>10, 20</code></p><p>但是在 fun1 调用完成之后<strong>原函数</strong>中 <code>a, b</code> 的值也变化为了 <code>10, 20</code></p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun1</span><span class="params">(<span class="type">int</span> &amp;n, <span class="type">int</span> &amp;m)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;接收到的 n = &quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&quot; m = &quot;</span> &lt;&lt; m &lt;&lt; endl; </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;函数中改变参数值为 10，20&quot;</span> &lt;&lt; endl;</span><br><span class="line">    n = <span class="number">10</span>, m = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">3</span>, b = <span class="number">4</span>;</span><br><span class="line">    </span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;调用函数：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">fun1</span>(a, b);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;调用完成&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;原函数中：a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note danger no-icon flat"><p>使用引用传参可以改变原函数中的值的原因是元素在<strong>内存中就是存放到一片地址</strong>当中的。</p><p>在使用引用传递时，传递的是<strong>该变量的地址</strong>。</p><p>所以改变函数中的值时是直接<strong>对该地址进行操作</strong>，所以原函数中也会改变。</p><p>而非引用时<strong>只传递了值</strong>，没有传递地址，相当于<strong>复制粘贴了一份</strong>，所以函数中的变化不会影响到原函数。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun1</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;fun1 中 n 的地址为: &quot;</span> &lt;&lt; &amp;n &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun2</span><span class="params">(<span class="type">int</span> &amp;n)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;fun2 中 n 的地址为: &quot;</span> &lt;&lt; &amp;n &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">30</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a 的值为：&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;原函数中 a 的地址为：&quot;</span> &lt;&lt; &amp;a &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">fun1</span>(a);</span><br><span class="line">    <span class="built_in">fun2</span>(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组参数"><a href="#数组参数" class="headerlink" title="数组参数"></a>数组参数</h2><div class="note success no-icon flat"><p>当参数为数组时，默认为<strong>引用参数</strong>。</p><p>即在函数内部改变数组的值时，会影响到原函数中的数组值。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> a[<span class="number">5</span>])</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;函数中改变数组值为 1&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++)&#123;</span><br><span class="line">        a[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;调用函数前 a 数组的值：&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++ )&#123;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;调用函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">fun</span>(a);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;调用结束&quot;</span> &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;调用函数后 a 数组的值：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++ )&#123;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><div class="note success no-icon flat"><p>当函数的参数类型为数组时，有三种定义方法。</p><ul><li>定义为<strong>确定长度数组</strong></li><li>定义为<strong>无长度数组</strong></li><li>定义为<strong>指针类型</strong></li></ul><p>在函数调用的过程中<strong>传递数组类型参数</strong>时，<strong>直接传递数组名</strong>即可。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确定长度数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun1</span><span class="params">(<span class="type">int</span> a[<span class="number">5</span>])</span></span>&#123;</span><br><span class="line">    ...;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无长度数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun2</span><span class="params">(<span class="type">int</span> a[])</span></span>&#123;</span><br><span class="line">    ...;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针类型</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun3</span><span class="params">(<span class="type">int</span> *a)</span></span>&#123;</span><br><span class="line">    ...;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 函数调用直接传递数组名即可</span></span><br><span class="line">    <span class="built_in">fun1</span>(a);</span><br><span class="line">    <span class="built_in">fun2</span>(a);</span><br><span class="line">    <span class="built_in">fun3</span>(a);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><div class="note success no-icon flat"><p>当函数的参数类型为多维数组时，基本的规则和一维数组相同。</p><p>但是在多维数组中，想要<strong>不填写长度</strong>时<strong>只能将第一维长度省略</strong>，<strong>其余维度都必须声明长度</strong>。</p><p>同样想要<strong>使用指针定义</strong>参数时，只能<strong>将第一维用指针</strong>表示，同时用<code>[]</code>括起来。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确定长度数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun1</span><span class="params">(<span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>])</span></span>&#123;</span><br><span class="line">    ...;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无长度数组，只能省略第一维长度</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun2</span><span class="params">(<span class="type">int</span> a[][<span class="number">4</span>])</span></span>&#123;</span><br><span class="line">    ...;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针传递，只能将第一维写为指针形式</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun3</span><span class="params">(<span class="type">int</span> (*a)[<span class="number">4</span>])</span></span>&#123;</span><br><span class="line">    ...;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123;</span><br><span class="line">        &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, </span><br><span class="line">        &#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;, </span><br><span class="line">        &#123;<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">fun1</span>(a);</span><br><span class="line">    <span class="built_in">fun2</span>(a);</span><br><span class="line">    <span class="built_in">fun3</span>(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="返回类型"><a href="#返回类型" class="headerlink" title="返回类型"></a>返回类型</h1><div class="note success no-icon flat"><p>函数中一般使用 return 语句来<strong>结束函数的执行</strong>，其作用<strong>相当于循环中的 break 语句</strong>。</p><p>在执行 return 语句之后，程序<strong>会返回到调用函数之后的一句语句</strong>继续执行。</p></div><h2 id="无返回值函数"><a href="#无返回值函数" class="headerlink" title="无返回值函数"></a>无返回值函数</h2><div class="note success no-icon flat"><p>void 类型函数可以不写 return 语句，因为在 <strong>void 类型</strong>中会在函数<strong>末尾自动执行</strong>一个 return 语句。</p><p>但是 void 类型<strong>也可以通过手动写一个 return 语句</strong>直接结束函数的执行。</p></div><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><div class="note info no-icon flat"><p>如果 a &gt; b 交换 a 和 b。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要实现主函数中的元素值也交换，需要定义为引用参数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> &amp;n, <span class="type">int</span> &amp;m)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 如果 n &lt;= m，则不满足题目要求，无需操作，直接结束函数 return 即可。</span></span><br><span class="line">    <span class="keyword">if</span>(n &lt;= m) <span class="keyword">return</span> ;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;满足题目条件&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 如果上述判断没有执行，说明满足题目要求，按照题目要求交换。</span></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    t = n;</span><br><span class="line">    n = m;</span><br><span class="line">    m = t;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 函数末尾无需 return ，默认函数结束返回</span></span><br><span class="line">    <span class="comment">// return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="built_in">fun</span>(a, b);</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="有返回值函数"><a href="#有返回值函数" class="headerlink" title="有返回值函数"></a>有返回值函数</h2><div class="note success no-icon flat"><p>有返回值函数<strong>必须写</strong> return 语句，且<strong>返回类型必须和函数类型相同</strong>，同时在<strong>调用函数时</strong>也需要一个<strong>同类型的变量</strong>来<strong>接收返回值</strong>。</p><p>如果<strong>不写 return 语句</strong>不会报错，但是<strong>返回的值不确定</strong>，是一个随机值。</p></div><h3 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h3><div class="note info no-icon flat"><p>函数实现阶乘。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数类型为 int 类型，必须返回一个 int 类型的变量</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun1</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )&#123;</span><br><span class="line">        res *= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回值为一个 int 类型的变量，和函数定义类型相同</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> num = <span class="number">5</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用函数时也需要定义一个函数定义类型的变量来接收返回值。</span></span><br><span class="line">    <span class="type">int</span> ans = <span class="built_in">fun1</span>(num);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><div class="note success no-icon flat"><p>在一个函数内部<strong>调用自己的过程</strong>叫做递归。</p><p>但是递归调用自己的过程中要注意<strong>写明终止条件</strong>，否则会一直调用下去。</p></div><h2 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h2><div class="note info no-icon flat"><p>递归实现阶乘。</p><p>解题思路：<strong>n! &#x3D; n * (n - 1)!</strong></p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归实现阶乘，从大到小逐个数字相乘</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 因为 1 的阶乘确定为 1，所以使用 1 为终止条件</span></span><br><span class="line">    <span class="comment">// 当参数为 1 时，返回值也为 1</span></span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">1</span>) </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 每次调用都调用比当前数值小 1 作为参数进行传递</span></span><br><span class="line">    <span class="comment">// 解题思路：n! = n * (n - 1)!</span></span><br><span class="line">    <span class="keyword">return</span> n * <span class="built_in">fun</span>(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="built_in">fun</span>(<span class="number">5</span>);</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ 基础语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 字符串</title>
      <link href="/CPP_String/"/>
      <url>/CPP_String/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note warning flat"><p>本文记录 C++ 相关的<strong>字符串</strong>的相关知识。</p></div><div class="note warning flat"><p>在阅读过程中有任何问题都可以发布到评论区，有价值的问题将会放到文章末尾Q&amp;A之中！</p></div><h1 id="什么是字符串"><a href="#什么是字符串" class="headerlink" title="什么是字符串"></a>什么是字符串</h1><div class="note success no-icon flat"><p>由<strong>多个字符组成的长序列</strong>叫做字符串。</p><p>字符串是计算机和人类进行沟通的手段之一。</p><p>人类以字符串形式向计算机输入代码指令，计算机将其转化为 01 代码进行识别，最后将结构再以字符串形式展示给人类。</p></div><h1 id="ASCII码表"><a href="#ASCII码表" class="headerlink" title="ASCII码表"></a>ASCII码表</h1><div class="note success no-icon flat"><p>在计算机内部，每个字符都对应有一个整数进行表示，计算机再将这个整数转化为二进制进行识别。</p><p>这个<strong>字符与整数对应的表</strong>为 <strong>ASCII 码表</strong>。</p><p>具体对应关系如下图所示。</p></div><p><img src="https://bu.dusays.com/2025/10/02/68de370a5d73e.png" alt="1759393511450.png"></p><div class="note danger no-icon flat"><p>在使用的过程中，常用的字符有：<code>&#39;0&#39;</code> 对应整数 <code>48</code>，<code>&#39;A&#39;</code> 对应整数 <code>65</code>， <code>&#39;a&#39;</code> 对应整数 <code>97</code>。</p></div><div class="note success no-icon flat"><p>在使用 ASCII 码表时，无需特殊记忆所有的内容，在做题过程中如果需要用到该表可以<strong>直接打表输出</strong>即可。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 常用的 ASCII 码值范围为 0 ~ 128 ，打表遍历只需遍历该范围即可。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">128</span>; i ++)&#123;</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; <span class="string">&quot; : &quot;</span> &lt;&lt; (<span class="type">char</span>)i &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="整数与字符转化"><a href="#整数与字符转化" class="headerlink" title="整数与字符转化"></a>整数与字符转化</h2><div class="note success no-icon flat"><p>每个字符都有自己对应的 ASCII 码值，均可以实现<strong>整数与字符的相互转化</strong>。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; c &lt;&lt; <span class="string">&quot; 字符对应整数为： &quot;</span> &lt;&lt; (<span class="type">int</span>)c &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> num = <span class="number">65</span>;</span><br><span class="line">    cout &lt;&lt; num &lt;&lt; <span class="string">&quot; 整数对应字符为：&quot;</span> &lt;&lt; (<span class="type">char</span>)num &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符运算"><a href="#字符运算" class="headerlink" title="字符运算"></a>字符运算</h2><div class="note success no-icon flat"><p>因为每个字符都对应有一个整数表示，所有<strong>字符</strong>也可以<strong>直接进行运算</strong>，参与运算时<strong>使用该字符对应的整数</strong>进行运算。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="string">&#x27;a&#x27;</span> - <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="string">&#x27;A&#x27;</span> * <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="string">&#x27;A&#x27;</span> + <span class="number">2</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a - A = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;A * B = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;A + 2 = &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="做题技巧"><a href="#做题技巧" class="headerlink" title="做题技巧"></a>做题技巧</h2><div class="note success no-icon flat"><p>在做题的过程中，如果涉及到字符的判断，可以<strong>直接对字符</strong>进行判断，也可以<strong>使用其对应的 ASCII 码</strong>进行判断。</p></div><div class="note info no-icon flat"><p>例题：输入一行字符，统计出其中数字字符的个数，以及字母字符的个数。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="type">int</span> nums = <span class="number">0</span>, chars = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; c)&#123;</span><br><span class="line">        <span class="comment">// 直接对字符进行判断</span></span><br><span class="line">        <span class="keyword">if</span>(c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) nums ++;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用 a 和 z 对应的 ASCII 码值进行判断</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c &gt;= <span class="number">97</span> &amp;&amp; c &lt;= <span class="number">122</span>) chars ++;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// A 对应 ASCII 码值为 65</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c &gt;= <span class="number">65</span> &amp;&amp; c &lt;= <span class="string">&#x27;Z&#x27;</span>) chars ++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    cout &lt;&lt; nums &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; chars &lt;&lt; endl; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h2><div class="note success no-icon flat"><p>定义一个 <strong>char 类型的数组</strong>就是一个<strong>字符数组</strong>。</p><p>字符数组和字符串是极其类似的，<strong>字符串</strong>就是在**字符数组的末尾再加上一个结束符 ‘\0’**。</p><p>该结束符的意义是指明该<strong>字符串是在哪里结束</strong>。</p><p>可以使用字符串来初始化字符数组，但此时要注意，每个字符串结尾会<strong>暗含一个’\0’字符</strong>，因此<strong>字符数组的长度至少要比字符串的长度多1</strong>！同时，如果数组范围<strong>没有预留结束符的位置</strong>，使用字符串初始化的方式是<strong>错误的</strong>。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// a1 a2 使用数组初始化的方式进行初始化</span></span><br><span class="line">    <span class="type">char</span> a1[] = &#123;<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;+&#x27;</span>&#125;;<span class="comment">// 末尾没有&#x27;\0&#x27;，a1 为字符数组</span></span><br><span class="line">    <span class="type">char</span> a2[] = &#123;<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;;<span class="comment">// 末尾有&#x27;\0&#x27;，a2 为字符串</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// a3 a4 使用字符串的方式进行初始化</span></span><br><span class="line">    <span class="type">char</span> a3[] = <span class="string">&quot;C++&quot;</span>;<span class="comment">// 末尾自动添加表示字符串的结束符</span></span><br><span class="line">    <span class="type">char</span> a4[<span class="number">6</span>] = <span class="string">&quot;ABCDEF&quot;</span>;<span class="comment">// 没有空间可以存放结束符，错误</span></span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a1 长度为：&quot;</span> &lt;&lt; <span class="keyword">sizeof</span> a1 &lt;&lt; endl; </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a2 长度为：&quot;</span> &lt;&lt; <span class="keyword">sizeof</span> a2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a3 长度为：&quot;</span> &lt;&lt; <span class="keyword">sizeof</span> a3 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a4 长度为：&quot;</span> &lt;&lt; <span class="keyword">sizeof</span> a4 &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><div class="note success no-icon flat"><p>可以直接使用 <code>cin 字符串名</code> 进行输入。</p><p>但是使用 cin 进行输入时，<strong>不会将空格识别为字符</strong>。</p><p>即当输入的字符串包含空格时，只会识别到空格之前的字符串。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">100</span>];</span><br><span class="line">    <span class="comment">// 输入测试1 ： “ABCDEF”</span></span><br><span class="line">    <span class="comment">// 输入测试2 ： “ABC DEF“</span></span><br><span class="line">    cin &gt;&gt; str;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; endl;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note success no-icon flat"><p>想要输入包含空格的字符串时，需要用到 <code>fgets()</code> 函数.</p><p>fgets() 函数当<strong>遇到回车才表示输入结束</strong>，当遇到<strong>空格</strong>时，会<strong>将其识别为字符</strong>。</p><p>fgets() 函数默认三个参数，第一个参数填写 <code>字符串名</code>，第二个参数填写 <code>字符串长度</code>【表示最多读入到哪个字符】，第三个参数默认填写 <code>stdin</code></p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">100</span>];</span><br><span class="line">    <span class="comment">// 输入测试1 ： “ABCDEF”</span></span><br><span class="line">    <span class="comment">// 输入测试2 ： “ABC DEF“</span></span><br><span class="line">    <span class="built_in">fgets</span>(str, <span class="number">100</span>, stdin);</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note danger no-icon flat"><p>注意在某些课程中会提供一个 <code>gets()</code> 函数，在最新的 C++ 标准中<strong>已经将其删除</strong>，目前使用的话有可能不会报错，但是<strong>在竞赛中是属于错误的语法!!!</strong></p></div><div class="note success no-icon flat"><p>使用 <code>scanf</code> 也可以输入字符串，对应的标准格式类型为 <code>%s</code> 。</p><p>但是要注意和其他类型变量不同的是，在输入字符串时，scanf <strong>不需要添加</strong> <code>&amp;</code>。</p><p>因为<strong>数组名会自动指向数组首元素的地址</strong>，无需再次引用。</p><p>同时，与 cin 相同，<strong>scanf 也不能识别空格</strong>，需要使用 <code>fgets</code> 函数进行输入。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; endl;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="做题技巧-1"><a href="#做题技巧-1" class="headerlink" title="做题技巧"></a>做题技巧</h3><div class="note success no-icon flat"><p>输入<strong>默认的下标是从 0 开始</strong>的。</p><p>想要输入的下标<strong>从非 0 位置开始</strong>，可以输入时，输入 <code>字符串名 + 长度</code> 来改变起始下标。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">100</span>];</span><br><span class="line">    cin &gt;&gt; str + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// scanf(&quot;%s&quot;, str + 1);     // 同样效果</span></span><br><span class="line">    cout &lt;&lt; str + <span class="number">1</span> &lt;&lt; endl;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><div class="note success no-icon flat"><p>输出可以直接用 <code>cout / printf</code> 进行输出</p><p>此外，想要从第几个字符开始进行输出，可以使用输出 <strong>字符串名 + 数量</strong> 的方式进行输出.</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> a1[<span class="number">100</span>] = <span class="string">&quot;ABCDEFG&quot;</span>;</span><br><span class="line">    cout &lt;&lt; a1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a1 + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a1 + <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a1 + <span class="number">3</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//    printf(&quot;%s\n&quot;, a1);</span></span><br><span class="line"><span class="comment">//    printf(&quot;%s\n&quot;, a1 + 1);</span></span><br><span class="line"><span class="comment">//    printf(&quot;%s\n&quot;, a1 + 2);</span></span><br><span class="line"><span class="comment">//    printf(&quot;%s\n&quot;, a1 + 3);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note success no-icon flat"><p>字符串的输出还有一个常用的函数 <code>puts()</code>。</p><p>可以<strong>直接输出字符串</strong>或者在括号内<strong>填写字符串名输出该字符串</strong>并且<strong>换行</strong>。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 直接输出字符串并且换行</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Hello World!!&quot;</span>);</span><br><span class="line">    <span class="comment">// 效果等价于下述代码</span></span><br><span class="line">    <span class="comment">// printf(&quot;Hello World!!\n&quot;);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输出定义的字符串</span></span><br><span class="line">    <span class="type">char</span> a[<span class="number">100</span>] = <span class="string">&quot;ABCDEFG&quot;</span>;</span><br><span class="line">    <span class="built_in">puts</span>(a);</span><br><span class="line">    <span class="comment">// 效果等价于下述代码</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; a &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><div class="note success no-icon flat"><p>在 C++ 中，字符串有一些常用的函数方便程序的编写。</p><p>在使用字符串的函数时，需要引入头文件 <code>#include &lt;cstring&gt;</code>.</p><p>常用的函数有如下几个：</p><ul><li><code>strlen(字符串名)</code>，求字符串的<strong>长度</strong>.</li><li><code>strcmp(字符串a, 字符串b)</code>，<strong>比较两个字符串</strong>的大小，比较的方式是使用**字典序[ASCII 码小的就小]**进行比较。<ul><li>a &lt; b 返回 -1</li><li>a &#x3D;&#x3D; b 返回 0</li><li>a &gt; b 返回 1</li></ul></li><li><code>strcpy(字符串a, 字符串b)</code>，将字符串b<strong>复制</strong>给从a开始的字符串。</li></ul></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">100</span>] = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;strlen(a) = &quot;</span> &lt;&lt; <span class="built_in">strlen</span>(a) &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 逐位比较，如果对应位置字符相同则比较下一个字符。</span></span><br><span class="line">    <span class="type">char</span> b[<span class="number">100</span>] = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="type">char</span> c[<span class="number">100</span>] = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;strcmp(b, c) = &quot;</span> &lt;&lt; <span class="built_in">strcmp</span>(b, c) &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> d[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(d, a);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;d = &quot;</span> &lt;&lt; d &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><div class="note success no-icon flat"><p>字符串本质是字符数组，所以<strong>和数组的遍历方式相似</strong>。</p><p>在读取<strong>长度</strong>时，用 <code>strlen</code> 函数读取。</p><p>在做题过程中，防止每次循环都计算一次长度，一般使用额外一个变量提前计算长度。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">100</span>] = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 提前计算长度，防止每次循环重复计算，增加代码运行时间。</span></span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(a);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++ )&#123;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><div class="note info no-icon flat"><p>例题：给定一个只包含小写字母的字符串，请你找到第一个仅出现一次的字符。如果没有，输出“no”。</p></div><div class="note success no-icon flat"><p>解题思路：输入的字符串只包含小写字母，共 26 个，可以额外使用一个数组来记录每个字符出现的次数，最后在重新遍历字符串，判断其对应数组值是否为 1 即可。</p></div><div class="note danger no-icon flat"><p>注意在最后遍历时要<strong>遍历原字符串</strong>，<strong>不可遍历计数数组</strong>，因为题目要求时输出第一个只出现一次的字符，不是字典序中最小的只出现一次的字符。</p><p>如果遍历计数数组的话，假如输入<code>za</code>，按照题目要求应该输出 <code>z</code>，但是遍历计数数组会输出 <code>a</code></p></div> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// str 记录字符串</span></span><br><span class="line"><span class="type">char</span> str[<span class="number">100010</span>];</span><br><span class="line"><span class="comment">// cnt 作为计数数组，记录每个字符出现的次数</span></span><br><span class="line"><span class="type">int</span> cnt[<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; str;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 遍历原字符串，每次访问到一个字符，将其对应到数组中计数累加</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++)&#123;</span><br><span class="line">        cnt[str[i]  - <span class="string">&#x27;a&#x27;</span>] ++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 遍历原字符串</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++)&#123;</span><br><span class="line">        <span class="comment">// 判断访问到的字符的出现次数</span></span><br><span class="line">        <span class="keyword">if</span>(cnt[str[i] - <span class="string">&#x27;a&#x27;</span>] == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">// 题目要求只输出第一个字符，当判断成立，输出之后直接 return 0 结束程序即可。</span></span><br><span class="line">            cout &lt;&lt; str[i] &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果遍历完成之后，程序还没有结束，说明没有满足题目要求的情况</span></span><br><span class="line">    <span class="comment">// 输出 no</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><div class="note success no-icon flat"><p>在 C++ 中，<strong>C++ 的标准库 (STL)</strong> 是 C++ 的核心组成部分之一，其中提供了大量的数据结构和算法。</p><p><code>string</code> 是 <strong>STL</strong> 中用于处理字符串的一个标准库。</p><p>在使用该标准库对字符串进行操作时，要调用头文件 <code>#include &lt;string&gt;</code></p></div><h2 id="定义和初始化"><a href="#定义和初始化" class="headerlink" title="定义和初始化"></a>定义和初始化</h2><div class="note success no-icon flat"><p>string 定义字符串的方式和变量定义的方式是相同的，直接 <code>string 变量名;</code> 即可。</p></div><div class="note success no-icon flat"><p>在初始化 string 类型字符串时有三种方法。</p><ul><li>直接定义为一个字符串。</li><li>直接定义等于另一个 string 类型字符串。</li><li>定义为重复的单个字符。</li></ul></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个空字符串 s1</span></span><br><span class="line">    string s1;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="comment">// 直接初始化为字符串</span></span><br><span class="line">    string s2 = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化一个字符串与 s2 相同</span></span><br><span class="line">    <span class="comment">// 等价于数组方式定义字符串中的 strcpy 函数</span></span><br><span class="line">    string s3 = s2;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化字符串为连续的单个字符，s4 = &quot;cccccccccc&quot;</span></span><br><span class="line">    <span class="function">string <span class="title">s4</span><span class="params">(<span class="number">10</span>, <span class="string">&#x27;c&#x27;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><div class="note success no-icon flat"><p>可以直接使用 <code>cin/cout</code> 实现 string 类型字符串的输入输出。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string s1, s2;</span><br><span class="line">    cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; <span class="string">&quot; s2 = &quot;</span> &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note success no-icon flat"><p>但是和数组类型字符串相同，使用 <strong>cin</strong> 输入同样<strong>不识别空格</strong>。</p><p>string 类型<strong>读取空格</strong>需要使用 <code>getline</code> 函数实现。</p><p><strong>getline语法：getline(cin, 字符串名)</strong></p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 测试输入1：ABCDEF</span></span><br><span class="line">    <span class="comment">// 测试输入2：ABC DEF</span></span><br><span class="line"><span class="built_in">getline</span>(cin, s);</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h3><div class="note success no-icon flat"><p>string 字符串可以直接进行拼接，<strong>直接相加</strong>即可。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string s1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    string s2 = <span class="string">&quot; World!&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; <span class="string">&quot; s2 = &quot;</span> &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 直接相加进行拼接</span></span><br><span class="line">    string s = s1 + s2;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;拼接后字符串为：&quot;</span> &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note success no-icon flat"><p>如果使用<strong>数组形式字符串进行拼接</strong>时，需要进行<strong>两次遍历</strong>。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> s1[] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    <span class="type">char</span> s2[] = <span class="string">&quot; World!&quot;</span>;</span><br><span class="line">    <span class="type">char</span> s3[<span class="number">110</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// len1 记录 s1 长度， len2 记录 s2 长度</span></span><br><span class="line">    <span class="type">int</span> len1 = <span class="built_in">strlen</span>(s1), len2 = <span class="built_in">strlen</span>(s2);</span><br><span class="line">    <span class="comment">// cnt 作为下标向 s3 内逐位复制字符</span></span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 遍历第一个字符串，将其复制到 s3 中</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len1; i ++ )&#123;</span><br><span class="line">        s3[cnt] = s1[i];</span><br><span class="line">        cnt ++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 遍历第二个字符串，将其复制到 s3 中</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len2; i ++ )&#123;</span><br><span class="line">        s3[cnt] = s2[i];</span><br><span class="line">        cnt ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s3); i ++ )&#123;</span><br><span class="line">        cout &lt;&lt; s3[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常用函数-1"><a href="#常用函数-1" class="headerlink" title="常用函数"></a>常用函数</h3><div class="note success no-icon flat"><ul><li><code>size()</code>：返回字符串的<strong>长度</strong>。</li><li><code>empty()</code>：检查字符串<strong>是否为空</strong>。</li><li><code>operator[]</code>：通过索引<strong>访问</strong>字符串中的<strong>字符</strong>。</li><li><code>substr()</code>：<strong>获取子字符串</strong>。</li><li><code>find()</code>：<strong>查找子字符串</strong>在主字符串中的<strong>位置</strong>。</li></ul></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 声明并初始化字符串</span></span><br><span class="line">    string s1 = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;原字符串： &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 size() 获取字符串长度</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 的长度为: &quot;</span> &lt;&lt; s1.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 empty() 检查字符串是否为空</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;该字符串是否为空？&quot;</span> &lt;&lt; (s1.<span class="built_in">empty</span>() ? <span class="string">&quot;Yes&quot;</span> : <span class="string">&quot;No&quot;</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 operator[] 访问特定位置的字符</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;下标为 7 的元素为： &quot;</span> &lt;&lt; s1[<span class="number">7</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 substr() 获取子字符串</span></span><br><span class="line">    string sub = s1.<span class="built_in">substr</span>(<span class="number">7</span>, <span class="number">5</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;从下标为 7 的位置开始获取长度为 5 的字串： &quot;</span> &lt;&lt; sub &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 find() 查找子字符串</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;字串 “World” 的下标开始位置为： &quot;</span> &lt;&lt; s1.<span class="built_in">find</span>(<span class="string">&quot;World&quot;</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ 基础语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 数组</title>
      <link href="/CPP_array/"/>
      <url>/CPP_array/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note warning flat"><p>本文记录 C++ 相关的<strong>数组</strong>的相关知识。</p></div><div class="note warning flat"><p>在阅读过程中有任何问题都可以发布到评论区，有价值的问题将会放到文章末尾Q&amp;A之中！</p></div><h1 id="什么是数组"><a href="#什么是数组" class="headerlink" title="什么是数组"></a>什么是数组</h1><div class="note success no-icon flat"><p>想要同时<strong>定义多个同类型</strong>的变量，可以使用数组定义。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义三个 int 类型的变量，分别为 a, b, c</span></span><br><span class="line"><span class="type">int</span> a, b, c;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义三个 int 类型的变量，分别为 a[0], a[1], a[2]</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><h1 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><div class="note success no-icon flat"><p>数组的定义和变量的定义方式是类似的。</p><p>只需要在变量名后使用 <strong>[ ] 声明变量的长度</strong>。</p><p>具体格式：<code>数组类型 变量名[长度]</code></p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 整型数组，长度为 110</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">110</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符数组，长度为 30</span></span><br><span class="line"><span class="type">char</span> s[<span class="number">30</span>];</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><div class="note success no-icon flat"><p>数组的初始化有如下几条规则：</p><ul><li><strong>未初始化</strong>的数组其每个元素值是<strong>不确定的</strong>。</li><li>初始化的数组可以<strong>不填写数组的长度</strong>，让其<strong>自动识别</strong>长度。</li><li>当<strong>定义长度大于初始化的元素个数</strong>时，其余<strong>未初始化的元素自动为 0</strong></li></ul></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 未初始化的数组其每个元素值是不确定的。</span></span><br><span class="line">    <span class="type">int</span> a[<span class="number">100</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 自动识别 b 数组长度为 3。</span></span><br><span class="line">    <span class="type">int</span> b[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 当定义长度大于初始化的元素个数时，其余未初始化的元素自动为 0。</span></span><br><span class="line">    <span class="comment">// c 数组等价于初始化为&#123;1, 2, 3, 0, 0&#125;</span></span><br><span class="line">    <span class="type">int</span> c[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i ++ )&#123;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全-0-数组"><a href="#全-0-数组" class="headerlink" title="全 0 数组"></a>全 0 数组</h3><div class="note success no-icon flat"><p>根据上述第三条规则，如果想要定义一个<strong>全 0 数组</strong>，可以<strong>只初始化一个元素值为 0</strong> 即可，其余元素自动初始化为 0。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个全 0 数组</span></span><br><span class="line">    <span class="type">int</span> a[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i ++ )&#123;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问数组元素"><a href="#访问数组元素" class="headerlink" title="访问数组元素"></a>访问数组元素</h2><div class="note success no-icon flat"><p>数组相当于定义了多个同类型的变量，想要访问这些变量可以通过<strong>下标</strong>来进行遍历。</p><p>数组<strong>默认下标是从 0 开始</strong>的，即首个数组元素为 <strong>a[0]</strong></p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; a[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; a[<span class="number">1</span>] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; a[<span class="number">2</span>] &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><div class="note success no-icon flat"><p>因为数组是通过下标访问的，所以我们可以通过<strong>循环</strong>来遍历整个数组。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++ )&#123;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="做题技巧"><a href="#做题技巧" class="headerlink" title="做题技巧"></a>做题技巧</h2><div class="note danger no-icon flat"><p>在做题的过程中，因为数组是从 0 开始的，所以最大访问范围到 <code>长度 - 1</code>。</p><p>即 <b> a[100] 只能访问到 a[0], a[1] …… a[99] </b>。</p><p>所以在使用数组做题的过程中，经常<strong>多定义几个长度</strong>来<strong>防止数组越界</strong>报错。</p><p>即假如题目要求<strong>数组范围为 100</strong>，通常定义<strong>数组范围为 110</strong>。</p></div><h1 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h1><div class="note success no-icon flat"><p>多维数组就是<strong>用数组的方式定义数组</strong>。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 大小为3的数组，每个元素是含有4个整数的数组。</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>]; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 将所有元素初始化为0</span></span><br><span class="line"><span class="comment">// 大小为10的数组，它的每个元素是含有20个元素的数组</span></span><br><span class="line"><span class="comment">// 这些数组的元素是含有30个整数的数组</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>][<span class="number">20</span>][<span class="number">30</span>] = &#123;<span class="number">0</span>&#125;; </span><br></pre></td></tr></table></figure><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><div class="note success no-icon flat"><p>想要定义<strong>几维数组</strong>，就在变量名后写<strong>几个 [ ]</strong></p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二维数组</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三位数组</span></span><br><span class="line"><span class="type">int</span> b[<span class="number">10</span>][<span class="number">10</span>][<span class="number">10</span>];</span><br></pre></td></tr></table></figure><h2 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h2><div class="note success no-icon flat"><p>多维数组的初始化的规则和一维数组的<strong>基本没有区别</strong>。</p><p>只不过在多维数组的初始化的过程中，为了方便看清楚维度，可以<strong>每个维度</strong>上面<strong>再加一个 {}</strong> 隔开</p></div> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个全 0 的二维数组</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义一个二维数组，初始化为1，2，3，4，5，6，7，8，9</span></span><br><span class="line">    <span class="type">int</span> b[<span class="number">3</span>][<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 也可以在每个维度上再加一个&#123;&#125;</span></span><br><span class="line">    <span class="type">int</span> c[<span class="number">3</span>][<span class="number">3</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;, &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问数组元素-1"><a href="#访问数组元素-1" class="headerlink" title="访问数组元素"></a>访问数组元素</h2><div class="note success no-icon flat"><p>多维数组的元素也可以通过下标访问，注意<strong>首个元素下标是从 0 开始的</strong>。</p><p>例如 ：</p><p><code>a[0][0]</code>  表示首个元素。</p><p><code>a[1][1] </code>  表示第一行第一列的元素。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">3</span>][<span class="number">3</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;, &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;&#125;;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; a[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; a[<span class="number">0</span>][<span class="number">2</span>] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; a[<span class="number">1</span>][<span class="number">1</span>] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; a[<span class="number">2</span>][<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历多维数组"><a href="#遍历多维数组" class="headerlink" title="遍历多维数组"></a>遍历多维数组</h3><div class="note success no-icon flat"><p>同样，多维数组也可以通过循环来遍历，只不过多维数组需要通过<strong>嵌套循环</strong>来遍历整个数组。</p><p>有<strong>几个维度就嵌套几个循环</strong>。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">3</span>][<span class="number">3</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;, &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j ++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;a[%d][%d] = %d &quot;</span>, i, j, a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h1><div class="note success no-icon flat"><p>C++ 中有一些内置的函数可以帮助我们实现一些简单的功能。</p><p>例如：</p><ul><li>将数组全部定义为 0 ：<code>memset(数组名, 0, sizeof 数组名)</code></li><li>复制数组：<code>memcpy(目标数组名, 原数组名, sizeof 数组名)</code></li></ul></div><h2 id="将数组定义为-0"><a href="#将数组定义为-0" class="headerlink" title="将数组定义为 0"></a>将数组定义为 0</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将 a 数组清零</span></span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">    <span class="comment">// 等价于如下操作</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;</span><br><span class="line">        a[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复制数组"><a href="#复制数组" class="headerlink" title="复制数组"></a>复制数组</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">int</span> b[<span class="number">10</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 复制 a 数组到 b 数组之中</span></span><br><span class="line">    <span class="built_in">memcpy</span>(b, a, <span class="keyword">sizeof</span> a);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 等价于如下操作</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;</span><br><span class="line">        b[i] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ 基础语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 循环结构</title>
      <link href="/CPP_Loop/"/>
      <url>/CPP_Loop/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note warning flat"><p>本文记录 C++ 相关的<strong>循环结构</strong>的相关知识。</p></div><div class="note warning flat"><p>在阅读过程中有任何问题都可以发布到评论区，有价值的问题将会放到文章末尾Q&amp;A之中！</p></div><h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><div class="note success no-icon flat"><p>在 C++ 中，当程序需要多次执行同一块代码时，一般会用到循环结构</p></div><h2 id="程序结构图"><a href="#程序结构图" class="headerlink" title="程序结构图"></a>程序结构图</h2><div class="note success no-icon flat"><p>大部分的<strong>循环语句</strong>均满足下面这个程序结构图。</p></div><p><img src="https://bu.dusays.com/2025/10/02/68de3705cdfd9.png" alt="1759393505532.png"></p><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><div class="note success no-icon flat"><p>C++ 中有<strong>三种方式</strong>实现循环结构。分别为 <strong>while 循环</strong>、<strong>do-while 循环</strong>、<strong>for 循环</strong></p></div><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><div class="note success no-icon flat"><p>while 循环的基本结构与 if 判断语句类似，只需在括号中<strong>写明条件即可</strong>。</p><p>区别是 while 循环，当条件满足时，将<strong>一直执行</strong>循环内部语句，<strong>直到条件不满足</strong>。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(判断条件)&#123;</span><br><span class="line">    ……;  <span class="comment">// 如果判断条件为真将执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">// 局部变量声明</span></span><br><span class="line">   <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// while 循环执行</span></span><br><span class="line">   <span class="keyword">while</span>( a &lt; <span class="number">20</span> )</span><br><span class="line">   &#123;</span><br><span class="line">       cout &lt;&lt; <span class="string">&quot;a 的值：&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">       a++;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="程序结构图-1"><a href="#程序结构图-1" class="headerlink" title="程序结构图"></a>程序结构图</h4><p><img src="https://bu.dusays.com/2025/10/02/68de3e510e94b.png" alt="1759395406387.png"></p><h3 id="do-while-循环"><a href="#do-while-循环" class="headerlink" title="do-while 循环"></a>do-while 循环</h3><div class="note success no-icon flat"><p>与 while 循环不同的是，<strong>while 循环</strong>是在<strong>循环开始时</strong>对条件进行判断。</p><p>而 <strong>do-while 循环</strong>是在<strong>循环结束时</strong>对条件进行判断，这样可以<strong>保证循环内部语句至少可以执行一次</strong>。</p><p>do-while 具体格式如下。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">   内部语句;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">while</span>(判断条件);</span><br></pre></td></tr></table></figure><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">// 局部变量声明</span></span><br><span class="line">   <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// do 循环执行</span></span><br><span class="line">   <span class="keyword">do</span></span><br><span class="line">   &#123;</span><br><span class="line">       cout &lt;&lt; <span class="string">&quot;a 的值：&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">       a = a + <span class="number">1</span>;</span><br><span class="line">   &#125;<span class="keyword">while</span>( a &lt; <span class="number">20</span> );</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="程序结构图-2"><a href="#程序结构图-2" class="headerlink" title="程序结构图"></a>程序结构图</h4><p><img src="https://bu.dusays.com/2025/10/02/68de37055db72.png" alt="1759393499722.png"></p><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><div class="note success no-icon flat"><p><strong>for 循环</strong>与其他两种循环方式不同的是，<strong>for 循环</strong>将循环<strong>变量的初始化</strong>和<strong>变化</strong>也同时在循环的时候进行了定义，而<strong>while 循环和 do-while 循环</strong>则<strong>需要额外定义</strong>出来。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(变量初始化; 判断条件; 变化情况)&#123;</span><br><span class="line">内部语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i ++ )&#123;</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="程序结构图-3"><a href="#程序结构图-3" class="headerlink" title="程序结构图"></a>程序结构图</h4><p><img src="https://bu.dusays.com/2025/10/02/68de3e42aed32.png" alt="1759395400221.png"></p><h1 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ 基础语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 判断结构</title>
      <link href="/CPP_judgment/"/>
      <url>/CPP_judgment/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note warning flat"><p>本文记录 C++ 相关的<strong>判断结构</strong>的相关知识。</p></div><div class="note warning flat"><p>在阅读过程中有任何问题都可以发布到评论区，有价值的问题将会放到文章末尾Q&amp;A之中！</p></div><h1 id="判断结构"><a href="#判断结构" class="headerlink" title="判断结构"></a>判断结构</h1><div class="note success no-icon flat"><p>在 C++ 中，程序运行的过程会通常会指定一个或者多个要评估的<strong>条件</strong>，以及指定满足该条件的情况下<strong>【条件为真】</strong>要执行的语句，与不满足该条件时<strong>【条件为假】</strong>要执行的语句。</p></div><h2 id="程序结构图"><a href="#程序结构图" class="headerlink" title="程序结构图"></a>程序结构图</h2><div class="note success no-icon flat"><p>大部分的<strong>判断语句</strong>均满足下面这个<strong>程序结构图</strong>。</p></div><p><img src="https://bu.dusays.com/2025/10/02/68de3f5968f6a.png" alt="1759395668549.png"></p><h2 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h2><div class="note success no-icon flat"><p>C++ 中提供了 <strong>if …… else 语句</strong>来实现判断功能。</p></div><h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><div class="note success no-icon flat"><p>单个 if 语句常用来实现<strong>只有一种判断条件</strong>的情况，具体的格式如下。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(判断条件)&#123;</span><br><span class="line">    ……;  <span class="comment">// 如果判断条件为真将执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">// 局部变量声明</span></span><br><span class="line">   <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 使用 if 语句检查布尔条件</span></span><br><span class="line">   <span class="keyword">if</span>( a &lt; <span class="number">20</span> )</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="comment">// 如果条件为真，则输出下面的语句</span></span><br><span class="line">       cout &lt;&lt; <span class="string">&quot;a 小于 20&quot;</span> &lt;&lt; endl;</span><br><span class="line">   &#125;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;a 的值是 &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="if……else-语句"><a href="#if……else-语句" class="headerlink" title="if……else 语句"></a>if……else 语句</h3><div class="note success no-icon flat"><p>当有<strong>两个判断条件</strong>的情况下，一般使用 <strong>if …… else 语言</strong>来实现。</p><p>其中，仍然在 <strong>if 后面的 ()</strong> 内写明判断条件，而 <strong>else 后面不写任何判断条件</strong>，默认为 if 后面的条件的反面情况。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(判断条件)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 如果判断条件为真将执行的语句</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 如果判断条件为假将执行的语句</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><div class="note success no-icon flat"><p>在下面这个例子中</p><p>if 后面的条件为 a &lt; 20 </p><p>else 默认表示 a &gt;&#x3D; 20 的情况</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">// 局部变量声明</span></span><br><span class="line">   <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 检查布尔条件</span></span><br><span class="line">   <span class="keyword">if</span>( a &lt; <span class="number">20</span> )</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="comment">// 如果条件为真，则输出下面的语句</span></span><br><span class="line">       cout &lt;&lt; <span class="string">&quot;a 小于 20&quot;</span> &lt;&lt; endl;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="comment">// 如果条件为假，则输出下面的语句</span></span><br><span class="line">       cout &lt;&lt; <span class="string">&quot;a 大于等于 20&quot;</span> &lt;&lt; endl;</span><br><span class="line">   &#125;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;a 的值是 &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="if、else-if、else语句"><a href="#if、else-if、else语句" class="headerlink" title="if、else if、else语句"></a>if、else if、else语句</h3><div class="note success no-icon flat"><p>当有<strong>三个以上判断条件</strong>的情况下，一般使用 <strong>if …else if… else 语言</strong>来实现。</p><p>其中，在 <strong>if 和 else if</strong> 后面的 () 内写明判断条件</p><p><strong>else 后面不写任何判断条件</strong>，默认为所有判断条件的反面情况。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(判断条件 <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 当判断条件 1 为真时执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(判断条件 <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 当判断条件 2 为真时执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(判断条件 <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 当判断条件 3 为真时执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 当上面条件都不为真时执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">// 局部变量声明</span></span><br><span class="line">   <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 检查布尔条件</span></span><br><span class="line">   <span class="keyword">if</span>( a == <span class="number">10</span> )</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="comment">// 如果 if 条件为真，则输出下面的语句</span></span><br><span class="line">       cout &lt;&lt; <span class="string">&quot;a 的值是 10&quot;</span> &lt;&lt; endl;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span>( a == <span class="number">20</span> )</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="comment">// 如果 else if 条件为真，则输出下面的语句</span></span><br><span class="line">       cout &lt;&lt; <span class="string">&quot;a 的值是 20&quot;</span> &lt;&lt; endl;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span>( a == <span class="number">30</span> )</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="comment">// 如果 else if 条件为真，则输出下面的语句</span></span><br><span class="line">       cout &lt;&lt; <span class="string">&quot;a 的值是 30&quot;</span> &lt;&lt; endl;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="comment">// 如果上面条件都不为真，则输出下面的语句</span></span><br><span class="line">       cout &lt;&lt; <span class="string">&quot;没有匹配的值&quot;</span> &lt;&lt; endl;</span><br><span class="line">   &#125;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;a 的准确值是 &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="条件运算符【-】"><a href="#条件运算符【-】" class="headerlink" title="条件运算符【?:】"></a>条件运算符【?:】</h2><div class="note success no-icon flat"><p>在 C++ 中，可以用<strong>条件运算符【?】</strong>来代替 <strong>if else 语句</strong>。</p><p>该运算符被称为<strong>三元运算符</strong>，其需要<strong>三个操作数</strong>。具体格式如下。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exp1 ? Exp2 : Exp3;</span><br></pre></td></tr></table></figure><div class="note success no-icon flat"><p>其中，<strong>Exp1 为条件语句</strong>。</p><ul><li>当 Exp1 为<strong>真</strong>时，计算 <strong>Exp2</strong> 的结果。</li><li>当 Exp1 为<strong>假</strong>时，计算 <strong>Exp3</strong> 的结果。</li></ul></div><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><p><strong>if-else 语句</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(y &lt; <span class="number">10</span>)&#123; </span><br><span class="line">   var = <span class="number">30</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">   var = <span class="number">40</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>条件运算符</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var = (y &lt; <span class="number">10</span>) ? <span class="number">30</span> : <span class="number">40</span>;</span><br></pre></td></tr></table></figure><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><div class="note success no-icon flat"><p>在 C++ 中，switch 语句用于基于不同的条件执行不同的代码块，它通常用来替代一系列的 if-else 语句，使代码更清晰和易读。</p><p>一个 <strong>switch</strong> 语句允许测试一个变量等于多个值时的情况。具体格式如下</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(变量名称)&#123;</span><br><span class="line">    <span class="keyword">case</span> 表达式<span class="number">1</span> :</span><br><span class="line">       内部语句<span class="number">1</span>;</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 表达式<span class="number">2</span> :</span><br><span class="line">       内部语句<span class="number">2</span>;</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span> : <span class="comment">// 相当于if-else逻辑中最后的一个else</span></span><br><span class="line">       内部语句<span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note danger no-icon flat"><p><strong>switch</strong> 语句必须遵循下面的规则：</p><ul><li><p><strong>switch</strong> 语句中的 <strong>变量名称</strong> 必须是一个整型或枚举类型，或者是一个 class 类型，其中 class 有一个单一的转换函数将其转换为整型或枚举类型。</p></li><li><p>在一个 switch 中可以有任意数量的 case 语句。每个 case 后跟一个要比较的值和一个冒号。</p></li><li><p>case 的 <strong>表达式</strong> 必须与 switch 中的变量具有相同的数据类型，且必须是一个常量或字面量。</p></li><li><p>当被测试的变量等于 case 中的常量时，case 后跟的语句将被执行，直到遇到 <strong>break</strong> 语句为止。</p></li><li><p>当遇到 <strong>break</strong> 语句时，switch 终止，控制流将跳转到 switch 语句后的下一行。</p></li><li><p>不是每一个 case 都需要包含 <strong>break</strong>。如果 case 语句不包含 <strong>break</strong>，控制流将会 <em>继续</em> 后续的 case，直到遇到 break 为止。</p></li><li><p>一个 <strong>switch</strong> 语句可以有一个可选的 <strong>default</strong> case，出现在 switch 的结尾。default case 可用于在上面所有 case 都不为真时执行一个任务。default case 中的 <strong>break</strong> 语句不是必需的。</p></li></ul></div><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> day = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (day) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Monday&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Tuesday&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Wednesday&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Thursday&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Friday&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Saturday&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Sunday&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Invalid day&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ 基础语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 变量、运算与顺序结构</title>
      <link href="/CPP_data/"/>
      <url>/CPP_data/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note warning flat"><p>本文记录 C++ 相关的<strong>变量、运算</strong>与<strong>输入输出</strong>的相关知识。</p></div><div class="note warning flat"><p>在阅读过程中有任何问题都可以发布到评论区，有价值的问题将会放到文章末尾Q&amp;A之中！</p></div><h1 id="什么是编程"><a href="#什么是编程" class="headerlink" title="什么是编程"></a>什么是编程</h1><div class="note success no-icon flat"><p><strong>编程</strong>是编写程序代码的中文简称，就是<strong>让计算机代码解决某个问题</strong>，对某个计算体系规定一定的运算方式，使计算体系按照该计算方式运行，并最终得到相应结果的过程。</p><p>通俗来讲，编程就是<strong>人类和计算机沟通的一种方式</strong>。</p></div><h1 id="C-语言基本框架"><a href="#C-语言基本框架" class="headerlink" title="C++语言基本框架"></a>C++语言基本框架</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span><span class="comment">// 头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;<span class="comment">// 使用 std 命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;<span class="comment">// 函数入口【主函数】</span></span><br><span class="line">    ……;<span class="comment">// 程序编写区</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">// 返回值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><div class="note success no-icon flat"><p>C++ 语言中定义了一部分<strong>头文件</strong>，在这些头文件之中包含一部分已有的<strong>函数【功能】</strong>，可以在编写程序的过程中<strong>直接调用</strong>即可。</p></div><h3 id="程序内片段"><a href="#程序内片段" class="headerlink" title="程序内片段"></a>程序内片段</h3><div class="note success no-icon flat"><p>在上述代码片段中，首行代码就是调用头文件的过程，格式为：<b>#include &lt;头文件名&gt;</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>&lt;iostream&gt;</strong> 头文件中内置了基本的<strong>输入、输出、换行</strong>函数：<strong>cin、cout、endl</strong></p></div><div class="note danger no-icon flat"><p>学过 <strong>Python</strong> 的同学，在 <strong>Python</strong> 学习的过程中也需要<strong>调用库</strong>，<strong>C++ 中头文件</strong>的作用是和 <strong>Python 中库</strong>的作用是类似的。</p></div><h3 id="常用头文件"><a href="#常用头文件" class="headerlink" title="常用头文件"></a>常用头文件</h3><div class="note success no-icon flat"><p>在 C++ 中，<strong>常用的头文件</strong>有如下一些：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span><span class="comment">// 内置输入输出流函数：cin、cout、endl等等</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span><span class="comment">// 内置格式化输入输出函数：scanf，printf等等</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math&gt;</span><span class="comment">// 内置一些常用的数学符号：根号 sqrt、幂 pow、绝对值 abs 等等</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span><span class="comment">// 内置一些简单算法：排序 sort、取最大值 max、最小值 min 等等</span></span></span><br></pre></td></tr></table></figure></div><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><div class="note success no-icon flat"><p><strong>命名空间</strong>是 C++ 中一个相对新的概念。其主要作用是为了<strong>避免命名冲突</strong>。</p><p>在 C++ 运行的过程中，为了<strong>避免变量的命名与关键词冲突</strong>，会调用命名空间来<strong>限制冲突</strong>，可以更好的编写和维护代码。</p></div><h3 id="程序内片段-1"><a href="#程序内片段-1" class="headerlink" title="程序内片段"></a>程序内片段</h3><div class="note success no-icon flat"><p>在上述代码片段中，第二行代码就是调用头文件的过程，格式为：<b>using namespace 命名空间名;</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br></pre></td></tr></table></figure><p>std 命名空间中包含基本的 <strong>cin cout endl</strong> 等等函数名。</p></div><div class="note danger no-icon flat"><p>可以尝试运行<strong>缺少调用命名空间</strong>的程序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span><span class="comment">// 头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;<span class="comment">// 函数入口【主函数】</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">// 返回值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行之后会发现 <strong>cout</strong> 和 <strong>endl</strong> 函数<strong>未被定义</strong>，同时<strong>提示调用命名空间</strong>。</p></div><h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><div class="note success no-icon flat"><p>调用命名空间有<strong>两种常用的方法</strong>。</p><p>第一种就是像上述代码片段中，直接在头文件之后使用 <strong>using namespace XXX;</strong> 进行调用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;<span class="comment">// 使用 std 命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种方法就是在使用函数时，在<strong>函数前加上该命名空间名</strong>，并且用 <strong>::</strong> 链接。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; std::endl;<span class="comment">// 直接程序内调用</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="主函数【程序入口】"><a href="#主函数【程序入口】" class="headerlink" title="主函数【程序入口】"></a>主函数【程序入口】</h2><div class="note success no-icon flat"><p><strong>主函数</strong>是 C++ 中必须要有的部分，必须以 <strong>main()</strong> 进行命名。</p><p>主函数是<strong>所有程序内容的入口</strong>，一段 C++ 程序就是从 <strong>main 函数</strong> 开始运行的。</p></div><div class="note danger no-icon flat"><p>主函数必须定义为 <strong>int 类型</strong>，同时在程序结束是<strong>返回值为 0【return 0;】</strong>。</p><p>对于<strong>函数类型</strong>的知识点，在之后的<strong>函数篇章</strong>内具体讲解。</p></div><h3 id="程序内片段-2"><a href="#程序内片段-2" class="headerlink" title="程序内片段"></a>程序内片段</h3><div class="note success no-icon flat"><p>在上述代码中，<strong>主函数</strong>片段如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ……;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="note danger no-icon flat"><p>任何函数都是通过<b>大括号 { }</b>来规定函数范围的。</p><p>学习过 Python 的同学，在 <strong>Python</strong> 中函数内容是通过<strong>缩进</strong>来规定函数范围的，在 <strong>C++</strong> 中所有的函数都是通过<strong>大括号</strong>来规定的。</p></div><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><div class="note success no-icon flat"><p>在 C++ 的函数运行过程中，<strong>返回值</strong>是标记程序<strong>是否正常结束</strong>的标志。</p><p>当<strong>返回值为 0</strong> 时，表示程序<strong>正常结束</strong>。</p><p>否则，当其<strong>为非 0 值</strong>时，表示程序<strong>出现错误</strong>。</p></div><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h3><div class="note success no-icon flat"><p>在 C++ 程序编写的过程中，要区分<strong>各种括号</strong>的区别。</p><blockquote><p><strong>&lt; &gt;</strong> 一般用于<strong>头文件的调用</strong>等等。</p><p><strong>{ }</strong> 一般用于判断、循环、函数的<strong>范围限制</strong>等等。</p><p><strong>[ ]</strong> 一般用于<strong>数组的定义</strong>等等。</p><p><strong>( )</strong> 一般用于<strong>运算</strong>、函数<strong>参数的传递</strong>等等。</p></blockquote></div><h3 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h3><div class="note success no-icon flat"><p>在 C++ 程序编写的过程中，要注意 <b> ; </b>的使用。</p><p>具体的使用规则在后续<strong>每个模块</strong>学习的过程中会详解。</p></div><h3 id="英文输入"><a href="#英文输入" class="headerlink" title="英文输入"></a>英文输入</h3><div class="note success no-icon flat"><p>在 C++ 程序编写的过程中，<strong>除注释外</strong>，所有的内容都要用<strong>英文输入</strong>，包括所有的符号。</p></div><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><div class="note success no-icon flat"><p>在 C++ 中，注释有两种写法。</p><ul><li>单行注释：使用 <code>//</code> 表明注释范围，<code>//</code> 后的内容为注释内容，不参与编译。</li><li>多行注释：使用<code>/* ... */</code>表明注释范围。</li></ul></div><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><div class="note success no-icon flat"><p>不管使用编程语言进行编程时，都需要用到<strong>各种变量</strong>来<strong>存储各种信息</strong>。变量保留的是它<strong>所存储的值的内存位置</strong>。</p><p>这意味着，当您<strong>创建一个变量</strong>时，就会在内存中<strong>保留一些空间</strong>。</p></div><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><div class="note success no-icon flat"><p>在 C++ 中，<strong>常用的数据类型</strong>有如下几种：</p></div><table><thead><tr><th align="left">类型</th><th align="left">关键字</th><th>示例</th></tr></thead><tbody><tr><td align="left">布尔型</td><td align="left">bool</td><td>true, false</td></tr><tr><td align="left">字符型</td><td align="left">char</td><td>‘a’, ‘A’, ‘ ‘, ‘\n’</td></tr><tr><td align="left">整型</td><td align="left">int</td><td>1, 3, 1231231,123</td></tr><tr><td align="left">浮点型</td><td align="left">float</td><td>1.2, 231.45, 1.235e2</td></tr><tr><td align="left">双浮点型</td><td align="left">double</td><td>1.2, 231.45, 1.235e2</td></tr><tr><td align="left">无类型</td><td align="left">void</td><td>-</td></tr></tbody></table><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><div class="note success no-icon flat"><p>在 C++ 中，<strong>不同的数据类型</strong>所能表示的<strong>数据范围也是不同</strong>的，这具体取决于不同的数据类型<strong>在内存中所占的位数</strong>。</p></div><div class="note danger no-icon flat"><p>在这里注意内存中单位的转化。</p><p><strong>1 位 &#x3D; 1 字节 &#x3D; 8 比特</strong></p><p><strong>【1 Byte &#x3D; 8 bit】</strong></p></div><table><thead><tr><th align="left">类型</th><th align="left">位</th><th align="left">范围</th></tr></thead><tbody><tr><td align="left">char</td><td align="left">1 个字节</td><td align="left">-128 到 127 或者 0 到 255</td></tr><tr><td align="left">int</td><td align="left">4 个字节</td><td align="left">-2147483648 到 2147483647 【-2^31 ~ 2^31 - 1】</td></tr><tr><td align="left">float</td><td align="left">4 个字节</td><td align="left">精度型占4个字节（32位）内存空间，+&#x2F;- 3.4e +&#x2F;- 38 (~7 个数字)</td></tr><tr><td align="left">double</td><td align="left">8 个字节</td><td align="left">双精度型占8 个字节（64位）内存空间，+&#x2F;- 1.7e +&#x2F;- 308 (~15 个数字)</td></tr></tbody></table><div class="note danger flat"><p>那这个范围是如何计算的呢？为什么负数范围比正数多一个呢？</p></div><div class="note success no-icon flat"><p>在计算机内部，数据都是以<strong>补码</strong>的形式存储到<strong>内存</strong>中的，每一种类型可以表示的<strong>范围都是不同的</strong>。</p></div><h4 id="原码，反码，补码"><a href="#原码，反码，补码" class="headerlink" title="原码，反码，补码"></a>原码，反码，补码</h4><div class="note success no-icon flat"><p>在计算机中，数据都是以<strong>二进制</strong>形式存储的，也就是都是以 <strong>01 序列</strong> 字符串存储的。</p><p>在此基础上，对于数据有三种不同的存储方式，也就是<strong>原码、反码和补码</strong>。</p><p>在编码过程中，用<strong>首位作为符号位</strong>，首位为 <strong>0 表示正数</strong>、首位为 <strong>1 表示负数</strong>。</p></div><div class="note success no-icon flat"><p>对于<strong>正数</strong>来说，原码、反码和补码的表示形式都是<strong>相同的</strong>。</p><p>对于<strong>负数</strong>来说：</p><p>反码是在原码的基础上，<strong>符号位不变，其他所有位取反</strong>得到的</p><p>补码是<strong>符号位不变，反码+1</strong> 得到的。</p></div><table><thead><tr><th align="center">十进制</th><th align="center">原码</th><th align="center">反码</th><th align="center">补码</th></tr></thead><tbody><tr><td align="center">90</td><td align="center">01011010</td><td align="center">01011010</td><td align="center">01011010</td></tr><tr><td align="center">-90</td><td align="center">11011010</td><td align="center">10100101</td><td align="center">10100110</td></tr></tbody></table><div class="note success no-icon flat"><p>因此，对于负数来说，可以<strong>全部都为 1</strong> 表示最大的负数</p><p>但是，对于正数来说，因为<strong>第一位为符号位</strong>，只能为 <strong>0</strong>，最大值仅为 <strong>01111111……</strong>，所以正数范围的最大值要 <strong>-1</strong></p></div><h2 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h2><div class="note success no-icon flat"><p>在 C++ 中，定义变量时要有固定的格式：<strong>变量数据 类型 变量名 赋值;</strong></p><p>多个同类型变量定义时用 <strong>,</strong> 隔开。</p><p><strong>浮点数</strong>的赋值可以用<strong>科学计数法</strong>。</p></div><div class="note danger no-icon flat"><p>赋值可以省略。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义类型为整数型，变量名为 a 的变量，不赋值</span></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="comment">// 定义三个整数型变量，用逗号隔开，同时给 c 变量赋值，d 变量赋值为 c 变量的值</span></span><br><span class="line"><span class="type">int</span> b, c = <span class="number">10</span>, d = c;</span><br><span class="line"><span class="comment">// 定义三个双精度浮点数的变量</span></span><br><span class="line"><span class="type">double</span> e, f = <span class="number">1.2345</span>, g = <span class="number">1.23e4</span>;</span><br><span class="line"><span class="comment">// 定义一个字符型变量</span></span><br><span class="line"><span class="type">char</span> h;</span><br><span class="line"><span class="comment">// 定义一个布尔型变量</span></span><br><span class="line"><span class="type">bool</span> i;</span><br></pre></td></tr></table></figure><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><div class="note success no-icon flat"><p>变量处于<strong>不同的位置</strong>有着<strong>不同的效果</strong>，可以作用的<strong>范围也不同</strong>。该范围一般称为<strong>作用域</strong>。</p><p>在 C++ 中，变量常用的作用域有<strong>局部变量，全局变量，形式变量【形式参数】</strong></p></div><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><div class="note success no-icon flat"><p>在函数或一个代码块内部声明的变量，称为<strong>局部变量</strong>。</p><p>通俗来讲，在一个 <strong>{ } 内部定义的变量</strong>就被称为局部变量，其作用域也<strong>仅限于该 { } 内部</strong>。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// x 作用域为整个 main 函数内部</span></span><br><span class="line">    <span class="type">int</span> x = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &gt;= <span class="number">10</span>)&#123;</span><br><span class="line">        <span class="comment">// y 作用域为 if 函数内部</span></span><br><span class="line">        <span class="type">int</span> y = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;</span><br><span class="line">        <span class="comment">// z 作用域为 for 函数内部</span></span><br><span class="line">        <span class="type">int</span> z = <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; z &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note danger no-icon flat"><p>运行上述代码，x 可以正常输出，y 和 z 会报错。</p></div><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><div class="note success no-icon flat"><p>在所有函数外部声明的变量，称为<strong>全局变量</strong>。</p><p>一般来说，全局变量直接<strong>定义到头文件和命名空间下方</strong>。</p><p>全局变量在<strong>任何一个函数</strong>中都可以使用。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 全局变量声明</span></span><br><span class="line"><span class="type">int</span> g;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 局部变量声明</span></span><br><span class="line">  <span class="type">int</span> a, b;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 实际初始化</span></span><br><span class="line">  a = <span class="number">10</span>;</span><br><span class="line">  b = <span class="number">20</span>;</span><br><span class="line">  g = a + b;</span><br><span class="line"> </span><br><span class="line">  cout &lt;&lt; g &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note danger no-icon flat"><p>在程序中，局部变量和全局变量的<strong>名称可以相同</strong>，但是在函数内，<strong>局部变量的值会覆盖全局变量的值</strong>。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 全局变量声明</span></span><br><span class="line"><span class="type">int</span> g = <span class="number">20</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 局部变量声明</span></span><br><span class="line">  <span class="type">int</span> g = <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line">  cout &lt;&lt; g &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="形式变量【形式参数】"><a href="#形式变量【形式参数】" class="headerlink" title="形式变量【形式参数】"></a>形式变量【形式参数】</h3><div class="note success no-icon flat"><p>在函数参数的定义中声明的变量，称为<strong>形式参数</strong>。</p><p>具体的使用方法在后续的<strong>函数</strong>课程内容中会讲解。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// x 和 y 为 add 函数的形式参数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">10</span>, m = <span class="number">15</span>;</span><br><span class="line">    <span class="type">int</span> ans = <span class="built_in">add</span>(n, m);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="输入-输出"><a href="#输入-输出" class="headerlink" title="输入&#x2F;输出"></a>输入&#x2F;输出</h1><div class="note success no-icon flat"><p>C++ 常用的输入输出方式有两种</p><ul><li>第一种是基于<b> iostream 头文件</b>下的<strong>输入输出流</strong>函数</li><li>第二种是基于<b> cstdio 头文件</b>下的<strong>标准输入输出</strong>函数</li></ul></div><h2 id="输入输出流"><a href="#输入输出流" class="headerlink" title="输入输出流"></a>输入输出流</h2><div class="note success no-icon flat"><p>使用输入输出流函数来实现程序的输入输出时，<strong>无需考虑变量类型</strong>，输入输出都是同样的格式。</p><ul><li>输入：cin &gt;&gt; 变量名1 &gt;&gt; 变量名2;</li><li>输出：cout &lt;&lt; 变量名1 &lt;&lt; 变量名2;</li></ul></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用 iostream 头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">double</span> b;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输入函数 cin</span></span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输出函数 cout，换行函数 endl</span></span><br><span class="line">    cout &lt;&lt; a &lt;&lt; b &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="标准输入输出"><a href="#标准输入输出" class="headerlink" title="标准输入输出"></a>标准输入输出</h2><div class="note success no-icon flat"><p>使用标准输入输出来实现程序的输入输出时，<strong>需考虑变量类型</strong>，不同的类型对应的格式不同。</p><p>在输入输出的过程中都需要<strong>声明变量类型</strong>。</p></div><div class="note success no-icon flat"><p>在输入的过程中，要注意<strong>标明地址符【&amp;】</strong></p><p>因为在输入的过程中是需要在计算机的内存中<strong>申请一块地址</strong>后将变量存储到该地址的，所以要声明地址符。</p><p><strong>输入格式：scanf(“标准格式”, &amp;变量名);</strong></p></div><div class="note success no-icon flat"><p>在输出的过程中，<strong>无需声明地址符</strong></p><p>因为在输出的过程中说明<strong>该变量已经存储到内存</strong>中，<strong>直接读取该变量值</strong>即可。</p><p><strong>输出格式：printf(“标准格式”, 变量名);</strong></p></div><table><thead><tr><th>变量类型</th><th>声明</th><th>标准格式</th></tr></thead><tbody><tr><td>整数型</td><td>int</td><td>%d</td></tr><tr><td>单精度浮点数</td><td>float</td><td>%f</td></tr><tr><td>双精度浮点数</td><td>double</td><td>%lf</td></tr><tr><td>字符型</td><td>char</td><td>%c</td></tr><tr><td>长整数型</td><td>long long</td><td>%lld</td></tr></tbody></table><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 变量声明</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">float</span> b;</span><br><span class="line">    <span class="type">double</span> c;</span><br><span class="line">    <span class="type">char</span> d;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> e;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 标准输入</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;b);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;c);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;d);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;e);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 标准输出, \n 表示换行</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>, c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, d);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, e);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><div class="note success no-icon flat"><p>在 C++ 中，上述两种方式都可以控制输入输出，那么区别是什么呢。</p></div><h3 id="保留小数位"><a href="#保留小数位" class="headerlink" title="保留小数位"></a>保留小数位</h3><div class="note success no-icon flat"><p>使用输入输出流函数时，想要保留小数位需要调用函数进行保留。</p><p>需要使用 <code>iomanip</code> 库中的 <code>setprecision</code> 函数和 <code>fixed</code> 函数。 <code>setprecision</code> 用于设置数字的精度，而 <code>fixed</code> 用于保证数字以固定点的方式输出。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> num = <span class="number">3.14159</span>;</span><br><span class="line">    cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">2</span>) &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note success no-icon flat"><p>使用标准输入输出函数时，想要保留小数位只需<strong>在输出函数中表明要保留的位数</strong>即可。</p><p><strong>格式：printf(“%.2lf”, c);</strong></p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> num = <span class="number">3.14159</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>, num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><div class="note success no-icon flat"><p>使用输入输出流函数时，想要格式化输出需要调用函数。</p><p>可以使用<code>iomanip</code>库中的函数来实现格式化输出。以下是一些常用的格式化操作：</p><ul><li><code>setprecision(n)</code>: 设置浮点数的精度为<code>n</code>位。</li><li><code>fixed</code>: 使用定点表示法来表示浮点数。</li><li><code>scientific</code>: 使用科学表示法来表示浮点数。</li><li><code>setw(n)</code>: 设置下一个输出值的宽度为<code>n</code>个字符。</li><li><code>left</code>: 输出左对齐。</li><li><code>right</code>: 输出右对齐。</li><li><code>setfill(c)</code>: 在未填充的部分使用字符<code>c</code>来填充。</li></ul></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> width = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; right &lt;&lt; <span class="built_in">setw</span>(width) &lt;&lt; <span class="string">&quot;Hello&quot;</span> &lt;&lt; endl; <span class="comment">// 输出宽度为10的右对齐字符串</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">char</span> fill_char = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">setfill</span>(fill_char) &lt;&lt; <span class="built_in">setw</span>(width) &lt;&lt; <span class="string">&quot;World&quot;</span> &lt;&lt; endl; <span class="comment">// 使用&#x27;*&#x27;来填充宽度不足的部分</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note success no-icon flat"><p>使用标准输入输出函数时，想要保留小数位只需<strong>在输出函数中表明要使用的格式</strong>即可。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">12</span>, b = <span class="number">123</span>, c = <span class="number">1234</span>; </span><br><span class="line">    <span class="type">double</span> d = <span class="number">1.2345</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 宽度为 5 右对齐输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%5d\n&quot;</span>, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%5d\n&quot;</span>, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%5d\n&quot;</span>, c);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 宽度为 5 ,不足位补 0 输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%05d\n&quot;</span>, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%05d\n&quot;</span>, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%05d\n&quot;</span>, c);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 宽度为 5 左对齐输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%-5d\n&quot;</span>, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%-5d\n&quot;</span>, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%-5d\n&quot;</span>, c);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 宽度为 5，保留两位输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%5.2lf\n&quot;</span>, d);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h1><div class="note success no-icon flat"><p>运算符是一种告诉编译器执行特定的<strong>数学或逻辑操作</strong>的符号。</p><p>基本的运算符包括简单的<strong>加【+】减【-】乘【*】除【&#x2F;】</strong></p><p>在 C++ 语言中，额外的运算还包括<strong>取余数【%】</strong>，<strong>自增1【++】</strong>，<strong>自减1【- -】</strong></p><p>除此之外，C++ 中还有一些特殊的基本运算符，例如 <strong>sizeof</strong> 用来求变量所占字节数。 </p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">21</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line"></span><br><span class="line">    c = a + b;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Line 1 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ;</span><br><span class="line">    c = a - b;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Line 2 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ;</span><br><span class="line">    c = a * b;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Line 3 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ;</span><br><span class="line">    c = a / b;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Line 4 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ;</span><br><span class="line">    c = a % b;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Line 5 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> d = <span class="number">10</span>;   <span class="comment">//  测试自增、自减</span></span><br><span class="line">    c = d++;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Line 6 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ;</span><br><span class="line"></span><br><span class="line">    d = <span class="number">10</span>;    <span class="comment">// 重新赋值</span></span><br><span class="line">    c = d--;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Line 7 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> e = <span class="number">10</span>;</span><br><span class="line">    <span class="type">char</span> f = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="type">int</span> g[<span class="number">100</span>];</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;e 所占字节长度为：&quot;</span> &lt;&lt; <span class="keyword">sizeof</span> e &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f 所占字节长度为：&quot;</span> &lt;&lt; <span class="keyword">sizeof</span> f &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;g 所占字节长度为：&quot;</span> &lt;&lt; <span class="keyword">sizeof</span> g &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ 基础语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始的 C++ 学习之旅</title>
      <link href="/CPP_lesson/"/>
      <url>/CPP_lesson/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note warning flat"><p>本文将介绍 C++ 的<strong>相关历史背景</strong>、<strong>编译环境</strong>、<strong>IDE</strong>以及介绍 C++ 的<strong>学习路线</strong>。</p><p>主要介绍有关于<strong>信息学奥赛</strong>所需要的知识点，面向对象所需的类与对象知识不在本文讨论。</p></div><div class="note warning flat"><p>在阅读过程中有任何问题都可以发布到评论区，有价值的问题将会放到文章末尾Q&amp;A之中！</p></div><h1 id="Hello-World！"><a href="#Hello-World！" class="headerlink" title="Hello, World！"></a>Hello, World！</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello, world!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-的发展经历"><a href="#C-的发展经历" class="headerlink" title="C++ 的发展经历"></a>C++ 的发展经历</h1><div class="note success no-icon flat"><p><strong>C++<strong>（</strong>C Plus Plus</strong>）是一种高级语言，它是由 <strong>Bjarne Stroustrup</strong> 于 <strong>1979</strong> 年在贝尔实验室开始设计开发的。C++ 进一步扩充和完善了 C 语言，是一种<strong>面向对象</strong>的程序设计语言。</p></div><div class="note info flat"><p>同时，在<strong>信息学奥林匹克竞赛</strong>【以下简称<strong>信奥赛</strong>】中，C++ 是<strong>唯一可以使用</strong>的语言。</p></div><h1 id="C-的标准库"><a href="#C-的标准库" class="headerlink" title="C++ 的标准库"></a>C++ 的标准库</h1><div class="note success no-icon flat"><p>标准的 C++ 由<strong>三个重要部分</strong>组成：</p><ul><li>核心语言，提供了所有构件块，包括<strong>变量、数据类型和常量</strong>，等等。</li><li>C++ 标准库，提供了大量的<strong>函数</strong>，用于操作文件、字符串等。</li><li>标准模板库<strong>（STL）</strong>，提供了大量的方法，用于操作数据结构等。</li></ul></div><h1 id="IDE-集成开发环境"><a href="#IDE-集成开发环境" class="headerlink" title="IDE(集成开发环境)"></a>IDE(集成开发环境)</h1><h2 id="CodeBlocks"><a href="#CodeBlocks" class="headerlink" title="CodeBlocks"></a>CodeBlocks</h2><div class="note success no-icon flat"><p><strong>Code::Blocks</strong>是一个免费开源的C&#x2F;C++IDE,最早的版本发布于2005年，一个开源的跨平台集成开发环境（IDE），主要用于 <strong>C、C++ 和 Fortran</strong> 等编程语言的开发。也可以说是专门为C&#x2F;C++搭建的IDE,它拥有其他IDE的基本功能，更多功能通过下载插件来获得，与其他IDE相比相对简单，对于新手也比较友好。</p></div><h3 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h3><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://sourceforge.net/projects/codeblocks/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Code::Blocks</div>            <div class="tag-link-sitename">C/C++ IDE</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><div class="note success no-icon flat"><p>打开软件之后就是如下页面。</p></div><p><img src="https://bu.dusays.com/2025/10/02/68de3708a603d.png" alt="1759393514638.png"></p><div class="note success no-icon flat"><p>点击左上角<strong>新建文件图标</strong>选择 <strong>Empty File</strong> 新建一个空白文件。</p></div><p><img src="https://bu.dusays.com/2025/10/02/68de370898fed.png" alt="1759393517762.png"></p><div class="note success no-icon flat"><p>新建空白文件之后点击<code>Ctrl + s </code>保存文件。</p></div><p><img src="https://bu.dusays.com/2025/10/02/68de37077e0e3.png" alt="1759393525609.png"></p><div class="note success no-icon flat"><p>保存文件时要注意<strong>后缀名改为cpp</strong>，即文件保存为 <code>xxx.cpp</code>。</p></div><p><img src="https://bu.dusays.com/2025/10/02/68de3707c06a0.png" alt="1759393521777.png"></p><div class="note danger no-icon flat"><p>注意保存路径及文件名<strong>均不可使用中文</strong>。</p></div><div class="note success no-icon flat"><p>保存完成之后即可在该页面进行代码的编写。</p></div><h2 id="DEV-C"><a href="#DEV-C" class="headerlink" title="DEV C++"></a>DEV C++</h2><div class="note success no-icon flat"><p>这是一款免费的，功能齐全的集成IDE,<strong>主要适用于刷题，推荐初学者使用。</strong>占用内存小，轻量级IDE,在C语言初阶<strong>学习和刷题</strong>时是很好用的工具，但不适用于后期的调试和项目开发(没有其他IDE那么明显直观)，前期学习C语言&#x2F;C++必备神器!</p></div><h3 id="下载链接-1"><a href="#下载链接-1" class="headerlink" title="下载链接"></a>下载链接</h3><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://bloodshed-dev-c.en.softonic.com/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">DEVC++</div>            <div class="tag-link-sitename">C/C++ IDE</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="Visual-Studio-Code-VS-Code"><a href="#Visual-Studio-Code-VS-Code" class="headerlink" title="Visual Studio Code(VS Code)"></a>Visual Studio Code(VS Code)</h2><div class="note success no-icon flat"><p><strong>Visual Studio Code(VS Code)<strong>是由Microsoft创建的开源，跨平台源代码编辑器。由微软开发，针对 Web 开发人员和前端工程师而设计。这是一款功能强大，</strong>可编译多语言</strong>的IDE,不仅仅是C&#x2F;C++,Python,Java等编程语言都可以进行编译运行，并且目前不仅支持Windows,还支持于Mac和Linux。VS Code自身足够轻巧强大，并且有一个看满足绝大部分功能的<strong>完全免费版本</strong>，以及有附加功能和支持的企业版本。此外，VS Code中可下载<strong>大量实用插件</strong>，它可能是市面上最好的免费IDE。</p></div><h3 id="下载链接-2"><a href="#下载链接-2" class="headerlink" title="下载链接"></a>下载链接</h3><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://code.visualstudio.com/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Visual Studio Code</div>            <div class="tag-link-sitename">C/C++ IDE</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h1 id="C-学习路线"><a href="#C-学习路线" class="headerlink" title="C++ 学习路线"></a>C++ 学习路线</h1><h2 id="C-基础语法"><a href="#C-基础语法" class="headerlink" title="C++ 基础语法"></a>C++ 基础语法</h2><div class="note success no-icon flat"><p>C++ 的基础语法知识主要包括<strong>数据类型、顺序结构、判断结构、循环结构、数组与字符串、函数、指针</strong>等等。</p></div><h3 id="基本数据类型与数据结构"><a href="#基本数据类型与数据结构" class="headerlink" title="基本数据类型与数据结构"></a>基本数据类型与数据结构</h3><div class="note info no-icon flat"><p>C++ 的<strong>数据类型与数据结构</strong>主要包括<strong>变量、输入输出、运算</strong>等基本结构。</p></div><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.1024code.top/CPP_data/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">数据类型与数据结构</div>            <div class="tag-link-sitename">C++</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h3 id="判断结构"><a href="#判断结构" class="headerlink" title="判断结构"></a>判断结构</h3><div class="note info no-icon flat"><p>C++ 的<strong>判断结构</strong>主要包括 <strong>if 判断</strong> 的基本使用方法。</p></div><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.1024code.top/CPP_judgment/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">判断结构</div>            <div class="tag-link-sitename">C++</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><div class="note info no-icon flat"><p>C++ 的<strong>循环结构</strong>相关的知识点主要包括<strong>while 循环、 do-while 循环</strong>与<strong>for 循环</strong>的基本使用方法。</p></div> <div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.1024code.top/CPP_Loop/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">循环结构</div>            <div class="tag-link-sitename">C++</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><div class="note info no-icon flat"><p>C++ 的<strong>数组</strong>相关的知识点主要包括<strong>一维数组、多维数组</strong>与<strong>数组的基本函数</strong>等知识点。</p></div> <div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.1024code.top/CPP_array/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">数组</div>            <div class="tag-link-sitename">C++</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><div class="note info no-icon flat"><p>C++ 的<strong>字符串</strong>相关的知识点主要包括<strong>数组类型的字符串</strong>与**<code>string</code>字符串**等知识点。</p></div> <div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.1024code.top/CPP_String/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">字符串</div>            <div class="tag-link-sitename">C++</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><div class="note info no-icon flat"><p>C++ 的<strong>函数</strong>相关的知识点主要包括<strong>无参函数、有参函数</strong>与<strong>函数的递归与调用</strong>等知识点。</p></div><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.1024code.top/CPP_function/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">函数</div>            <div class="tag-link-sitename">C++</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="C-算法与数据结构"><a href="#C-算法与数据结构" class="headerlink" title="C++ 算法与数据结构"></a>C++ 算法与数据结构</h2><div class="note warning flat"><p>C++ 的<strong>算法与数据结构</strong>是信奥赛<strong>最重要的部分！</strong></p></div><div class="note success no-icon flat"><p>C++ 的<strong>算法</strong>主要包括<strong>排序、贪心、二分、搜索与图论、数论、动态规划与一系列基础算法</strong>。</p></div><h3 id="基础数据结构"><a href="#基础数据结构" class="headerlink" title="基础数据结构"></a>基础数据结构</h3><div class="note success no-icon flat"><p>C++ 的<strong>数据结构</strong>主要包括<strong>链表、栈、队列、KMP、堆、Trie树、并查集，HASH表与STL的基础用法</strong>等等。</p></div><div class="note info flat"><p>C++ 的 <strong>STL</strong> 主要包括是C++内置的<strong>标准模板库</strong>、集成了大部分的<strong>数据结构的基础操作</strong>。</p></div><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.1024code.top/CPP_data_str/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">基础数据结构</div>            <div class="tag-link-sitename">C++</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h3 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h3><div class="note info no-icon flat"><p>C++ 的<strong>基础算法</strong>主要包括的<strong>排序、二分、贪心、高精度、前缀与差分</strong>等等基础算法。</p></div><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.1024code.top/CPP_Ele_algorithm/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">基础算法</div>            <div class="tag-link-sitename">C++</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h3 id="搜索与图论"><a href="#搜索与图论" class="headerlink" title="搜索与图论"></a>搜索与图论</h3><div class="note info no-icon flat"><p>C++ 的<strong>搜索与图论算法</strong>主要包括的<strong>DFS、BFS、最短路与最小生成树</strong>算法。</p></div><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.1024code.top/CPP_Graph_Theory/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">搜索与图论</div>            <div class="tag-link-sitename">C++</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h3 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h3><div class="note info no-icon flat"><p>C++ 的<strong>数论算法</strong>主要包括的<strong>质数、约数、容斥原理与博弈论</strong>等等基础数学算法。</p></div><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.1024code.top/CPP_Math_Theory/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">数论</div>            <div class="tag-link-sitename">C++</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h3 id="动态规划【DP】"><a href="#动态规划【DP】" class="headerlink" title="动态规划【DP】"></a>动态规划【DP】</h3><div class="note info no-icon flat"><p>C++ 的<strong>动态规划算法</strong>主要包括的<strong>背包问题、线性DP、区间DP、树形DP与记忆化搜索</strong>等等基础DP算法。</p></div><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.1024code.top/CPP_DP/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">动态规划</div>            <div class="tag-link-sitename">C++</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ 基础语法 </tag>
            
            <tag> C++ 算法与数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高精度运算</title>
      <link href="/High_Accuracy/"/>
      <url>/High_Accuracy/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note warning flat"><p>本文记录各种<strong>高精度运算</strong>的相关实现思路以及 C++ 代码描述。</p></div><div class="note warning flat"><p>在阅读过程中有任何问题都可以发布到评论区，有价值的问题将会放到文章末尾Q&amp;A之中！</p></div><h1 id="高精度运算"><a href="#高精度运算" class="headerlink" title="高精度运算"></a>高精度运算</h1><div class="note success no-icon flat"><p><strong>高精度算法</strong>（<strong>High Accuracy Algorithm</strong>）是处理 <strong>大数字【数字长度大于10^6】</strong> 的数学计算方法。在一般的科学计算中，会经常算到小数点后几百位或者更多，当然也可能是几千亿几百亿的大数字。一般这类数字统称为<strong>高精度数</strong>，高精度算法是用计算机对于超大数据的一种模拟<strong>加，减，乘，除，乘方</strong>等运算。对于非常庞大无法在计算机中正常存储的数字，将这个数字拆开，拆成一位一位或者是四位四位的<strong>存储到一个数组</strong>中， 用一个数组去表示一个数字，这样这个数字就被称为是高精度数。</p><p>高精度运算的基本思想就是通过将数字<strong>逐位拆分到数组之中</strong>后，模拟人工计算时<strong>列竖式</strong>的过程来完成对高精度数字的运算。</p></div><h1 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h1><h2 id="实现思路详解"><a href="#实现思路详解" class="headerlink" title="实现思路详解"></a>实现思路详解</h2><h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><div class="note success no-icon flat"><p>在加法计算的过程中，将加数的每一位都放到一个数组之中，注意在存储的过程中要<strong>逆序存储</strong></p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先将两个加数都用字符串来表示，因为精度过大，所以使用常规的整型无法存储</span></span><br><span class="line"><span class="comment">// 字符串每个字符占用一个字节，可以存储高精度大数</span></span><br><span class="line"><span class="comment">// 定义A，B两个数组来记录两个加数的每一位</span></span><br><span class="line">string a, b;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; A, B;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 将两个加数逆向存储到数组之中，用数组来模拟加法的过程</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = b.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) B.<span class="built_in">push_back</span>(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br></pre></td></tr></table></figure><div class="note info flat"><p>逆序存储是为了保证<strong>低位对齐</strong>，如果<strong>正序存储可以会导致对应位错位</strong></p></div><div class="note danger no-icon flat"><p>例如：123 + 89</p><p>逆序存储：A数组：[3, 2, 1]、B数组：[9, 8]，在相加的过程中个位 3 和 9 对应，十位 2 和 8 对应</p><p>正序存储：A数组：[1, 2, 3]、B数组：[8, 9]，在相加的过程中百位 1 和十位 8 对应，十位 2 和 个位 9 对应，导致计算结果错位</p></div><div class="note primary flat"><p>img【123 + 89 逆序存储和正序存储示例图片】</p></div><h3 id="模拟计算过程"><a href="#模拟计算过程" class="headerlink" title="模拟计算过程"></a>模拟计算过程</h3><div class="note success no-icon flat"><p>高精度加法计算的过程就是两个数组的<strong>对应位置</strong>的数进行相加</p><p>在计算的过程中要注意<strong>进位</strong>，如果两个数相加结果大于等于 10，则需要进位</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// t 变量复用，同时记录进位情况和每一次对应位相加所计算得到的结果</span></span><br><span class="line"><span class="comment">// 最开始没有进位，初始化为 0 </span></span><br><span class="line"><span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 模拟加法列竖式计算过程</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || i &lt; B.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; A.<span class="built_in">size</span>()) t += A[i];</span><br><span class="line">    <span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) t += B[i];</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// C 数组存取的为计算结果模10的余数，如：5 + 7 = 12，则 C 数组存取的为 2 【12 % 10 = 2】 </span></span><br><span class="line">    C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">    <span class="comment">// t 变量记录进位，如果计算结果大于等于 10，则 t /= 10 为 1，否则为 0</span></span><br><span class="line">    t /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note danger flat"><p>在记录计算结果时，存储的是对应位相加<strong>模10</strong>所得的<strong>余数</strong>，如：5 + 7 &#x3D; 12，则结果数组该位存储的<strong>余数</strong>为 2 </p><p>进位使用计算结果<strong>除以10取整</strong>求得，如果计算结果大于等于 10，则 <strong>结果 &#x2F; 10</strong> 为 1，否则为 0</p></div><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><div class="note success no-icon flat"><p>注意最终输出时因为在<strong>存储的过程中为逆序存储</strong>，所以在<strong>输出的时候也要逆序输出</strong></p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为存储时为逆向存储，所以输出的过程也需要逆向输出才可以还原本来的顺序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) </span><br><span class="line">    cout &lt;&lt; C[i];</span><br><span class="line">cout &lt;&lt; endl;</span><br></pre></td></tr></table></figure><div class="note primary flat"><p>img【存储结果逆序样例】</p></div><h2 id="C-代码实现"><a href="#C-代码实现" class="headerlink" title="C++代码实现"></a>C++代码实现</h2><h3 id="详细注释版"><a href="#详细注释版" class="headerlink" title="详细注释版"></a>详细注释版</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在传递参数的过程中直接引用A、B两个数组的地址，就不需要额外再开辟新的空间，节省空间复杂度</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">add</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 定义 C 数组来存取两个数组每一位相加所得到的和</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// t 变量复用，同时记录进位情况和每一次对应位相加所计算得到的结果</span></span><br><span class="line">    <span class="comment">// 最开始没有进位，初始化为 0 </span></span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 模拟加法列竖式计算过程</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || i &lt; B.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; A.<span class="built_in">size</span>()) t += A[i];</span><br><span class="line">        <span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) t += B[i];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// C 数组存取的为计算结果的余数，如：5 + 7 = 12，则 C 数组存取的为 2 【12 % 10 = 2】 </span></span><br><span class="line">        C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        <span class="comment">// t 变量记录进位，如果计算结果大于等于 10，则 t /= 10 为 1，否则为 0</span></span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果上述所有为相加之后还有进位，则直接在 C 数组中再记录一个高位 1</span></span><br><span class="line">    <span class="comment">// 例如： 99 + 1 = 100，上述模拟结束之后 t 为 1，则在 C 数组中再记录高位 1 表示最终的进位</span></span><br><span class="line">    <span class="keyword">if</span> (t) C.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 首先将两个加数都用字符串来表示，因为精度过大，所以使用常规的整形无法存储</span></span><br><span class="line">    <span class="comment">// 字符串每个字符占用一个字节，可以存储高精度大数</span></span><br><span class="line">    <span class="comment">// 定义A，B两个数组来记录两个加数的每一位</span></span><br><span class="line">    string a, b;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A, B;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将两个加数逆向存储到数组之中，用数组来模拟加法的过程</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = b.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) B.<span class="built_in">push_back</span>(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// auto 可以自动获取变量类型，在此处相当于vector&lt;int&gt;</span></span><br><span class="line">    <span class="keyword">auto</span> C = <span class="built_in">add</span>(A, B);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因为存储时为逆向存储，所以输出的过程也需要逆向输出才可以还原本来的顺序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) cout &lt;&lt; C[i];</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="无注释版"><a href="#无注释版" class="headerlink" title="无注释版"></a>无注释版</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">add</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || i &lt; B.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; A.<span class="built_in">size</span>()) t += A[i];</span><br><span class="line">        <span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) t += B[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (t) C.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string a, b;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A, B;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = b.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) B.<span class="built_in">push_back</span>(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> C = <span class="built_in">add</span>(A, B);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) cout &lt;&lt; C[i];</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="高精度减法"><a href="#高精度减法" class="headerlink" title="高精度减法"></a>高精度减法</h1><h2 id="实现思路详解-1"><a href="#实现思路详解-1" class="headerlink" title="实现思路详解"></a>实现思路详解</h2><h3 id="数据存储-1"><a href="#数据存储-1" class="headerlink" title="数据存储"></a>数据存储</h3><div class="note success no-icon flat"><p>同样，与高精度加法相同的是在将被减数和减数存储到数组的过程中时，要<strong>逆序存储</strong>，否则会出现位数不对应的情况</p></div><h3 id="处理负数情况"><a href="#处理负数情况" class="headerlink" title="处理负数情况"></a>处理负数情况</h3><div class="note success no-icon flat"><p>在减法的计算过程中，首先要考虑 <strong>被减数 A</strong> 和 <strong>减数 B</strong> 的大小关系</p></div><div class="note info no-icon flat"><p>如果 A &gt;&#x3D; B ， 则正常计算 <strong>A - B</strong> 即可</p><p>否则，则需要计算 <strong>- (B - A)</strong> 来得出结果</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断 A, B 两个数的大小</span></span><br><span class="line"><span class="comment">// 如果返回 ture，直接计算 A - B 即可</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">cmp</span>(A, B)) C = <span class="built_in">sub</span>(A, B);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 否则，则需要通过计算 -(B - A) 来得到计算结果</span></span><br><span class="line"><span class="comment">// 代码表示的话就先输出一个负号，然后计算 B — A 的结果输出就好</span></span><br><span class="line"><span class="keyword">else</span> C = <span class="built_in">sub</span>(B, A), cout &lt;&lt; <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为存储时为逆向存储，所以输出的过程也需要逆向输出才可以还原本来的顺序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) </span><br><span class="line">    cout &lt;&lt; C[i];</span><br><span class="line">cout &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h3 id="比较两数大小"><a href="#比较两数大小" class="headerlink" title="比较两数大小"></a>比较两数大小</h3><div class="note success no-icon flat"><p>因为被减数和减数是存储到数组中的，所以<strong>不可以直接用大于小于号</strong>进行比较大小</p><p>在比较的过程中，首先比较数组的<strong>长度</strong>，长度更长的数组更大</p><p>长度相同时，因为是逆序存储，所以最高位在数组的最后一位，所以要逆序<strong>逐位</strong>比较两个数组中的每一个元素</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比较被减数和减数哪个数字更大</span></span><br><span class="line"><span class="comment">// 判断是否 A &gt;= B</span></span><br><span class="line"><span class="comment">// 如果成立，返回 true，否则，返回 false</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 首先比较两个数组的长度，长度更长的数组更大，如 123 和 89 ，明显 123 更大</span></span><br><span class="line">    <span class="keyword">if</span> (A.<span class="built_in">size</span>() != B.<span class="built_in">size</span>()) <span class="keyword">return</span> A.<span class="built_in">size</span>() &gt; B.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果两个数组长度相同的话，则比较每一位的大小</span></span><br><span class="line">    <span class="comment">// 因为在存储的时候是逆序存储的，所以高位在数组的末尾，所以此处要从数组的末尾开始比较</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- )</span><br><span class="line">        <span class="keyword">if</span> (A[i] != B[i])</span><br><span class="line">            <span class="keyword">return</span> A[i] &gt; B[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果上述代码还没有返回结果的话，说明两个数字大小相同</span></span><br><span class="line">    <span class="comment">// 大小相同的话符合 A &gt;= B 的情况，返回 true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模拟计算过程-1"><a href="#模拟计算过程-1" class="headerlink" title="模拟计算过程"></a>模拟计算过程</h3><div class="note success no-icon flat"><p>高精度减法计算的过程就是两个数组的<strong>对应位置</strong>的数进行相减</p><p>在计算减法的过程中，要注意<strong>借位</strong>的情况</p><p>在每一位计算的时候，如果<strong>被减数 &gt;&#x3D; 减数</strong>的时候，则不需要借位，直接计算 <strong>A - B</strong> 即可</p><p>如果<strong>被减数 &lt; 减数</strong>，则需要借位，即计算结果为 <strong>A + 10 - B</strong></p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// t 变量复用，同时记录借位情况和每一次对应位相减的结果</span></span><br><span class="line"><span class="comment">// 最开始没有借位，初始化为 0</span></span><br><span class="line"><span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 通过正负数比较可以保证 A 是大于等于 B 的，所以此处循环范围只需要【i &lt; A.size()】 即可</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 如果有借位，首先要将被减数减去借位</span></span><br><span class="line">    <span class="comment">// 此时 t 记录的就是减去借位后的被减数</span></span><br><span class="line">    t = A[i] - t;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 模拟被减数减去减数的过程</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) </span><br><span class="line">        t -= B[i];</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 此处 【(t + 10) % 10】 是将被减数大于减数和被减数小于减数的两种情况都合并表示了</span></span><br><span class="line">    <span class="comment">// 如果被减数 &gt;= 减数，则计算得到的 t 为正数，那么通过上式计算仍然为 t </span></span><br><span class="line">    <span class="comment">// 如果被减数 &lt; 减数，则计算的 t 为负数，则模拟了借位后[t + 10 - B]的过程,通过上式计算的结果为t+10</span></span><br><span class="line">    C.<span class="built_in">push_back</span>((t + <span class="number">10</span>) % <span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 记录是否借位，如果此时 t 为负数，则说明被减数小于减数，那么则需要借位</span></span><br><span class="line">    <span class="comment">// 此处将 t 置为 1，在下次循环的过程中可以减去借位</span></span><br><span class="line">    <span class="keyword">if</span> (t &lt; <span class="number">0</span>) </span><br><span class="line">        t = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 反之如果此处 t &gt;= 0，那么则说明不需要借位，t 为 0 即可</span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        t = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note danger flat"><p>在模拟的过程中，要注意 <strong>t 变量的复用</strong>以及<strong>是否需要借位</strong>的两种情况的<strong>综合表示</strong></p></div><h3 id="处理前置零"><a href="#处理前置零" class="headerlink" title="处理前置零"></a>处理前置零</h3><div class="note success no-icon flat"><p>在高精度计算中，数字是<strong>按位逆序存储</strong>到数组中的每一位的，而在计算的过程中会出现<strong>高位为 0</strong> 的情况</p><p>当对应位置计算为 0 时<strong>结果数组</strong>同样会存储一个 0 </p><p>这就会导致如果输出的时候有<strong>高位 0 的情况同样会输出</strong></p><p>所以在计算完成之后要有一个<strong>去除前置零</strong>的过程</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果 C 数组的长度为 1，则说明计算结果就为 0，那么就不需要去除 0</span></span><br><span class="line"><span class="comment">// 如果长度大于 1，则从数组的最后一位开始判断，如果是 0 的话，那么则说明高位为 0，需要去除前置 0</span></span><br><span class="line"><span class="comment">// 因为是逆序存储，计算结果的高位对应的下标也是数组的高位，所以要从后开始判断</span></span><br><span class="line"><span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) </span><br><span class="line">    C.<span class="built_in">pop_back</span>();</span><br></pre></td></tr></table></figure><div class="note danger no-icon flat"><p>例如：129 - 126 &#x3D; 3</p><p>在存储的过程中 A : [9, 2, 1] 、B : [6, 2, 1]</p><p>最终计算的结果为 C : [3, 0, 0]</p><p>在输出的过程中，是将结果数组中的每一位都输出，就会输出 <strong>003</strong> 为结果</p><p>为此，我们就需要做一个<strong>去除前置 0</strong> 的操作</p></div><h2 id="C-代码实现-1"><a href="#C-代码实现-1" class="headerlink" title="C++代码实现"></a>C++代码实现</h2><h3 id="详细注释版-1"><a href="#详细注释版-1" class="headerlink" title="详细注释版"></a>详细注释版</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较被减数和减数哪个数字更大</span></span><br><span class="line"><span class="comment">// 判断是否 A &gt;= B</span></span><br><span class="line"><span class="comment">// 如果成立，返回 true，否则，返回 false</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 首先比较两个数组的长度，长度更长的数组更大，如 123 和 89 ，明显 123 更大</span></span><br><span class="line">    <span class="keyword">if</span> (A.<span class="built_in">size</span>() != B.<span class="built_in">size</span>()) <span class="keyword">return</span> A.<span class="built_in">size</span>() &gt; B.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果两个数组长度相同的话，则比较每一位的大小</span></span><br><span class="line">    <span class="comment">// 因为在存储的时候是逆序存储的，所以高位在数组的末尾，所以此处要从数组的末尾开始比较</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- )</span><br><span class="line">        <span class="keyword">if</span> (A[i] != B[i])</span><br><span class="line">            <span class="keyword">return</span> A[i] &gt; B[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果上述代码还没有返回结果的话，说明两个数字大小相同</span></span><br><span class="line">    <span class="comment">// 大小相同的话符合 A &gt;= B 的情况，返回 true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sub</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// t 变量复用，同时记录借位情况和每一次对应位相减的结果</span></span><br><span class="line">    <span class="comment">// 最开始没有借位，初始化为 0</span></span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过 cmp 函数可以保证 A 是大于等于 B 的，所以此处循环范围只需要【i &lt; A.size()】 即可</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果有借位，首先要将被减数减去借位</span></span><br><span class="line">        <span class="comment">// 此时 t 记录的就是减去借位后的被减数</span></span><br><span class="line">        t = A[i] - t;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 模拟被减数减去减数的过程</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) t -= B[i];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 此处 【(t + 10) % 10】 是将被减数大于减数和被减数小于减数的两种情况都合并表示了</span></span><br><span class="line">        <span class="comment">// 如果被减数大于等于减数，则计算得到的 t 为正数，那么通过上式计算仍然为 t </span></span><br><span class="line">        <span class="comment">// 如果被减数小于减数，则计算的 t 为负数，则模拟了借位后 【t + 10 - B】 的过程</span></span><br><span class="line">        <span class="comment">// 通过上式计算的结果为 t + 10</span></span><br><span class="line">        C.<span class="built_in">push_back</span>((t + <span class="number">10</span>) % <span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 记录是否借位，如果此时 t 为负数，则说明被减数小于减数，那么则需要借位</span></span><br><span class="line">        <span class="comment">// 此处将 t 置为 1，在下次循环的过程中可以减去借位</span></span><br><span class="line">        <span class="keyword">if</span> (t &lt; <span class="number">0</span>) t = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 反之如果此处 t &gt;= 0，那么则说明不需要借位，t 为 0 即可</span></span><br><span class="line">        <span class="keyword">else</span> t = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因为计算得到的结果是存储到数组中的，所以可能会导致某些位结果为 0</span></span><br><span class="line">    <span class="comment">// 如果高位计算为 0 则不需要输出，该操作就是去除前置 0 的过程</span></span><br><span class="line">    <span class="comment">// 如果 C 数组的长度为 1，则说明计算结果就为 0，那么就不需要去除 0</span></span><br><span class="line">    <span class="comment">// 如果长度大于 1，则从数组的最后一位开始判断，如果是 0 的话，那么则说明高位为 0，需要去除前置 0</span></span><br><span class="line">    <span class="comment">// 例如 129 - 126，计算得到的结果在数组中表示为[3, 0, 0]，所以需要从最后一位开始去除前置 0</span></span><br><span class="line">    <span class="comment">// 如果不去除前置 0 的话，那么输出结果会是 003</span></span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) </span><br><span class="line">        C.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 首先将被减数和减数都用字符串来表示，因为精度过大，所以使用常规的整形无法存储</span></span><br><span class="line">    <span class="comment">// 字符串每个字符占用一个字节，可以存储高精度大数</span></span><br><span class="line">    string a, b;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A, B;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将被减数和减数逆序存储到数组之中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = b.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) B.<span class="built_in">push_back</span>(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断 A, B 两个数的大小</span></span><br><span class="line">    <span class="comment">// 如果返回 ture，直接计算 A - B 即可</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">cmp</span>(A, B)) C = <span class="built_in">sub</span>(A, B);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 否则，则需要通过计算 -(B - A) 来得到计算结果</span></span><br><span class="line">    <span class="comment">// 代码表示的话就先输出一个负号，然后计算 B — A 的结果输出就好</span></span><br><span class="line">    <span class="keyword">else</span> C = <span class="built_in">sub</span>(B, A), cout &lt;&lt; <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因为存储时为逆向存储，所以输出的过程也需要逆向输出才可以还原本来的顺序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) cout &lt;&lt; C[i];</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="无注释版-1"><a href="#无注释版-1" class="headerlink" title="无注释版"></a>无注释版</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (A.<span class="built_in">size</span>() != B.<span class="built_in">size</span>()) <span class="keyword">return</span> A.<span class="built_in">size</span>() &gt; B.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- )</span><br><span class="line">        <span class="keyword">if</span> (A[i] != B[i])</span><br><span class="line">            <span class="keyword">return</span> A[i] &gt; B[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sub</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        t = A[i] - t;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) </span><br><span class="line">            t -= B[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>((t + <span class="number">10</span>) % <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span> (t &lt; <span class="number">0</span>) </span><br><span class="line">            t = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            t = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) </span><br><span class="line">        C.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string a, b;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A, B;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = b.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) B.<span class="built_in">push_back</span>(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">cmp</span>(A, B)) </span><br><span class="line">        C = <span class="built_in">sub</span>(A, B);</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        C = <span class="built_in">sub</span>(B, A), cout &lt;&lt; <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) </span><br><span class="line">        cout &lt;&lt; C[i];</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="高精度乘法"><a href="#高精度乘法" class="headerlink" title="高精度乘法"></a>高精度乘法</h1><h2 id="实现思路详解-2"><a href="#实现思路详解-2" class="headerlink" title="实现思路详解"></a>实现思路详解</h2><h3 id="数据存储-2"><a href="#数据存储-2" class="headerlink" title="数据存储"></a>数据存储</h3><div class="note success no-icon flat"><p>注意乘法的运算是一个<strong>高精度数</strong>乘以一个<strong>低精度数</strong></p><p>所以在存储的过程中，要将<strong>高精度数</strong>使用<strong>数组</strong>逆序按位存储，<strong>低精度数</strong>直接定义为<strong>整型</strong>即可。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">string a;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用数组来按位逆序存储高精度数</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; A;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br></pre></td></tr></table></figure><div class="note info flat"><p>两个高精度数相乘的模拟过程太过繁琐，感兴趣可以自己研究，noi考试不会涉及。</p></div><h3 id="模拟计算过程-2"><a href="#模拟计算过程-2" class="headerlink" title="模拟计算过程"></a>模拟计算过程</h3><div class="note success no-icon flat"><p>注意乘法的运算是一个<strong>高精度数</strong>乘以一个<strong>低精度数</strong></p><p>在乘法的模拟过程中，与平时手算的过程会有一点点区别</p><p>在平时手动列竖式的过程中，是每一位相乘，最后相加求积</p><p>而在代码模拟过程中，我们要<strong>将低精度的数看做整体</strong>来进行运算，<strong>不需要逐位相乘</strong>进行计算</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || t; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">// 将低精度数 b 看做整体进行计算</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; A.<span class="built_in">size</span>()) t += A[i] * b;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 结果数组中存储的是每一次对应为相乘所得的结果 % 10的余数</span></span><br><span class="line">    C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 此处 t 变量记录进位情况，每次的进位是 t / 10 取整得到的结果</span></span><br><span class="line">    t /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note danger no-icon flat"><p>例如：123*12</p><p>我们要将 12 看做一个整体来计算</p><p>即第一步要计算3 * 12，下一步计算 2 * 12，最后计算 1 * 12</p><p>然后每次计算过程将计算 <strong>结果%10</strong> 作为当前位计算的 <strong>结果</strong> 存储到 C 数组中，将 计算 <strong>结果 &#x2F; 10</strong> 作为 <strong>进位</strong> 继续下一次计算</p></div><div class="note primary flat"><p>img【模拟123 * 12 整体相乘记录余数和除数】</p></div><h3 id="处理前置零-1"><a href="#处理前置零-1" class="headerlink" title="处理前置零"></a>处理前置零</h3><div class="note success no-icon flat"><p>当<strong>低精度数为 0</strong> 时，计算结果为 0</p><p>但是在代码实现的过程中，结果是存储到<strong>数组</strong>之中的</p><p>所以会导致数组的<strong>每一位都为 0</strong> ，输出时会输出 <strong>len(A) 个 0</strong></p><p>为了避免这种现象，所以要在模拟结束后进行<strong>去除前置零</strong>的操作</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果 b = 0 的话，那么数组中存储的所有数据均为 0，即结果为 0</span></span><br><span class="line"><span class="comment">// 但是此处我们是使用数组存储，所以输出会输出 len(A) 个 0</span></span><br><span class="line"><span class="comment">// 所以此处应该去除前置 0，只保留一个即可</span></span><br><span class="line"><span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) </span><br><span class="line">    C.<span class="built_in">pop_back</span>();</span><br></pre></td></tr></table></figure><div class="note info flat"><p>除去上述去除前置零的方法，还有一种更为简便的方法，即在输入之后<strong>直接判断 b 是否为 0</strong> 即可</p></div><h2 id="C-代码实现-2"><a href="#C-代码实现-2" class="headerlink" title="C++代码实现"></a>C++代码实现</h2><h3 id="详细注释版-2"><a href="#详细注释版-2" class="headerlink" title="详细注释版"></a>详细注释版</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mul</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// t 变量复用</span></span><br><span class="line">    <span class="comment">// 1、记录每一位相乘计算结果</span></span><br><span class="line">    <span class="comment">// 2、记录进位情况</span></span><br><span class="line">    <span class="comment">// 最开始进位为 0 ，所以将 t 初始化为 0</span></span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// A 为高精度数，所以循环次数以 A 的长度为限制</span></span><br><span class="line">    <span class="comment">// 同时为了保证如果计算结果有 len(A) + 1 位，所以循环次数还要以 t 的存在情况为限制</span></span><br><span class="line">    <span class="comment">// 例如 10 * 10 = 100</span></span><br><span class="line">    <span class="comment">// 计算结果为 3 为，A 为 2 位</span></span><br><span class="line">    <span class="comment">// 如果仅仅以 A 的位数为限制的话，会导致最终的计算结果错误</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || t; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 将低精度数 b 看做整体进行计算</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; A.<span class="built_in">size</span>()) t += A[i] * b;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 结果数组中存储的是每一次对应为相乘所得的结果 % 10的余数</span></span><br><span class="line">        C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 此处 t 变量记录进位情况，每次的进位是 t / 10 取整得到的结果</span></span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 b = 0 的话，那么数组中存储的所有数据均为 0，即结果为 0</span></span><br><span class="line">    <span class="comment">// 但是此处我们是使用数组存储，所以输出会输出 len(A) 个 0</span></span><br><span class="line">    <span class="comment">// 所以此处应该去除前置 0，只保留一个即可</span></span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 高精度乘法是高精度数 * 低精度数</span></span><br><span class="line">    <span class="comment">// 所以两个数一个用字符串定义，之后按位逆序存储到数组之中</span></span><br><span class="line">    <span class="comment">// 另一个数直接定义为整型即可</span></span><br><span class="line">    string a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用数组来按位逆序存储高精度数</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> C = <span class="built_in">mul</span>(A, b);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 起始存储为逆序存储，所以此处要将将结果逆序输出</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, C[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="无注释版-2"><a href="#无注释版-2" class="headerlink" title="无注释版"></a>无注释版</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mul</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || t; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; A.<span class="built_in">size</span>()) </span><br><span class="line">            t += A[i] * b;</span><br><span class="line">        C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) </span><br><span class="line">        C.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    string a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) </span><br><span class="line">        A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> C = <span class="built_in">mul</span>(A, b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, C[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="高精度除法"><a href="#高精度除法" class="headerlink" title="高精度除法"></a>高精度除法</h1><h2 id="实现思路详解-3"><a href="#实现思路详解-3" class="headerlink" title="实现思路详解"></a>实现思路详解</h2><h3 id="数据存储-3"><a href="#数据存储-3" class="headerlink" title="数据存储"></a>数据存储</h3><div class="note success no-icon flat"><p>注意乘法的运算是一个<strong>高精度数</strong>除以一个<strong>低精度数</strong></p><p>所以在存储的过程中，要将<strong>高精度数</strong>使用<strong>数组</strong>逆序按位存储，<strong>低精度数</strong>直接定义为<strong>整型</strong>即可。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">string a;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; A;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="comment">// 用数组来按位逆序存储高精度数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- )  A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="模拟计算过程-3"><a href="#模拟计算过程-3" class="headerlink" title="模拟计算过程"></a>模拟计算过程</h3><div class="note success no-icon flat"><p>与其他几个运算不同的是，<strong>除法</strong>的运算是从<strong>高位</strong>开始计算的，<strong>其他的运算</strong>是从**低位[个位]**开始计算的。</p><p>因为<strong>存储到数组中时是逆序存储</strong>的，所以在除法<strong>运算的时候也要逆序读取</strong>进行运算。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 除法与其他运算不同的是除法的运算是从最高位开始运算的</span></span><br><span class="line"><span class="comment">// 其他的运算是从最低位开始进行运算的</span></span><br><span class="line"><span class="comment">// 所以此处要逆序读取数组中的每一个数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- )</span><br><span class="line">&#123;</span><br><span class="line">    ……;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note success no-icon flat"><p>在除法运算中，每一位计算的<strong>被除数</strong>均为<strong>上一位计算所得的余数 * 10 + 当前位</strong>所得。</p><p>每一位计算所得的<strong>结果</strong>为运算所得的<strong>被除数 &#x2F; 除数取整</strong>的结果。</p><p>每一位计算的<strong>余数</strong>是运算所得的<strong>被除数 % 除数取余</strong>的结果</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在手动模拟除法竖式的过程中</span></span><br><span class="line"><span class="comment">// 每次计算是通过每一次上一位计算所得的余数 * 10 + 当前位作为下一次运算的被除数</span></span><br><span class="line">r = r * <span class="number">10</span> + A[i];</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 每一位要存储的结果是运算所得的被除数 / 除数取整的结果</span></span><br><span class="line">C.<span class="built_in">push_back</span>(r / b);</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 每一位计算的余数是运算所得的被除数 % 除数取余的结果</span></span><br><span class="line">r %= b;</span><br></pre></td></tr></table></figure><div class="note danger no-icon flat"><p>例如：1234 &#x2F; 11</p><p><strong>余数初始化为 0</strong></p><table><thead><tr><th align="center">当前位</th><th align="center">当前位被除数</th><th align="center">当前位计算结果</th><th align="center">当前位计算余数</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">1</td><td align="center">0</td><td align="center">1</td></tr><tr><td align="center">2</td><td align="center">12</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">3</td><td align="center">13</td><td align="center">1</td><td align="center">2</td></tr><tr><td align="center">4</td><td align="center">14</td><td align="center">2</td><td align="center">2</td></tr></tbody></table><p><strong>当前位被除数：</strong>  上一位计算所得的余数 * 10 + 当前位</p><p><strong>当前位计算结果：</strong> 当前位被除数 &#x2F; 除数取整</p><p><strong>当前位计算余数：</strong> 当前位被除数 % 除数取余</p></div><div class="note primary flat"><p>img【1234  &#x2F; 11 的过程】</p></div><h3 id="处理前置零-2"><a href="#处理前置零-2" class="headerlink" title="处理前置零"></a>处理前置零</h3><div class="note success no-icon flat"><p>通过上面的 1234  &#x2F; 11 的例子，我们可以发现高精度除法同样存在<strong>高位为 0</strong> 的情况。</p><p>所以我们同样要在模拟过程结束之后<strong>对前置零进行处理</strong>。</p><p>但是与其他运算不同的是，高精度除法的模拟过程是<strong>从高位开始计算</strong>的。</p><p>所以结果数组中存储的每一位的<strong>结果是正序的</strong>。</p><p>所以在处理前置零之前要<strong>将结果数组翻转之后再进行处理</strong>。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将结果数组进行翻转，调用 reverse 函数</span></span><br><span class="line"><span class="built_in">reverse</span>(C.<span class="built_in">begin</span>(), C.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理前置 0</span></span><br><span class="line"><span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) </span><br><span class="line">C.<span class="built_in">pop_back</span>();</span><br></pre></td></tr></table></figure><h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><div class="note info no-icon flat"><p>高精度除法除了最终计算的<strong>结果[商]<strong>，有可能还存在额外的</strong>余数</strong>。</p><p>所以在输出时要注意将余数也进行输出。</p><p>在函数调用的过程中，余数是<strong>通过地址进行调用</strong>的。</p><p>所以在模拟结束之后余数变量记录的就是<strong>最终的余数</strong>，无需再进行传递。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 起始存储为逆序存储，所以此处要将将结果逆序输出。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) </span><br><span class="line">    cout &lt;&lt; C[i];</span><br><span class="line"></span><br><span class="line"><span class="comment">// r 变量记录余数，在调用函数的过程中是将地址作为参数传递的。</span></span><br><span class="line"><span class="comment">// 所以在模拟结束后 r 变量记录的就是最终的余数。</span></span><br><span class="line">cout &lt;&lt; endl &lt;&lt; r &lt;&lt; endl;</span><br></pre></td></tr></table></figure><div class="note danger no-icon flat"><p>注意在模拟的过程中，不论除数是几位数，每次模拟<strong>都是从被除数的最高位</strong>开始的。</p><p>只不过在手动计算的过程中会自动使用<strong>和除数相同位数</strong>的被除数开始计算。</p><p>而在计算机模拟的过程中，如果<strong>除数为两位及以上</strong>，那么<strong>必定会存在前置零</strong>的情况。</p></div><div class="note info flat"><p>最终的输出结果要视<strong>题目而定</strong>，此处讲解只是为了保证输出的完整性。</p></div><h2 id="C-代码实现-3"><a href="#C-代码实现-3" class="headerlink" title="C++代码实现"></a>C++代码实现</h2><h3 id="详细注释版-3"><a href="#详细注释版-3" class="headerlink" title="详细注释版"></a>详细注释版</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">div</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> b, <span class="type">int</span> &amp;r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// r 变量用来记录每一位计算之后所得的余数</span></span><br><span class="line">    r = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 除法与其他运算不同的是除法的运算是从最高位开始运算的</span></span><br><span class="line">    <span class="comment">// 其他的运算是从最低位开始进行运算的</span></span><br><span class="line">    <span class="comment">// 所以此处要逆序读取数组中的每一个数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 在手动模拟除法竖式的过程中</span></span><br><span class="line">    <span class="comment">// 每次计算是通过每一次上一位计算所得的余数 * 10 + 当前位作为下一次运算的被除数</span></span><br><span class="line">        r = r * <span class="number">10</span> + A[i];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 每一位要存储的结果是运算所得的被除数 / 除数取整的结果</span></span><br><span class="line">        C.<span class="built_in">push_back</span>(r / b);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 每一位计算的余数是运算所得的被除数 % 除数取余的结果</span></span><br><span class="line">        r %= b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将结果数组进行翻转，调用 reverse 函数</span></span><br><span class="line">    <span class="built_in">reverse</span>(C.<span class="built_in">begin</span>(), C.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理前置 0</span></span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) </span><br><span class="line">        C.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 高精度除法是高精度数 / 低精度数</span></span><br><span class="line">    <span class="comment">// 所以两个数一个用字符串定义，之后按位逆序存储到数组之中</span></span><br><span class="line">    <span class="comment">// 另一个数直接定义为整型即可</span></span><br><span class="line">    string a;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) </span><br><span class="line">        A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 除法与其他运算不同的是除法的返回值除了商还有余数，此处用 r 变量来记录余数。</span></span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    <span class="keyword">auto</span> C = <span class="built_in">div</span>(A, b, r);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 起始存储为逆序存储，所以此处要将将结果逆序输出。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) </span><br><span class="line">        cout &lt;&lt; C[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// r 变量记录余数，在调用函数的过程中是将地址作为参数传递的。</span></span><br><span class="line">    <span class="comment">// 所以在模拟结束后 r 变量记录的就是最终的余数。</span></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; r &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="无注释版-3"><a href="#无注释版-3" class="headerlink" title="无注释版"></a>无注释版</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">div</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> b, <span class="type">int</span> &amp;r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- )</span><br><span class="line">    &#123;</span><br><span class="line">        r = r * <span class="number">10</span> + A[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>(r / b);</span><br><span class="line">        r %= b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(C.<span class="built_in">begin</span>(), C.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) </span><br><span class="line">        C.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string a;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> B;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; B;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) </span><br><span class="line">        A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    <span class="keyword">auto</span> C = <span class="built_in">div</span>(A, B, r);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) </span><br><span class="line">        cout &lt;&lt; C[i];</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; r &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1><div class="note warning flat"><p>在学习的过程中遇到任何的问题都可以评论到评论区，看到有价值的提问会记录到Q&amp;A之中！</p></div><div class="note danger flat"><p>auto 是什么意思？</p></div><div class="note success no-icon flat"><p>auto 关键字可以<strong>自动推导变量的类型</strong>，在使用过程中<strong>必须给定变量一个值</strong>才可以使用 auto</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> x = <span class="number">10</span>;    <span class="comment">// x的类型将被推导为int</span></span><br><span class="line"><span class="keyword">auto</span> y = <span class="number">3.14</span>;  <span class="comment">// y的类型将被推导为double</span></span><br><span class="line"><span class="keyword">auto</span> z = <span class="string">&quot;hello&quot;</span>;   <span class="comment">// z的类型将被推导为const char*</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> a;<span class="comment">// 不给定初始值会报错。</span></span><br></pre></td></tr></table></figure><p>在本文中，auto 所接收的是函数返回值，类型自动识别为 <strong>vector&lt; int &gt;</strong></p></div>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ 算法与数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
