<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>从零开始的 C++ 学习之旅</title>
      <link href="/CPP_lesson/"/>
      <url>/CPP_lesson/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note warning flat"><p>本文将介绍 C++ 的相关历史背景、编译环境、IDE以及介绍 C++ 相关基础语法、数据结构与算法的知识点。</p></div><div class="note warning flat"><p>在阅读过程中有任何问题都可以发布到评论区，有价值的问题将会放到文章末尾Q&amp;A之中！</p></div><h1 id="C-的发展经历"><a href="#C-的发展经历" class="headerlink" title="C++ 的发展经历"></a>C++ 的发展经历</h1><div class="note success no-icon flat"><p><strong>C++<strong>（</strong>C Plus Plus</strong>）是一种高级语言，它是由 <strong>Bjarne Stroustrup</strong> 于 <strong>1979</strong> 年在贝尔实验室开始设计开发的。C++ 进一步扩充和完善了 C 语言，是一种<strong>面向对象</strong>的程序设计语言。</p></div><div class="note info flat"><p>同时，在<strong>信息学奥林匹克竞赛</strong>【以下简称<strong>信奥赛</strong>】中，C++ 是<strong>唯一可以使用</strong>的语言。</p></div><h1 id="C-的标准库"><a href="#C-的标准库" class="headerlink" title="C++ 的标准库"></a>C++ 的标准库</h1><div class="note success no-icon flat"><p>在 C++ 的发展过程中，经历过五次<strong>标准化</strong>的过程。</p><p>1998 年制定 <strong>C++98</strong> 作为第一个 C++ 标准</p><p>2003 年制定 <strong>C++03</strong> 作为第二个 C++ 标准</p><p>2011 年制定 <strong>C++11</strong> 作为第三个 C++ 标准</p><p>2014 年制定 <strong>C++14</strong> 作为第四个 C++ 标准</p><p>2017 年制定 <strong>C++17</strong> 作为第五个 C++ 标准</p><p>C++17 也是现如今 C++ 编码所使用的一个标准。</p></div>]]></content>
      
      
      <categories>
          
          <category> 信奥赛 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ 基础语法 </tag>
            
            <tag> C++ 基础算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 语法基础课</title>
      <link href="/C-lesson/"/>
      <url>/C-lesson/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note warning flat"><p>本文记录 C++ 基础语法。</p></div><div class="note warning flat"><p>在阅读过程中有任何问题都可以发布到评论区，有价值的问题将会放到文章末尾Q&amp;A之中！</p></div><h1 id="第一段-C-代码"><a href="#第一段-C-代码" class="headerlink" title="第一段 C++ 代码"></a>第一段 C++ 代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello, world!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 信奥赛 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ 基础语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高精度运算</title>
      <link href="/High_Accuracy/"/>
      <url>/High_Accuracy/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note warning flat"><p>本文记录各种高精度运算的相关实现思路以及 C++ 代码描述。</p></div><div class="note warning flat"><p>在阅读过程中有任何问题都可以发布到评论区，有价值的问题将会放到文章末尾Q&amp;A之中！</p></div><h1 id="高精度运算"><a href="#高精度运算" class="headerlink" title="高精度运算"></a>高精度运算</h1><div class="note success no-icon flat"><p><strong>高精度算法</strong>（<strong>High Accuracy Algorithm</strong>）是处理 <strong>大数字【数字长度大于10^6】</strong> 的数学计算方法。在一般的科学计算中，会经常算到小数点后几百位或者更多，当然也可能是几千亿几百亿的大数字。一般这类数字统称为<strong>高精度数</strong>，高精度算法是用计算机对于超大数据的一种模拟<strong>加，减，乘，除，乘方</strong>等运算。对于非常庞大无法在计算机中正常存储的数字，将这个数字拆开，拆成一位一位或者是四位四位的<strong>存储到一个数组</strong>中， 用一个数组去表示一个数字，这样这个数字就被称为是高精度数。</p><p>高精度运算的基本思想就是通过将数字<strong>逐位拆分到数组之中</strong>后，模拟人工计算时<strong>列竖式</strong>的过程来完成对高精度数字的运算。</p></div><h1 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h1><h2 id="实现思路详解"><a href="#实现思路详解" class="headerlink" title="实现思路详解"></a>实现思路详解</h2><h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><div class="note success no-icon flat"><p>在加法计算的过程中，将加数的每一位都放到一个数组之中，注意在存储的过程中要<strong>逆序存储</strong></p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先将两个加数都用字符串来表示，因为精度过大，所以使用常规的整型无法存储</span></span><br><span class="line"><span class="comment">// 字符串每个字符占用一个字节，可以存储高精度大数</span></span><br><span class="line"><span class="comment">// 定义A，B两个数组来记录两个加数的每一位</span></span><br><span class="line">string a, b;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; A, B;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 将两个加数逆向存储到数组之中，用数组来模拟加法的过程</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = b.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) B.<span class="built_in">push_back</span>(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br></pre></td></tr></table></figure><div class="note info flat"><p>逆序存储是为了保证<strong>低位对齐</strong>，如果<strong>正序存储可以会导致对应位错位</strong></p></div><div class="note danger no-icon flat"><p>例如：123 + 89</p><p>逆序存储：A数组：[3, 2, 1]、B数组：[9, 8]，在相加的过程中个位 3 和 9 对应，十位 2 和 8 对应</p><p>正序存储：A数组：[1, 2, 3]、B数组：[8, 9]，在相加的过程中百位 1 和十位 8 对应，十位 2 和 个位 9 对应，导致计算结果错位</p></div><div class="note primary flat"><p>img【123 + 89 逆序存储和正序存储示例图片】</p></div><h3 id="模拟计算过程"><a href="#模拟计算过程" class="headerlink" title="模拟计算过程"></a>模拟计算过程</h3><div class="note success no-icon flat"><p>高精度加法计算的过程就是两个数组的<strong>对应位置</strong>的数进行相加</p><p>在计算的过程中要注意<strong>进位</strong>，如果两个数相加结果大于等于 10，则需要进位</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// t 变量复用，同时记录进位情况和每一次对应位相加所计算得到的结果</span></span><br><span class="line"><span class="comment">// 最开始没有进位，初始化为 0 </span></span><br><span class="line"><span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 模拟加法列竖式计算过程</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || i &lt; B.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; A.<span class="built_in">size</span>()) t += A[i];</span><br><span class="line">    <span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) t += B[i];</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// C 数组存取的为计算结果模10的余数，如：5 + 7 = 12，则 C 数组存取的为 2 【12 % 10 = 2】 </span></span><br><span class="line">    C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">    <span class="comment">// t 变量记录进位，如果计算结果大于等于 10，则 t /= 10 为 1，否则为 0</span></span><br><span class="line">    t /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note danger flat"><p>在记录计算结果时，存储的是对应位相加<strong>模10</strong>所得的<strong>余数</strong>，如：5 + 7 &#x3D; 12，则结果数组该位存储的<strong>余数</strong>为 2 </p><p>进位使用计算结果<strong>除以10取整</strong>求得，如果计算结果大于等于 10，则 <strong>结果 &#x2F; 10</strong> 为 1，否则为 0</p></div><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><div class="note success no-icon flat"><p>注意最终输出时因为在<strong>存储的过程中为逆序存储</strong>，所以在<strong>输出的时候也要逆序输出</strong></p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为存储时为逆向存储，所以输出的过程也需要逆向输出才可以还原本来的顺序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) </span><br><span class="line">    cout &lt;&lt; C[i];</span><br><span class="line">cout &lt;&lt; endl;</span><br></pre></td></tr></table></figure><div class="note primary flat"><p>img【存储结果逆序样例】</p></div><h2 id="C-代码实现"><a href="#C-代码实现" class="headerlink" title="C++代码实现"></a>C++代码实现</h2><h3 id="详细注释版"><a href="#详细注释版" class="headerlink" title="详细注释版"></a>详细注释版</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在传递参数的过程中直接引用A、B两个数组的地址，就不需要额外再开辟新的空间，节省空间复杂度</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">add</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 定义 C 数组来存取两个数组每一位相加所得到的和</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// t 变量复用，同时记录进位情况和每一次对应位相加所计算得到的结果</span></span><br><span class="line">    <span class="comment">// 最开始没有进位，初始化为 0 </span></span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 模拟加法列竖式计算过程</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || i &lt; B.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; A.<span class="built_in">size</span>()) t += A[i];</span><br><span class="line">        <span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) t += B[i];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// C 数组存取的为计算结果的余数，如：5 + 7 = 12，则 C 数组存取的为 2 【12 % 10 = 2】 </span></span><br><span class="line">        C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        <span class="comment">// t 变量记录进位，如果计算结果大于等于 10，则 t /= 10 为 1，否则为 0</span></span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果上述所有为相加之后还有进位，则直接在 C 数组中再记录一个高位 1</span></span><br><span class="line">    <span class="comment">// 例如： 99 + 1 = 100，上述模拟结束之后 t 为 1，则在 C 数组中再记录高位 1 表示最终的进位</span></span><br><span class="line">    <span class="keyword">if</span> (t) C.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 首先将两个加数都用字符串来表示，因为精度过大，所以使用常规的整形无法存储</span></span><br><span class="line">    <span class="comment">// 字符串每个字符占用一个字节，可以存储高精度大数</span></span><br><span class="line">    <span class="comment">// 定义A，B两个数组来记录两个加数的每一位</span></span><br><span class="line">    string a, b;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A, B;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将两个加数逆向存储到数组之中，用数组来模拟加法的过程</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = b.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) B.<span class="built_in">push_back</span>(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// auto 可以自动获取变量类型，在此处相当于vector&lt;int&gt;</span></span><br><span class="line">    <span class="keyword">auto</span> C = <span class="built_in">add</span>(A, B);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因为存储时为逆向存储，所以输出的过程也需要逆向输出才可以还原本来的顺序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) cout &lt;&lt; C[i];</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="无注释版"><a href="#无注释版" class="headerlink" title="无注释版"></a>无注释版</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">add</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || i &lt; B.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; A.<span class="built_in">size</span>()) t += A[i];</span><br><span class="line">        <span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) t += B[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (t) C.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string a, b;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A, B;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = b.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) B.<span class="built_in">push_back</span>(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> C = <span class="built_in">add</span>(A, B);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) cout &lt;&lt; C[i];</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="高精度减法"><a href="#高精度减法" class="headerlink" title="高精度减法"></a>高精度减法</h1><h2 id="实现思路详解-1"><a href="#实现思路详解-1" class="headerlink" title="实现思路详解"></a>实现思路详解</h2><h3 id="数据存储-1"><a href="#数据存储-1" class="headerlink" title="数据存储"></a>数据存储</h3><div class="note success no-icon flat"><p>同样，与高精度加法相同的是在将被减数和减数存储到数组的过程中时，要<strong>逆序存储</strong>，否则会出现位数不对应的情况</p></div><h3 id="处理负数情况"><a href="#处理负数情况" class="headerlink" title="处理负数情况"></a>处理负数情况</h3><div class="note success no-icon flat"><p>在减法的计算过程中，首先要考虑 <strong>被减数 A</strong> 和 <strong>减数 B</strong> 的大小关系</p></div><div class="note info no-icon flat"><p>如果 A &gt;&#x3D; B ， 则正常计算 <strong>A - B</strong> 即可</p><p>否则，则需要计算 <strong>- (B - A)</strong> 来得出结果</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断 A, B 两个数的大小</span></span><br><span class="line"><span class="comment">// 如果返回 ture，直接计算 A - B 即可</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">cmp</span>(A, B)) C = <span class="built_in">sub</span>(A, B);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 否则，则需要通过计算 -(B - A) 来得到计算结果</span></span><br><span class="line"><span class="comment">// 代码表示的话就先输出一个负号，然后计算 B — A 的结果输出就好</span></span><br><span class="line"><span class="keyword">else</span> C = <span class="built_in">sub</span>(B, A), cout &lt;&lt; <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为存储时为逆向存储，所以输出的过程也需要逆向输出才可以还原本来的顺序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) </span><br><span class="line">    cout &lt;&lt; C[i];</span><br><span class="line">cout &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h3 id="比较两数大小"><a href="#比较两数大小" class="headerlink" title="比较两数大小"></a>比较两数大小</h3><div class="note success no-icon flat"><p>因为被减数和减数是存储到数组中的，所以<strong>不可以直接用大于小于号</strong>进行比较大小</p><p>在比较的过程中，首先比较数组的<strong>长度</strong>，长度更长的数组更大</p><p>长度相同时，因为是逆序存储，所以最高位在数组的最后一位，所以要逆序<strong>逐位</strong>比较两个数组中的每一个元素</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比较被减数和减数哪个数字更大</span></span><br><span class="line"><span class="comment">// 判断是否 A &gt;= B</span></span><br><span class="line"><span class="comment">// 如果成立，返回 true，否则，返回 false</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 首先比较两个数组的长度，长度更长的数组更大，如 123 和 89 ，明显 123 更大</span></span><br><span class="line">    <span class="keyword">if</span> (A.<span class="built_in">size</span>() != B.<span class="built_in">size</span>()) <span class="keyword">return</span> A.<span class="built_in">size</span>() &gt; B.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果两个数组长度相同的话，则比较每一位的大小</span></span><br><span class="line">    <span class="comment">// 因为在存储的时候是逆序存储的，所以高位在数组的末尾，所以此处要从数组的末尾开始比较</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- )</span><br><span class="line">        <span class="keyword">if</span> (A[i] != B[i])</span><br><span class="line">            <span class="keyword">return</span> A[i] &gt; B[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果上述代码还没有返回结果的话，说明两个数字大小相同</span></span><br><span class="line">    <span class="comment">// 大小相同的话符合 A &gt;= B 的情况，返回 true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模拟计算过程-1"><a href="#模拟计算过程-1" class="headerlink" title="模拟计算过程"></a>模拟计算过程</h3><div class="note success no-icon flat"><p>高精度减法计算的过程就是两个数组的<strong>对应位置</strong>的数进行相减</p><p>在计算减法的过程中，要注意<strong>借位</strong>的情况</p><p>在每一位计算的时候，如果<strong>被减数 &gt;&#x3D; 减数</strong>的时候，则不需要借位，直接计算 <strong>A - B</strong> 即可</p><p>如果<strong>被减数 &lt; 减数</strong>，则需要借位，即计算结果为 <strong>A + 10 - B</strong></p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// t 变量复用，同时记录借位情况和每一次对应位相减的结果</span></span><br><span class="line"><span class="comment">// 最开始没有借位，初始化为 0</span></span><br><span class="line"><span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 通过正负数比较可以保证 A 是大于等于 B 的，所以此处循环范围只需要【i &lt; A.size()】 即可</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 如果有借位，首先要将被减数减去借位</span></span><br><span class="line">    <span class="comment">// 此时 t 记录的就是减去借位后的被减数</span></span><br><span class="line">    t = A[i] - t;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 模拟被减数减去减数的过程</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) </span><br><span class="line">        t -= B[i];</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 此处 【(t + 10) % 10】 是将被减数大于减数和被减数小于减数的两种情况都合并表示了</span></span><br><span class="line">    <span class="comment">// 如果被减数 &gt;= 减数，则计算得到的 t 为正数，那么通过上式计算仍然为 t </span></span><br><span class="line">    <span class="comment">// 如果被减数 &lt; 减数，则计算的 t 为负数，则模拟了借位后[t + 10 - B]的过程,通过上式计算的结果为t+10</span></span><br><span class="line">    C.<span class="built_in">push_back</span>((t + <span class="number">10</span>) % <span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 记录是否借位，如果此时 t 为负数，则说明被减数小于减数，那么则需要借位</span></span><br><span class="line">    <span class="comment">// 此处将 t 置为 1，在下次循环的过程中可以减去借位</span></span><br><span class="line">    <span class="keyword">if</span> (t &lt; <span class="number">0</span>) </span><br><span class="line">        t = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 反之如果此处 t &gt;= 0，那么则说明不需要借位，t 为 0 即可</span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        t = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note danger flat"><p>在模拟的过程中，要注意 <strong>t 变量的复用</strong>以及<strong>是否需要借位</strong>的两种情况的<strong>综合表示</strong></p></div><h3 id="处理前置零"><a href="#处理前置零" class="headerlink" title="处理前置零"></a>处理前置零</h3><div class="note success no-icon flat"><p>在高精度计算中，数字是<strong>按位逆序存储</strong>到数组中的每一位的，而在计算的过程中会出现<strong>高位为 0</strong> 的情况</p><p>当对应位置计算为 0 时<strong>结果数组</strong>同样会存储一个 0 </p><p>这就会导致如果输出的时候有<strong>高位 0 的情况同样会输出</strong></p><p>所以在计算完成之后要有一个<strong>去除前置零</strong>的过程</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果 C 数组的长度为 1，则说明计算结果就为 0，那么就不需要去除 0</span></span><br><span class="line"><span class="comment">// 如果长度大于 1，则从数组的最后一位开始判断，如果是 0 的话，那么则说明高位为 0，需要去除前置 0</span></span><br><span class="line"><span class="comment">// 因为是逆序存储，计算结果的高位对应的下标也是数组的高位，所以要从后开始判断</span></span><br><span class="line"><span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) </span><br><span class="line">    C.<span class="built_in">pop_back</span>();</span><br></pre></td></tr></table></figure><div class="note danger no-icon flat"><p>例如：129 - 126 &#x3D; 3</p><p>在存储的过程中 A : [9, 2, 1] 、B : [6, 2, 1]</p><p>最终计算的结果为 C : [3, 0, 0]</p><p>在输出的过程中，是将结果数组中的每一位都输出，就会输出 <strong>003</strong> 为结果</p><p>为此，我们就需要做一个<strong>去除前置 0</strong> 的操作</p></div><h2 id="C-代码实现-1"><a href="#C-代码实现-1" class="headerlink" title="C++代码实现"></a>C++代码实现</h2><h3 id="详细注释版-1"><a href="#详细注释版-1" class="headerlink" title="详细注释版"></a>详细注释版</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较被减数和减数哪个数字更大</span></span><br><span class="line"><span class="comment">// 判断是否 A &gt;= B</span></span><br><span class="line"><span class="comment">// 如果成立，返回 true，否则，返回 false</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 首先比较两个数组的长度，长度更长的数组更大，如 123 和 89 ，明显 123 更大</span></span><br><span class="line">    <span class="keyword">if</span> (A.<span class="built_in">size</span>() != B.<span class="built_in">size</span>()) <span class="keyword">return</span> A.<span class="built_in">size</span>() &gt; B.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果两个数组长度相同的话，则比较每一位的大小</span></span><br><span class="line">    <span class="comment">// 因为在存储的时候是逆序存储的，所以高位在数组的末尾，所以此处要从数组的末尾开始比较</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- )</span><br><span class="line">        <span class="keyword">if</span> (A[i] != B[i])</span><br><span class="line">            <span class="keyword">return</span> A[i] &gt; B[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果上述代码还没有返回结果的话，说明两个数字大小相同</span></span><br><span class="line">    <span class="comment">// 大小相同的话符合 A &gt;= B 的情况，返回 true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sub</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// t 变量复用，同时记录借位情况和每一次对应位相减的结果</span></span><br><span class="line">    <span class="comment">// 最开始没有借位，初始化为 0</span></span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过 cmp 函数可以保证 A 是大于等于 B 的，所以此处循环范围只需要【i &lt; A.size()】 即可</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果有借位，首先要将被减数减去借位</span></span><br><span class="line">        <span class="comment">// 此时 t 记录的就是减去借位后的被减数</span></span><br><span class="line">        t = A[i] - t;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 模拟被减数减去减数的过程</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) t -= B[i];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 此处 【(t + 10) % 10】 是将被减数大于减数和被减数小于减数的两种情况都合并表示了</span></span><br><span class="line">        <span class="comment">// 如果被减数大于等于减数，则计算得到的 t 为正数，那么通过上式计算仍然为 t </span></span><br><span class="line">        <span class="comment">// 如果被减数小于减数，则计算的 t 为负数，则模拟了借位后 【t + 10 - B】 的过程</span></span><br><span class="line">        <span class="comment">// 通过上式计算的结果为 t + 10</span></span><br><span class="line">        C.<span class="built_in">push_back</span>((t + <span class="number">10</span>) % <span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 记录是否借位，如果此时 t 为负数，则说明被减数小于减数，那么则需要借位</span></span><br><span class="line">        <span class="comment">// 此处将 t 置为 1，在下次循环的过程中可以减去借位</span></span><br><span class="line">        <span class="keyword">if</span> (t &lt; <span class="number">0</span>) t = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 反之如果此处 t &gt;= 0，那么则说明不需要借位，t 为 0 即可</span></span><br><span class="line">        <span class="keyword">else</span> t = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因为计算得到的结果是存储到数组中的，所以可能会导致某些位结果为 0</span></span><br><span class="line">    <span class="comment">// 如果高位计算为 0 则不需要输出，该操作就是去除前置 0 的过程</span></span><br><span class="line">    <span class="comment">// 如果 C 数组的长度为 1，则说明计算结果就为 0，那么就不需要去除 0</span></span><br><span class="line">    <span class="comment">// 如果长度大于 1，则从数组的最后一位开始判断，如果是 0 的话，那么则说明高位为 0，需要去除前置 0</span></span><br><span class="line">    <span class="comment">// 例如 129 - 126，计算得到的结果在数组中表示为[3, 0, 0]，所以需要从最后一位开始去除前置 0</span></span><br><span class="line">    <span class="comment">// 如果不去除前置 0 的话，那么输出结果会是 003</span></span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) </span><br><span class="line">        C.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 首先将被减数和减数都用字符串来表示，因为精度过大，所以使用常规的整形无法存储</span></span><br><span class="line">    <span class="comment">// 字符串每个字符占用一个字节，可以存储高精度大数</span></span><br><span class="line">    string a, b;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A, B;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将被减数和减数逆序存储到数组之中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = b.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) B.<span class="built_in">push_back</span>(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断 A, B 两个数的大小</span></span><br><span class="line">    <span class="comment">// 如果返回 ture，直接计算 A - B 即可</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">cmp</span>(A, B)) C = <span class="built_in">sub</span>(A, B);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 否则，则需要通过计算 -(B - A) 来得到计算结果</span></span><br><span class="line">    <span class="comment">// 代码表示的话就先输出一个负号，然后计算 B — A 的结果输出就好</span></span><br><span class="line">    <span class="keyword">else</span> C = <span class="built_in">sub</span>(B, A), cout &lt;&lt; <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因为存储时为逆向存储，所以输出的过程也需要逆向输出才可以还原本来的顺序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) cout &lt;&lt; C[i];</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="无注释版-1"><a href="#无注释版-1" class="headerlink" title="无注释版"></a>无注释版</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (A.<span class="built_in">size</span>() != B.<span class="built_in">size</span>()) <span class="keyword">return</span> A.<span class="built_in">size</span>() &gt; B.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- )</span><br><span class="line">        <span class="keyword">if</span> (A[i] != B[i])</span><br><span class="line">            <span class="keyword">return</span> A[i] &gt; B[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sub</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        t = A[i] - t;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) </span><br><span class="line">            t -= B[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>((t + <span class="number">10</span>) % <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span> (t &lt; <span class="number">0</span>) </span><br><span class="line">            t = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            t = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) </span><br><span class="line">        C.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string a, b;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A, B;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = b.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) B.<span class="built_in">push_back</span>(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">cmp</span>(A, B)) </span><br><span class="line">        C = <span class="built_in">sub</span>(A, B);</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        C = <span class="built_in">sub</span>(B, A), cout &lt;&lt; <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) </span><br><span class="line">        cout &lt;&lt; C[i];</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="高精度乘法"><a href="#高精度乘法" class="headerlink" title="高精度乘法"></a>高精度乘法</h1><h2 id="实现思路详解-2"><a href="#实现思路详解-2" class="headerlink" title="实现思路详解"></a>实现思路详解</h2><h3 id="数据存储-2"><a href="#数据存储-2" class="headerlink" title="数据存储"></a>数据存储</h3><div class="note success no-icon flat"><p>注意乘法的运算是一个<strong>高精度数</strong>乘以一个<strong>低精度数</strong></p><p>所以在存储的过程中，要将<strong>高精度数</strong>使用<strong>数组</strong>逆序按位存储，<strong>低精度数</strong>直接定义为<strong>整型</strong>即可。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">string a;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用数组来按位逆序存储高精度数</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; A;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br></pre></td></tr></table></figure><div class="note info flat"><p>两个高精度数相乘的模拟过程太过繁琐，感兴趣可以自己研究，noi考试不会涉及。</p></div><h3 id="模拟计算过程-2"><a href="#模拟计算过程-2" class="headerlink" title="模拟计算过程"></a>模拟计算过程</h3><div class="note success no-icon flat"><p>注意乘法的运算是一个<strong>高精度数</strong>乘以一个<strong>低精度数</strong></p><p>在乘法的模拟过程中，与平时手算的过程会有一点点区别</p><p>在平时手动列竖式的过程中，是每一位相乘，最后相加求积</p><p>而在代码模拟过程中，我们要<strong>将低精度的数看做整体</strong>来进行运算，<strong>不需要逐位相乘</strong>进行计算</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || t; i ++ )</span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">// 将低精度数 b 看做整体进行计算</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; A.<span class="built_in">size</span>()) t += A[i] * b;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 结果数组中存储的是每一次对应为相乘所得的结果 % 10的余数</span></span><br><span class="line">    C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 此处 t 变量记录进位情况，每次的进位是 t / 10 取整得到的结果</span></span><br><span class="line">    t /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note danger no-icon flat"><p>例如：123*12</p><p>我们要将 12 看做一个整体来计算</p><p>即第一步要计算3 * 12，下一步计算 2 * 12，最后计算 1 * 12</p><p>然后每次计算过程将计算 <strong>结果%10</strong> 作为当前位计算的 <strong>结果</strong> 存储到 C 数组中，将 计算 <strong>结果 &#x2F; 10</strong> 作为 <strong>进位</strong> 继续下一次计算</p></div><div class="note primary flat"><p>img【模拟123 * 12 整体相乘记录余数和除数】</p></div><h3 id="处理前置零-1"><a href="#处理前置零-1" class="headerlink" title="处理前置零"></a>处理前置零</h3><div class="note success no-icon flat"><p>当<strong>低精度数为 0</strong> 时，计算结果为 0</p><p>但是在代码实现的过程中，结果是存储到<strong>数组</strong>之中的</p><p>所以会导致数组的<strong>每一位都为 0</strong> ，输出时会输出 <strong>len(A) 个 0</strong></p><p>为了避免这种现象，所以要在模拟结束后进行<strong>去除前置零</strong>的操作</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果 b = 0 的话，那么数组中存储的所有数据均为 0，即结果为 0</span></span><br><span class="line"><span class="comment">// 但是此处我们是使用数组存储，所以输出会输出 len(A) 个 0</span></span><br><span class="line"><span class="comment">// 所以此处应该去除前置 0，只保留一个即可</span></span><br><span class="line"><span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) </span><br><span class="line">    C.<span class="built_in">pop_back</span>();</span><br></pre></td></tr></table></figure><div class="note info flat"><p>除去上述去除前置零的方法，还有一种更为简便的方法，即在输入之后<strong>直接判断 b 是否为 0</strong> 即可</p></div><h2 id="C-代码实现-2"><a href="#C-代码实现-2" class="headerlink" title="C++代码实现"></a>C++代码实现</h2><h3 id="详细注释版-2"><a href="#详细注释版-2" class="headerlink" title="详细注释版"></a>详细注释版</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mul</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// t 变量复用</span></span><br><span class="line">    <span class="comment">// 1、记录每一位相乘计算结果</span></span><br><span class="line">    <span class="comment">// 2、记录进位情况</span></span><br><span class="line">    <span class="comment">// 最开始进位为 0 ，所以将 t 初始化为 0</span></span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// A 为高精度数，所以循环次数以 A 的长度为限制</span></span><br><span class="line">    <span class="comment">// 同时为了保证如果计算结果有 len(A) + 1 位，所以循环次数还要以 t 的存在情况为限制</span></span><br><span class="line">    <span class="comment">// 例如 10 * 10 = 100</span></span><br><span class="line">    <span class="comment">// 计算结果为 3 为，A 为 2 位</span></span><br><span class="line">    <span class="comment">// 如果仅仅以 A 的位数为限制的话，会导致最终的计算结果错误</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || t; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 将低精度数 b 看做整体进行计算</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; A.<span class="built_in">size</span>()) t += A[i] * b;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 结果数组中存储的是每一次对应为相乘所得的结果 % 10的余数</span></span><br><span class="line">        C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 此处 t 变量记录进位情况，每次的进位是 t / 10 取整得到的结果</span></span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 b = 0 的话，那么数组中存储的所有数据均为 0，即结果为 0</span></span><br><span class="line">    <span class="comment">// 但是此处我们是使用数组存储，所以输出会输出 len(A) 个 0</span></span><br><span class="line">    <span class="comment">// 所以此处应该去除前置 0，只保留一个即可</span></span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 高精度乘法是高精度数 * 低精度数</span></span><br><span class="line">    <span class="comment">// 所以两个数一个用字符串定义，之后按位逆序存储到数组之中</span></span><br><span class="line">    <span class="comment">// 另一个数直接定义为整型即可</span></span><br><span class="line">    string a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用数组来按位逆序存储高精度数</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> C = <span class="built_in">mul</span>(A, b);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 起始存储为逆序存储，所以此处要将将结果逆序输出</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, C[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="无注释版-2"><a href="#无注释版-2" class="headerlink" title="无注释版"></a>无注释版</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mul</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || t; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; A.<span class="built_in">size</span>()) </span><br><span class="line">            t += A[i] * b;</span><br><span class="line">        C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) </span><br><span class="line">        C.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    string a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) </span><br><span class="line">        A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> C = <span class="built_in">mul</span>(A, b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, C[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="高精度除法"><a href="#高精度除法" class="headerlink" title="高精度除法"></a>高精度除法</h1><h2 id="实现思路详解-3"><a href="#实现思路详解-3" class="headerlink" title="实现思路详解"></a>实现思路详解</h2><h3 id="数据存储-3"><a href="#数据存储-3" class="headerlink" title="数据存储"></a>数据存储</h3><div class="note success no-icon flat"><p>注意乘法的运算是一个<strong>高精度数</strong>除以一个<strong>低精度数</strong></p><p>所以在存储的过程中，要将<strong>高精度数</strong>使用<strong>数组</strong>逆序按位存储，<strong>低精度数</strong>直接定义为<strong>整型</strong>即可。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">string a;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; A;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="comment">// 用数组来按位逆序存储高精度数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- )  A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="模拟计算过程-3"><a href="#模拟计算过程-3" class="headerlink" title="模拟计算过程"></a>模拟计算过程</h3><div class="note success no-icon flat"><p>与其他几个运算不同的是，<strong>除法</strong>的运算是从<strong>高位</strong>开始计算的，<strong>其他的运算</strong>是从**低位[个位]**开始计算的。</p><p>因为<strong>存储到数组中时是逆序存储</strong>的，所以在除法<strong>运算的时候也要逆序读取</strong>进行运算。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 除法与其他运算不同的是除法的运算是从最高位开始运算的</span></span><br><span class="line"><span class="comment">// 其他的运算是从最低位开始进行运算的</span></span><br><span class="line"><span class="comment">// 所以此处要逆序读取数组中的每一个数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- )</span><br><span class="line">&#123;</span><br><span class="line">    ……;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note success no-icon flat"><p>在除法运算中，每一位计算的<strong>被除数</strong>均为<strong>上一位计算所得的余数 * 10 + 当前位</strong>所得。</p><p>每一位计算所得的<strong>结果</strong>为运算所得的<strong>被除数 &#x2F; 除数取整</strong>的结果。</p><p>每一位计算的<strong>余数</strong>是运算所得的<strong>被除数 % 除数取余</strong>的结果</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在手动模拟除法竖式的过程中</span></span><br><span class="line"><span class="comment">// 每次计算是通过每一次上一位计算所得的余数 * 10 + 当前位作为下一次运算的被除数</span></span><br><span class="line">r = r * <span class="number">10</span> + A[i];</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 每一位要存储的结果是运算所得的被除数 / 除数取整的结果</span></span><br><span class="line">C.<span class="built_in">push_back</span>(r / b);</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 每一位计算的余数是运算所得的被除数 % 除数取余的结果</span></span><br><span class="line">r %= b;</span><br></pre></td></tr></table></figure><div class="note danger no-icon flat"><p>例如：1234 &#x2F; 11</p><p><strong>余数初始化为 0</strong></p><table><thead><tr><th align="center">当前位</th><th align="center">当前位被除数</th><th align="center">当前位计算结果</th><th align="center">当前位计算余数</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">1</td><td align="center">0</td><td align="center">1</td></tr><tr><td align="center">2</td><td align="center">12</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">3</td><td align="center">13</td><td align="center">1</td><td align="center">2</td></tr><tr><td align="center">4</td><td align="center">14</td><td align="center">2</td><td align="center">2</td></tr></tbody></table><p><strong>当前位被除数：</strong>  上一位计算所得的余数 * 10 + 当前位</p><p><strong>当前位计算结果：</strong> 当前位被除数 &#x2F; 除数取整</p><p><strong>当前位计算余数：</strong> 当前位被除数 % 除数取余</p></div><div class="note primary flat"><p>img【1234  &#x2F; 11 的过程】</p></div><h3 id="处理前置零-2"><a href="#处理前置零-2" class="headerlink" title="处理前置零"></a>处理前置零</h3><div class="note success no-icon flat"><p>通过上面的 1234  &#x2F; 11 的例子，我们可以发现高精度除法同样存在<strong>高位为 0</strong> 的情况。</p><p>所以我们同样要在模拟过程结束之后<strong>对前置零进行处理</strong>。</p><p>但是与其他运算不同的是，高精度除法的模拟过程是<strong>从高位开始计算</strong>的。</p><p>所以结果数组中存储的每一位的<strong>结果是正序的</strong>。</p><p>所以在处理前置零之前要<strong>将结果数组翻转之后再进行处理</strong>。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将结果数组进行翻转，调用 reverse 函数</span></span><br><span class="line"><span class="built_in">reverse</span>(C.<span class="built_in">begin</span>(), C.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理前置 0</span></span><br><span class="line"><span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) </span><br><span class="line">C.<span class="built_in">pop_back</span>();</span><br></pre></td></tr></table></figure><h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><div class="note info no-icon flat"><p>高精度除法除了最终计算的<strong>结果[商]<strong>，有可能还存在额外的</strong>余数</strong>。</p><p>所以在输出时要注意将余数也进行输出。</p><p>在函数调用的过程中，余数是<strong>通过地址进行调用</strong>的。</p><p>所以在模拟结束之后余数变量记录的就是<strong>最终的余数</strong>，无需再进行传递。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 起始存储为逆序存储，所以此处要将将结果逆序输出。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) </span><br><span class="line">    cout &lt;&lt; C[i];</span><br><span class="line"></span><br><span class="line"><span class="comment">// r 变量记录余数，在调用函数的过程中是将地址作为参数传递的。</span></span><br><span class="line"><span class="comment">// 所以在模拟结束后 r 变量记录的就是最终的余数。</span></span><br><span class="line">cout &lt;&lt; endl &lt;&lt; r &lt;&lt; endl;</span><br></pre></td></tr></table></figure><div class="note danger no-icon flat"><p>注意在模拟的过程中，不论除数是几位数，每次模拟<strong>都是从被除数的最高位</strong>开始的。</p><p>只不过在手动计算的过程中会自动使用<strong>和除数相同位数</strong>的被除数开始计算。</p><p>而在计算机模拟的过程中，如果<strong>除数为两位及以上</strong>，那么<strong>必定会存在前置零</strong>的情况。</p></div><div class="note info flat"><p>最终的输出结果要视<strong>题目而定</strong>，此处讲解只是为了保证输出的完整性。</p></div><h2 id="C-代码实现-3"><a href="#C-代码实现-3" class="headerlink" title="C++代码实现"></a>C++代码实现</h2><h3 id="详细注释版-3"><a href="#详细注释版-3" class="headerlink" title="详细注释版"></a>详细注释版</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">div</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> b, <span class="type">int</span> &amp;r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// r 变量用来记录每一位计算之后所得的余数</span></span><br><span class="line">    r = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 除法与其他运算不同的是除法的运算是从最高位开始运算的</span></span><br><span class="line">    <span class="comment">// 其他的运算是从最低位开始进行运算的</span></span><br><span class="line">    <span class="comment">// 所以此处要逆序读取数组中的每一个数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 在手动模拟除法竖式的过程中</span></span><br><span class="line">    <span class="comment">// 每次计算是通过每一次上一位计算所得的余数 * 10 + 当前位作为下一次运算的被除数</span></span><br><span class="line">        r = r * <span class="number">10</span> + A[i];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 每一位要存储的结果是运算所得的被除数 / 除数取整的结果</span></span><br><span class="line">        C.<span class="built_in">push_back</span>(r / b);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 每一位计算的余数是运算所得的被除数 % 除数取余的结果</span></span><br><span class="line">        r %= b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将结果数组进行翻转，调用 reverse 函数</span></span><br><span class="line">    <span class="built_in">reverse</span>(C.<span class="built_in">begin</span>(), C.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理前置 0</span></span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) </span><br><span class="line">        C.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 高精度除法是高精度数 / 低精度数</span></span><br><span class="line">    <span class="comment">// 所以两个数一个用字符串定义，之后按位逆序存储到数组之中</span></span><br><span class="line">    <span class="comment">// 另一个数直接定义为整型即可</span></span><br><span class="line">    string a;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) </span><br><span class="line">        A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 除法与其他运算不同的是除法的返回值除了商还有余数，此处用 r 变量来记录余数。</span></span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    <span class="keyword">auto</span> C = <span class="built_in">div</span>(A, b, r);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 起始存储为逆序存储，所以此处要将将结果逆序输出。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) </span><br><span class="line">        cout &lt;&lt; C[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// r 变量记录余数，在调用函数的过程中是将地址作为参数传递的。</span></span><br><span class="line">    <span class="comment">// 所以在模拟结束后 r 变量记录的就是最终的余数。</span></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; r &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="无注释版-3"><a href="#无注释版-3" class="headerlink" title="无注释版"></a>无注释版</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">div</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> b, <span class="type">int</span> &amp;r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- )</span><br><span class="line">    &#123;</span><br><span class="line">        r = r * <span class="number">10</span> + A[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>(r / b);</span><br><span class="line">        r %= b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(C.<span class="built_in">begin</span>(), C.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) </span><br><span class="line">        C.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string a;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> B;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; B;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) </span><br><span class="line">        A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    <span class="keyword">auto</span> C = <span class="built_in">div</span>(A, B, r);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) </span><br><span class="line">        cout &lt;&lt; C[i];</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; r &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1><div class="note warning flat"><p>在学习的过程中遇到任何的问题都可以评论到评论区，看到有价值的提问会记录到Q&amp;A之中！</p></div><div class="note danger flat"><p>auto 是什么意思？</p></div><div class="note success no-icon flat"><p>auto 关键字可以<strong>自动推导变量的类型</strong>，在使用过程中<strong>必须给定变量一个值</strong>才可以使用 auto</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> x = <span class="number">10</span>;    <span class="comment">// x的类型将被推导为int</span></span><br><span class="line"><span class="keyword">auto</span> y = <span class="number">3.14</span>;  <span class="comment">// y的类型将被推导为double</span></span><br><span class="line"><span class="keyword">auto</span> z = <span class="string">&quot;hello&quot;</span>;   <span class="comment">// z的类型将被推导为const char*</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> a;<span class="comment">// 不给定初始值会报错。</span></span><br></pre></td></tr></table></figure><p>在本文中，auto 所接收的是函数返回值，类型自动识别为 <strong>vector&lt; int &gt;</strong></p></div>]]></content>
      
      
      <categories>
          
          <category> 信奥赛 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> C++ 基础算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="now"><a href="#now" class="headerlink" title="now"></a>now</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h1 id="一些网站"><a href="#一些网站" class="headerlink" title="一些网站"></a>一些网站</h1><blockquote><p>公布呼和浩特市校外培训机构审批权责及流程</p><p><a href="http://jyj.huhhot.gov.cn/zwgk/tzgg/202301/t20230130_1473376.html">http://jyj.huhhot.gov.cn/zwgk/tzgg/202301/t20230130_1473376.html</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
