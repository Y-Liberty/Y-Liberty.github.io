<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>呼和浩特中学英才计划招生政策</title>
      <link href="/Talent_Program/"/>
      <url>/Talent_Program/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note warning flat"><p>本文记录各种呼和浩特市各个有<strong>科技特长生政策的中学</strong>的政策解读。</p></div><div class="note warning flat"><p>在阅读过程中有任何问题都可以发布到评论区，有价值的问题将会放到文章末尾Q&amp;A之中！</p></div><h1 id="呼和浩特市第二中学"><a href="#呼和浩特市第二中学" class="headerlink" title="呼和浩特市第二中学"></a>呼和浩特市第二中学</h1><h2 id="官方链接"><a href="#官方链接" class="headerlink" title="官方链接"></a>官方链接</h2><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://mp.weixin.qq.com/s/u95Xf1sBvz5rhMxQsHCFYg">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">呼和浩特市第二中学</div>            <div class="tag-link-sitename">英才计划</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="报考条件"><a href="#报考条件" class="headerlink" title="报考条件"></a>报考条件</h2><h3 id="数学类"><a href="#数学类" class="headerlink" title="数学类"></a>数学类</h3><div class="note success no-icon flat"><p>呼市2024年初三一模数学单科成绩在100分（含100）以上，或初中就读学校推荐（通过二维码上传）。</p></div><h3 id="文史类"><a href="#文史类" class="headerlink" title="文史类"></a>文史类</h3><div class="note success no-icon flat"><p>同时满足下列条件：</p><p>（1）2024年初三一模考试中，道德与法治、语文、历史、英语中任意一科的单科排名在全市前100名。（道德与法治58.5分，语文99.5分，历史39.5分，英语114分）</p><p>（2）2024年初三一模考试的道德与法治、语文、历史、英语四科总分（合计340分）在300分（含）以上。</p></div><h3 id="信息学类"><a href="#信息学类" class="headerlink" title="信息学类"></a>信息学类</h3><div class="note success no-icon flat"><p>满足下列条件之一：</p><p>（1）<strong>CCF CSP-S</strong> 2023第二轮成绩达到<strong>100分</strong>以上。</p><p>（2）<strong>CCF CSP-J</strong> 2023第二轮成绩达到<strong>200分</strong>以上。</p></div><h2 id="面试范围"><a href="#面试范围" class="headerlink" title="面试范围"></a>面试范围</h2><h3 id="数学类-1"><a href="#数学类-1" class="headerlink" title="数学类"></a>数学类</h3><div class="note success no-icon flat"><p>初中数学所学知识+拓展知识。</p></div><h3 id="文史类-1"><a href="#文史类-1" class="headerlink" title="文史类"></a>文史类</h3><div class="note success no-icon flat"><p>文科综合素养测试，道德与法治、语文、历史、英语、地理、艺术（音乐、美术）学科综合知识与能力。</p></div><h3 id="信息学类-1"><a href="#信息学类-1" class="headerlink" title="信息学类"></a>信息学类</h3><div class="note success no-icon flat"><p>2023<strong>NOI大纲</strong>入门级与提高级相关知识点。</p></div><h1 id="中央民族大学附属中学"><a href="#中央民族大学附属中学" class="headerlink" title="中央民族大学附属中学"></a>中央民族大学附属中学</h1><h2 id="官方链接-1"><a href="#官方链接-1" class="headerlink" title="官方链接"></a>官方链接</h2><p><strong>科技特长生</strong></p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://mp.weixin.qq.com/s/jn7p9PVyZOUboszdz5qZzQ">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">中央民族大学附属中学</div>            <div class="tag-link-sitename">科技特长生</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p><strong>英才计划</strong></p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://mp.weixin.qq.com/s/zFMrFyUP6sDCAAYatqAlcg">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">中央民族大学附属中学</div>            <div class="tag-link-sitename">英才计划</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="报考条件-1"><a href="#报考条件-1" class="headerlink" title="报考条件"></a>报考条件</h2><h3 id="科技特长生"><a href="#科技特长生" class="headerlink" title="科技特长生"></a>科技特长生</h3><div class="note success no-icon flat"><ol><li>面向呼和浩特市招收符合科学素养特长潜质的拔尖创新后备人才，符合中央民族大学附属中学呼和浩特分校“科技特长生”条件的学生。</li><li>科学素养优秀。初中阶段科学素养突出，科研兴趣强烈、身心素质优良、发展潜能较大，具有较强的创新能力和动手能力。</li><li>有较强的基础学习力。呼和浩特市中考<strong>一模</strong>考试裸分成绩<strong>420分</strong>以上。科技创新能力突出者可适度放宽对一模成绩的要求。</li><li>初中阶段荣获<strong>国家级、自治区级</strong>科技创新类比赛<strong>三等奖</strong>或<strong>市级一等奖</strong>以上，科技素养测试成绩突出。</li></ol></div><h3 id="英才计划"><a href="#英才计划" class="headerlink" title="英才计划"></a>英才计划</h3><div class="note success no-icon flat"><ol><li>符合在呼和浩特市就读高中资格、具有创新潜质的初三应届毕业生。</li><li>具有强烈的好奇心和探究欲；对物理、数学、化学、生物、计算机等某一学科具有浓厚兴趣。</li><li>2024年中考<strong>一模考试成绩裸分450分</strong>以上，或<strong>数学、物理、化学三科总分200分以上</strong>，或对以上三门学科中任一学科兴趣浓厚，具有较强的自学能力并能够掌握一定的高中、大学专业技能的学生（在数学、物理、化学、生物、计算机五科中某一学科有特殊能力的学生，经毕业学校推荐可适当放宽）。</li></ol></div><h2 id="面试范围-1"><a href="#面试范围-1" class="headerlink" title="面试范围"></a>面试范围</h2><h3 id="科技特长生-1"><a href="#科技特长生-1" class="headerlink" title="科技特长生"></a>科技特长生</h3><div class="note success no-icon flat"><p>综合素质考核：考试内容为<strong>语文、数学、英语、物理、化学学科知识</strong>及拓展知识（分值为200分）</p></div><div class="note success no-icon flat"><p><strong>综合素质考核前15</strong>（按照录取人数1：3比例）名的同学参加创新实验考核，考查内容以<strong>实验操作能力</strong>为主</p></div><h3 id="英才计划-1"><a href="#英才计划-1" class="headerlink" title="英才计划"></a>英才计划</h3><div class="note success no-icon flat"><p>考试内容为<strong>数学、物理、化学</strong>学科的初中知识及<strong>拓展知识</strong>（分值为200分）</p></div><h2 id="培养方式"><a href="#培养方式" class="headerlink" title="培养方式"></a>培养方式</h2><h3 id="科技特长生-2"><a href="#科技特长生-2" class="headerlink" title="科技特长生"></a>科技特长生</h3><div class="note success no-icon flat"><p>就读期间，安排<strong>知名高校教授</strong>和<strong>本校985高校优秀毕业生老师</strong>担任<strong>导师</strong>，<strong>每年享受</strong>由中央民大附中共美发展基金提供的“科技特长生资助金”<strong>10000 元</strong>。</p><p><strong>科技特长生</strong>共招收<strong>5人</strong>。</p></div><h3 id="英才计划-2"><a href="#英才计划-2" class="headerlink" title="英才计划"></a>英才计划</h3><div class="note success no-icon flat"><ol><li>“英才计划”学生单独编班，30人小班教学，实行双导师个性化培养方式，每名学生安排一位本校985高校毕业优秀教师和一位知名大学教授担任研究性学习导师。<strong>高一高二开全开齐国家统一高考科目</strong>，同时对接丘成桐数学科学领军人才计划、物理学科卓越人才计划、物理人才“攀登计划”、少年创新实验计划，组织开设培优竞赛课程。<strong>高三对接国家强基计划</strong>，进行普通高考复课。</li><li>加强学科（实验）实践，深化课程改革。运用脑科学最新研究成果和课程整合技术，进行学段学科融合全学程课程设计。学校配有前沿科技博士实验室，组建有由<strong>特级教师和清华、北大、中科大等985高校毕业生组成的30人竞赛专业教学团队</strong>。课堂教学采用启发式、探究式、项目式教学，实施高阶思维课堂，着力培养学生高阶思维品质和自主学习力。</li><li>入选“英才计划”单独招生的考生，享受“中央民族大学附属中学北京共美教育发展基金会”等提供的“创新人才培养计划助学金”，每生<strong>每学年资助20000-50000元</strong>，支持学生学习高水平竞赛课程、国家实验室课题研究及学科实践活动。</li><li>强化学生人文素养，加强体育、艺术素质培育，关注学生身心健康，促进学生全面发展。体育课设置游泳、网球、飞盘、羽毛球等多个分项课程供学生选择。班级配备专职心理健康教师开展认知训练，构建全面发展创新育人体系。</li><li><strong>英才计划</strong>共招收<strong>30人</strong>。</li></ol></div><h1 id="呼和浩特市第一中学"><a href="#呼和浩特市第一中学" class="headerlink" title="呼和浩特市第一中学"></a>呼和浩特市第一中学</h1><h2 id="官方链接-2"><a href="#官方链接-2" class="headerlink" title="官方链接"></a>官方链接</h2><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://mp.weixin.qq.com/s/aqcXVvTxCnazpyKFYQ9a8w">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">呼和浩特市第一中学</div>            <div class="tag-link-sitename">英才计划</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="报考条件-2"><a href="#报考条件-2" class="headerlink" title="报考条件"></a>报考条件</h2><div class="note success no-icon flat"><p>身心健康，品行端正，综合素质全面，在<strong>数学、物理、化学、生物、信息技术</strong>有突出学科特长、创新精神和发展潜质的2024年呼和浩特市市区在籍应届初中优秀毕业生。</p></div><h2 id="面试范围-2"><a href="#面试范围-2" class="headerlink" title="面试范围"></a>面试范围</h2><div class="note success no-icon flat"><p>笔试科目为数理素养测试、语言能力测试。</p><ol><li>其中数理素养测试分值200分，主要考查学生数学、物理素养及能力；</li><li>语言能力测试分值200分，主要考查学生英语、语文的语言理解能力。</li></ol></div><h2 id="培养方式-1"><a href="#培养方式-1" class="headerlink" title="培养方式"></a>培养方式</h2><div class="note success no-icon flat"><p>经过面试择优录取30名考生，学校与通过面试的考生及监护人签订《英才计划录取协议书》，发放录取通知书。</p><p>学生<strong>不再参加中考</strong>，需<strong>参加 “英才计划”专属研学营</strong>。</p></div><div class="note success no-icon flat"><p>学生入学后直接编入我校2024级“英才班”，全学科<strong>配备顶级名师</strong>，按物理选课方向实行导师制培养，同时享有参加<strong>首都知名高校、中学交流学习的优先权</strong>，参加自治区“英才计划”优先权，参加<strong>奥赛强基培优课程培训优先权</strong>，参加<strong>课程研学优先权</strong>，<strong>清北及其他国内名校“强基计划”优先推荐权</strong>以及获得<strong>各类奖学金优先权</strong>等。</p></div><h1 id="内蒙古师范大学附属中学"><a href="#内蒙古师范大学附属中学" class="headerlink" title="内蒙古师范大学附属中学"></a>内蒙古师范大学附属中学</h1><h2 id="官方链接-3"><a href="#官方链接-3" class="headerlink" title="官方链接"></a>官方链接</h2><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://mp.weixin.qq.com/s/enz9bbmA3vkQygAoCnmloQ">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">内蒙古师范大学附属中学</div>            <div class="tag-link-sitename">英才计划</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="报考条件-3"><a href="#报考条件-3" class="headerlink" title="报考条件"></a>报考条件</h2><div class="note success no-icon flat"><p>报考学生需同时满足以下两个条件：</p><ol><li>呼和浩特市市区内品德优良、综合素质全面的应届初三毕业生，对<strong>数学、物理</strong>等学科有浓厚兴趣及一定特长，且具备发展潜能；</li><li>呼市<strong>一模总成绩裸分470分以上（含470分）</strong>；或<strong>数学单科成绩达到100分以上（含100分）</strong>。</li></ol></div><h2 id="面试范围-3"><a href="#面试范围-3" class="headerlink" title="面试范围"></a>面试范围</h2><div class="note success no-icon flat"><p>我校自行组织命题、考试和阅卷。笔试内容为<strong>初中数学知识和高中理科拓展知识</strong>。</p></div><h2 id="培养方式-2"><a href="#培养方式-2" class="headerlink" title="培养方式"></a>培养方式</h2><div class="note success no-icon flat"><ol><li>通过高中“英才计划”招生录取的学生，直接<strong>编入我校“英才计划”基地班</strong>，实施专门培养，分配导师，<strong>“一人一策”</strong>，因材施教。</li><li>英才基地班实施“双导师、双基地”制度，聘任<strong>内蒙古大学</strong>和<strong>内蒙古师范大学的教授、博导等为导师</strong>，每周安排固定课程。同时，学生利用周末、寒暑假等<strong>走进大学和科研院所</strong>，在导师指导下开展学习与研究等。</li><li>加强数学等学科竞赛课程，以提高学生的学习能力，拓展学生的学科视野。同时<strong>对接高校强基计划的选拔要求</strong>，把学科竞赛与强基选拔有机结合。一方面，细化竞赛教学计划，确保培训达到专业组要求。另一方面，<strong>聘请校外教练进驻</strong>，与校内教练分工合作，提高竞赛教学的效率，提升竞赛教学的效果。同时，学校将和区外优质高中建立长期稳健的合作机制，共同培养“英才计划”尖端人才。</li></ol></div><h1 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英才计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 数组</title>
      <link href="/CPP_array/"/>
      <url>/CPP_array/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note warning flat"><p>本文记录 C++ 相关的<strong>数组</strong>的相关知识。</p></div><div class="note warning flat"><p>在阅读过程中有任何问题都可以发布到评论区，有价值的问题将会放到文章末尾Q&amp;A之中！</p></div><h1 id="什么是编程"><a href="#什么是编程" class="headerlink" title="什么是编程"></a>什么是编程</h1><div class="note success no-icon flat"><p><strong>编程</strong>是编写程序代码的中文简称，就是<strong>让计算机代码解决某个问题</strong>，对某个计算体系规定一定的运算方式，使计算体系按照该计算方式运行，并最终得到相应结果的过程。</p><p>通俗来讲，编程就是<strong>人类和计算机沟通的一种语言</strong>。</p></div><h1 id="C-语言基本框架"><a href="#C-语言基本框架" class="headerlink" title="C++语言基本框架"></a>C++语言基本框架</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span><span class="comment">// 头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;<span class="comment">// 使用 std 命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;<span class="comment">// 函数入口【主函数】</span></span><br><span class="line">    ……;<span class="comment">// 程序编写区</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">// 返回值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><div class="note success no-icon flat"><p>C++ 语言中定义了一部分<strong>头文件</strong>，在这些头文件之中包含一部分已有的<strong>函数【功能】</strong>，可以在编写程序的过程中<strong>直接调用</strong>即可。</p></div><h3 id="程序内片段"><a href="#程序内片段" class="headerlink" title="程序内片段"></a>程序内片段</h3><div class="note success no-icon flat"><p>在上述代码片段中，首行代码就是调用头文件的过程，格式为：<b>#include &lt;头文件名&gt;</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>&lt;iostream&gt;</strong> 头文件中内置了基本的<strong>输入、输出、换行</strong>函数：<strong>cin、cout、endl</strong></p></div><div class="note danger no-icon flat"><p>学过 <strong>Python</strong> 的同学，在 <strong>Python</strong> 学习的过程中也需要<strong>调用库</strong>，<strong>C++ 中头文件</strong>的作用是和 <strong>Python 中库</strong>的作用是类似的。</p></div><h3 id="常用头文件"><a href="#常用头文件" class="headerlink" title="常用头文件"></a>常用头文件</h3><div class="note success no-icon flat"><p>在 C++ 中，<strong>常用的头文件</strong>有如下一些：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span><span class="comment">// 内置输入输出流函数：cin、cout、endl等等</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span><span class="comment">// 内置格式化输入输出函数：scanf，printf等等</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math&gt;</span><span class="comment">// 内置一些常用的数学符号：根号 sqrt、幂 pow、绝对值 abs 等等</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span><span class="comment">// 内置一些简单算法：排序 sort、取最大值 max、最小值 min 等等</span></span></span><br></pre></td></tr></table></figure></div><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><div class="note success no-icon flat"><p><strong>命名空间</strong>是 C++ 中一个相对新的概念。其主要作用是为了<strong>避免命名冲突</strong>。</p><p>在 C++ 运行的过程中，为了<strong>避免变量的命名与关键词冲突</strong>，会调用命名空间来<strong>限制冲突</strong>，可以更好的编写和维护代码。</p></div><h3 id="程序内片段-1"><a href="#程序内片段-1" class="headerlink" title="程序内片段"></a>程序内片段</h3><div class="note success no-icon flat"><p>在上述代码片段中，第二行代码就是调用头文件的过程，格式为：<b>using namespace 命名空间名;</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br></pre></td></tr></table></figure><p>std 命名空间中包含基本的 <strong>cin cout endl</strong> 等等函数名。</p></div><div class="note danger no-icon flat"><p>可以尝试运行<strong>缺少调用命名空间</strong>的程序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span><span class="comment">// 头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;<span class="comment">// 函数入口【主函数】</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">// 返回值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行之后会发现 <strong>cout</strong> 和 <strong>endl</strong> 函数<strong>未被定义</strong>，同时<strong>提示调用命名空间</strong>。</p></div><h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><div class="note success no-icon flat"><p>调用命名空间有<strong>两种常用的方法</strong>。</p><p>第一种就是像上述代码片段中，直接在头文件之后使用 <strong>using namespace XXX;</strong> 进行调用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;<span class="comment">// 使用 std 命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种方法就是在使用函数时，在<strong>函数前加上该命名空间名</strong>，并且用 <strong>::</strong> 链接。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; std::endl;<span class="comment">// 直接程序内调用</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="主函数【程序入口】"><a href="#主函数【程序入口】" class="headerlink" title="主函数【程序入口】"></a>主函数【程序入口】</h2><div class="note success no-icon flat"><p><strong>主函数</strong>是 C++ 中必须要有的部分，必须以 <strong>main()</strong> 进行命名。</p><p>主函数是<strong>所有程序内容的入口</strong>，一段 C++ 程序就是从 <strong>main 函数</strong> 开始运行的。</p></div><div class="note danger no-icon flat"><p>主函数必须定义为 <strong>int 类型</strong>，同时在程序结束是<strong>返回值为 0【return 0;】</strong>。</p><p>对于<strong>函数类型</strong>的知识点，在之后的<strong>函数篇章</strong>内具体讲解。</p></div><h3 id="程序内片段-2"><a href="#程序内片段-2" class="headerlink" title="程序内片段"></a>程序内片段</h3><div class="note success no-icon flat"><p>在上述代码中，<strong>主函数</strong>片段如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ……;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="note danger no-icon flat"><p>任何函数都是通过<b>大括号 { }</b>来规定函数范围的。</p><p>学习过 Python 的同学，在 <strong>Python</strong> 中函数内容是通过<strong>缩进</strong>来规定函数范围的，在 <strong>C++</strong> 中所有的函数都是通过<strong>大括号</strong>来规定的。</p></div><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><div class="note success no-icon flat"><p>在 C++ 的函数运行过程中，<strong>返回值</strong>是标记程序<strong>是否正常结束</strong>的标志。</p><p>当<strong>返回值为 0</strong> 时，表示程序<strong>正常结束</strong>。</p><p>否则，当其<strong>为非 0 值</strong>时，表示程序<strong>出现错误</strong>。</p></div><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h3><div class="note success no-icon flat"><p>在 C++ 程序编写的过程中，要区分<strong>各种括号</strong>的区别。</p><blockquote><p><strong>&lt; &gt;</strong> 一般用于<strong>头文件的调用</strong>等等。</p><p><strong>{ }</strong> 一般用于判断、循环、函数的<strong>范围限制</strong>等等。</p><p><strong>[ ]</strong> 一般用于<strong>数组的定义</strong>等等。</p><p><strong>( )</strong> 一般用于<strong>运算</strong>、函数<strong>参数的传递</strong>等等。</p></blockquote></div><h3 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h3><div class="note success no-icon flat"><p>在 C++ 程序编写的过程中，要注意 <b> ; </b>的使用。</p><p>具体的使用规则在后续<strong>每个模块</strong>学习的过程中会详解。</p></div><h3 id="英文输入"><a href="#英文输入" class="headerlink" title="英文输入"></a>英文输入</h3><div class="note success no-icon flat"><p>在 C++ 程序编写的过程中，<strong>除注释外</strong>，所有的内容都要用<strong>英文输入</strong>，包括所有的符号。</p></div><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><div class="note success no-icon flat"><p>在 C++ 中，注释有两种写法。</p><ul><li>单行注释：使用 <code>//</code> 表明注释范围，<code>//</code> 后的内容为注释内容，不参与编译。</li><li>多行注释：使用<code>/* ... */</code>表明注释范围。</li></ul></div><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><div class="note success no-icon flat"><p>不管使用编程语言进行编程时，都需要用到<strong>各种变量</strong>来<strong>存储各种信息</strong>。变量保留的是它<strong>所存储的值的内存位置</strong>。</p><p>这意味着，当您<strong>创建一个变量</strong>时，就会在内存中<strong>保留一些空间</strong>。</p></div><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><div class="note success no-icon flat"><p>在 C++ 中，<strong>常用的数据类型</strong>有如下几种：</p></div><table><thead><tr><th align="left">类型</th><th align="left">关键字</th><th>示例</th></tr></thead><tbody><tr><td align="left">布尔型</td><td align="left">bool</td><td>true, false</td></tr><tr><td align="left">字符型</td><td align="left">char</td><td>‘a’, ‘A’, ‘ ‘, ‘\n’</td></tr><tr><td align="left">整型</td><td align="left">int</td><td>1, 3, 1231231,123</td></tr><tr><td align="left">浮点型</td><td align="left">float</td><td>1.2, 231.45, 1.235e2</td></tr><tr><td align="left">双浮点型</td><td align="left">double</td><td>1.2, 231.45, 1.235e2</td></tr><tr><td align="left">无类型</td><td align="left">void</td><td>-</td></tr></tbody></table><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><div class="note success no-icon flat"><p>在 C++ 中，<strong>不同的数据类型</strong>所能表示的<strong>数据范围也是不同</strong>的，这具体取决于不同的数据类型<strong>在内存中所占的位数</strong>。</p></div><div class="note danger no-icon flat"><p>在这里注意内存中单位的转化。</p><p><strong>1 位 &#x3D; 1 字节 &#x3D; 8 比特</strong></p><p><strong>【1 Byte &#x3D; 8 bit】</strong></p></div><table><thead><tr><th align="left">类型</th><th align="left">位</th><th align="left">范围</th></tr></thead><tbody><tr><td align="left">char</td><td align="left">1 个字节</td><td align="left">-128 到 127 或者 0 到 255</td></tr><tr><td align="left">int</td><td align="left">4 个字节</td><td align="left">-2147483648 到 2147483647 【-2^31 ~ 2^31 - 1】</td></tr><tr><td align="left">float</td><td align="left">4 个字节</td><td align="left">精度型占4个字节（32位）内存空间，+&#x2F;- 3.4e +&#x2F;- 38 (~7 个数字)</td></tr><tr><td align="left">double</td><td align="left">8 个字节</td><td align="left">双精度型占8 个字节（64位）内存空间，+&#x2F;- 1.7e +&#x2F;- 308 (~15 个数字)</td></tr></tbody></table><div class="note danger flat"><p>那这个范围是如何计算的呢？为什么负数范围比正数多一个呢？</p></div><div class="note success no-icon flat"><p>在计算机内部，数据都是以<strong>补码</strong>的形式存储到<strong>内存</strong>中的，每一种类型可以表示的<strong>范围都是不同的</strong>。</p></div><h4 id="原码，反码，补码"><a href="#原码，反码，补码" class="headerlink" title="原码，反码，补码"></a>原码，反码，补码</h4><div class="note success no-icon flat"><p>在计算机中，数据都是以<strong>二进制</strong>形式存储的，也就是都是以 <strong>01 序列</strong> 字符串存储的。</p><p>在此基础上，对于数据有三种不同的存储方式，也就是<strong>原码、反码和补码</strong>。</p><p>在编码过程中，用<strong>首位作为符号位</strong>，首位为 <strong>0 表示正数</strong>、首位为 <strong>1 表示负数</strong>。</p></div><div class="note success no-icon flat"><p>对于<strong>正数</strong>来说，原码、反码和补码的表示形式都是<strong>相同的</strong>。</p><p>对于<strong>负数</strong>来说：</p><p>反码是在原码的基础上，<strong>符号位不变，其他所有位取反</strong>得到的</p><p>补码是<strong>符号位不变，反码+1</strong> 得到的。</p></div><table><thead><tr><th align="center">十进制</th><th align="center">原码</th><th align="center">反码</th><th align="center">补码</th></tr></thead><tbody><tr><td align="center">90</td><td align="center">01011010</td><td align="center">01011010</td><td align="center">01011010</td></tr><tr><td align="center">-90</td><td align="center">11011010</td><td align="center">10100101</td><td align="center">10100110</td></tr></tbody></table><div class="note success no-icon flat"><p>因此，对于负数来说，可以<strong>全部都为 1</strong> 表示最大的负数</p><p>但是，对于正数来说，因为<strong>第一位为符号位</strong>，只能为 <strong>0</strong>，最大值仅为 <strong>01111111……</strong>，所以正数范围的最大值要 <strong>-1</strong></p></div><h2 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h2><div class="note success no-icon flat"><p>在 C++ 中，定义变量时要有固定的格式：<strong>变量类型 变量名 赋值;</strong></p><p>多个同类型变量定义时用 <strong>,</strong> 隔开。</p><p><strong>浮点数</strong>的赋值可以用<strong>科学计数法</strong>。</p></div><div class="note danger no-icon flat"><p>赋值可以省略。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义类型为整数型，变量名为 a 的变量，不赋值</span></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="comment">// 定义三个整数型变量，用逗号隔开，同时给 c 变量赋值，d 变量赋值为 c 变量的值</span></span><br><span class="line"><span class="type">int</span> b, c = <span class="number">10</span>, d = c;</span><br><span class="line"><span class="comment">// 定义三个双精度浮点数的变量</span></span><br><span class="line"><span class="type">double</span> e, f = <span class="number">1.2345</span>, g = <span class="number">1.23e4</span>;</span><br><span class="line"><span class="comment">// 定义一个字符型变量</span></span><br><span class="line"><span class="type">char</span> h;</span><br><span class="line"><span class="comment">// 定义一个布尔型变量</span></span><br><span class="line"><span class="type">bool</span> i;</span><br></pre></td></tr></table></figure><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><div class="note success no-icon flat"><p>变量处于<strong>不同的位置</strong>有着<strong>不同的效果</strong>，可以作用的<strong>范围也不同</strong>。该范围一般称为<strong>作用域</strong>。</p><p>在 C++ 中，变量常用的作用域有<strong>局部变量，全局变量，形式变量【形式参数】</strong></p></div><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><div class="note success no-icon flat"><p>在函数或一个代码块内部声明的变量，称为<strong>局部变量</strong>。</p><p>通俗来讲，在一个 <strong>{ } 内部定义的变量</strong>就被称为局部变量，其作用域也<strong>仅限于该 { } 内部</strong>。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// x 作用域为整个 main 函数内部</span></span><br><span class="line">    <span class="type">int</span> x = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &gt;= <span class="number">10</span>)&#123;</span><br><span class="line">        <span class="comment">// y 作用域为 if 函数内部</span></span><br><span class="line">        <span class="type">int</span> y = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;</span><br><span class="line">        <span class="comment">// z 作用域为 for 函数内部</span></span><br><span class="line">        <span class="type">int</span> z = <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; z &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note danger no-icon flat"><p>运行上述代码，x 可以正常输出，y 和 z 会报错。</p></div><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><div class="note success no-icon flat"><p>在所有函数外部声明的变量，称为<strong>全局变量</strong>。</p><p>一般来说，全局变量直接<strong>定义到头文件和命名空间下方</strong>。</p><p>全局变量在<strong>任何一个函数</strong>中都可以使用。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 全局变量声明</span></span><br><span class="line"><span class="type">int</span> g;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 局部变量声明</span></span><br><span class="line">  <span class="type">int</span> a, b;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 实际初始化</span></span><br><span class="line">  a = <span class="number">10</span>;</span><br><span class="line">  b = <span class="number">20</span>;</span><br><span class="line">  g = a + b;</span><br><span class="line"> </span><br><span class="line">  cout &lt;&lt; g &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note danger no-icon flat"><p>在程序中，局部变量和全局变量的<strong>名称可以相同</strong>，但是在函数内，<strong>局部变量的值会覆盖全局变量的值</strong>。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 全局变量声明</span></span><br><span class="line"><span class="type">int</span> g = <span class="number">20</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 局部变量声明</span></span><br><span class="line">  <span class="type">int</span> g = <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line">  cout &lt;&lt; g &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="形式变量【形式参数】"><a href="#形式变量【形式参数】" class="headerlink" title="形式变量【形式参数】"></a>形式变量【形式参数】</h3><div class="note success no-icon flat"><p>在函数参数的定义中声明的变量，称为<strong>形式参数</strong>。</p><p>具体的使用方法在后续的<strong>函数</strong>课程内容中会讲解。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// x 和 y 为 add 函数的形式参数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">10</span>, m = <span class="number">15</span>;</span><br><span class="line">    <span class="type">int</span> ans = <span class="built_in">add</span>(n, m);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="输入-输出"><a href="#输入-输出" class="headerlink" title="输入&#x2F;输出"></a>输入&#x2F;输出</h1><div class="note success no-icon flat"><p>C++ 常用的输入输出方式有两种</p><ul><li>第一种是基于<b> iostream 头文件</b>下的<strong>输入输出流</strong>函数</li><li>第二种是基于<b> cstdio 头文件</b>下的<strong>标准输入输出</strong>函数</li></ul></div><h2 id="输入输出流"><a href="#输入输出流" class="headerlink" title="输入输出流"></a>输入输出流</h2><div class="note success no-icon flat"><p>使用输入输出流函数来实现程序的输入输出时，<strong>无需考虑变量类型</strong>，输入输出都是同样的格式。</p><ul><li>输入：cin &gt;&gt; 变量名1 &gt;&gt; 变量名2;</li><li>输出：cout &lt;&lt; 变量名1 &lt;&lt; 变量名2;</li></ul></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用 iostream 头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">double</span> b;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输入函数 cin</span></span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输出函数 cout，换行函数 endl</span></span><br><span class="line">    cout &lt;&lt; a &lt;&lt; b &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="标准输入输出"><a href="#标准输入输出" class="headerlink" title="标准输入输出"></a>标准输入输出</h2><div class="note success no-icon flat"><p>使用标准输入输出来实现程序的输入输出时，<strong>需考虑变量类型</strong>，不同的类型对应的格式不同。</p><p>在输入输出的过程中都需要<strong>声明变量类型</strong>。</p></div><div class="note success no-icon flat"><p>在输入的过程中，要注意<strong>标明地址符【&amp;】</strong></p><p>因为在输入的过程中是需要在计算机的内存中<strong>申请一块地址</strong>后将变量存储到该地址的，所以要声明地址符。</p><p><strong>输入格式：scanf(“标准格式”, &amp;变量名);</strong></p></div><div class="note success no-icon flat"><p>在输出的过程中，<strong>无需声明地址符</strong></p><p>因为在输出的过程中说明<strong>该变量已经存储到内存</strong>中，<strong>直接读取该变量值</strong>即可。</p><p><strong>输出格式：printf(“标准格式”, 变量名);</strong></p></div><table><thead><tr><th>变量类型</th><th>声明</th><th>标准格式</th></tr></thead><tbody><tr><td>整数型</td><td>int</td><td>%d</td></tr><tr><td>单精度浮点数</td><td>float</td><td>%f</td></tr><tr><td>双精度浮点数</td><td>double</td><td>%lf</td></tr><tr><td>字符型</td><td>char</td><td>%c</td></tr><tr><td>长整数型</td><td>long long</td><td>%lld</td></tr></tbody></table><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 变量声明</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">float</span> b;</span><br><span class="line">    <span class="type">double</span> c;</span><br><span class="line">    <span class="type">char</span> d;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> e;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 标准输入</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;b);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;c);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;d);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;e);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 标准输出, \n 表示换行</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>, c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, d);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, e);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><div class="note success no-icon flat"><p>在 C++ 中，上述两种方式都可以控制输入输出，那么区别是什么呢。</p></div><h3 id="保留小数位"><a href="#保留小数位" class="headerlink" title="保留小数位"></a>保留小数位</h3><div class="note success no-icon flat"><p>使用输入输出流函数时，想要保留小数位需要调用函数进行保留。</p><p>需要使用 <code>iomanip</code> 库中的 <code>setprecision</code> 函数和 <code>fixed</code> 函数。 <code>setprecision</code> 用于设置数字的精度，而 <code>fixed</code> 用于保证数字以固定点的方式输出。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> num = <span class="number">3.14159</span>;</span><br><span class="line">    cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">2</span>) &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note success no-icon flat"><p>使用标准输入输出函数时，想要保留小数位只需<strong>在输出函数中表明要保留的位数</strong>即可。</p><p><strong>格式：printf(“%.2lf”, c);</strong></p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> num = <span class="number">3.14159</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>, num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><div class="note success no-icon flat"><p>使用输入输出流函数时，想要格式化输出需要调用函数。</p><p>可以使用<code>iomanip</code>库中的函数来实现格式化输出。以下是一些常用的格式化操作：</p><ul><li><code>setprecision(n)</code>: 设置浮点数的精度为<code>n</code>位。</li><li><code>fixed</code>: 使用定点表示法来表示浮点数。</li><li><code>scientific</code>: 使用科学表示法来表示浮点数。</li><li><code>setw(n)</code>: 设置下一个输出值的宽度为<code>n</code>个字符。</li><li><code>left</code>: 输出左对齐。</li><li><code>right</code>: 输出右对齐。</li><li><code>setfill(c)</code>: 在未填充的部分使用字符<code>c</code>来填充。</li></ul></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> width = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; right &lt;&lt; <span class="built_in">setw</span>(width) &lt;&lt; <span class="string">&quot;Hello&quot;</span> &lt;&lt; endl; <span class="comment">// 输出宽度为10的右对齐字符串</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">char</span> fill_char = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">setfill</span>(fill_char) &lt;&lt; <span class="built_in">setw</span>(width) &lt;&lt; <span class="string">&quot;World&quot;</span> &lt;&lt; endl; <span class="comment">// 使用&#x27;*&#x27;来填充宽度不足的部分</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note success no-icon flat"><p>使用标准输入输出函数时，想要保留小数位只需<strong>在输出函数中表明要使用的格式</strong>即可。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">12</span>, b = <span class="number">123</span>, c = <span class="number">1234</span>; </span><br><span class="line">    <span class="type">double</span> d = <span class="number">1.2345</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 宽度为 5 左对齐输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%5d\n&quot;</span>, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%5d\n&quot;</span>, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%5d\n&quot;</span>, c);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 宽度为 5 ,不足位补 0 输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%05d\n&quot;</span>, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%05d\n&quot;</span>, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%05d\n&quot;</span>, c);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 宽度为 5 右对齐输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%-5d\n&quot;</span>, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%-5d\n&quot;</span>, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%-5d\n&quot;</span>, c);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 宽度为 5，保留两位输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%5.2lf\n&quot;</span>, d);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h1><div class="note success no-icon flat"><p>运算符是一种告诉编译器执行特定的<strong>数学或逻辑操作</strong>的符号。</p><p>基本的运算符包括简单的<strong>加【+】减【-】乘【*】除【&#x2F;】</strong></p><p>在 C++ 语言中，额外的运算还包括<strong>取余数【%】</strong>，<strong>自增1【++】</strong>，<strong>自减1【–】</strong></p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">21</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> c;</span><br><span class="line"> </span><br><span class="line">c = a + b;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Line 1 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ;</span><br><span class="line">c = a - b;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Line 2 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ;</span><br><span class="line">    c = a * b;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Line 3 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ;</span><br><span class="line">    c = a / b;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Line 4 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ;</span><br><span class="line">c = a % b;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Line 5 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ;</span><br><span class="line">    </span><br><span class="line"><span class="type">int</span> d = <span class="number">10</span>;   <span class="comment">//  测试自增、自减</span></span><br><span class="line">c = d++;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Line 6 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ;</span><br><span class="line"> </span><br><span class="line">d = <span class="number">10</span>;    <span class="comment">// 重新赋值</span></span><br><span class="line">c = d--;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Line 7 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="强制转化"><a href="#强制转化" class="headerlink" title="强制转化"></a>强制转化</h1><h1 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1>]]></content>
      
      
      <categories>
          
          <category> 信奥赛 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ 基础语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 循环结构</title>
      <link href="/CPP_Loop/"/>
      <url>/CPP_Loop/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="067266b6ff7830a49925f7c22a3ffb746e999b0b88e2a9a7f77fd33f5e1ea55a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码后访问</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 信奥赛 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ 基础语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 判断结构</title>
      <link href="/CPP_judgment/"/>
      <url>/CPP_judgment/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7e9edde0761c81aaac5542a6d240c6b6128cfd52a12600b2b3023fe817e5cc0f"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码后访问</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 信奥赛 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ 基础语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 变量、运算与顺序结构</title>
      <link href="/CPP_data/"/>
      <url>/CPP_data/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note warning flat"><p>本文记录 C++ 相关的<strong>变量、运算</strong>与<strong>输入输出</strong>的相关知识。</p></div><div class="note warning flat"><p>在阅读过程中有任何问题都可以发布到评论区，有价值的问题将会放到文章末尾Q&amp;A之中！</p></div><h1 id="什么是编程"><a href="#什么是编程" class="headerlink" title="什么是编程"></a>什么是编程</h1><div class="note success no-icon flat"><p><strong>编程</strong>是编写程序代码的中文简称，就是<strong>让计算机代码解决某个问题</strong>，对某个计算体系规定一定的运算方式，使计算体系按照该计算方式运行，并最终得到相应结果的过程。</p><p>通俗来讲，编程就是<strong>人类和计算机沟通的一种语言</strong>。</p></div><h1 id="C-语言基本框架"><a href="#C-语言基本框架" class="headerlink" title="C++语言基本框架"></a>C++语言基本框架</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span><span class="comment">// 头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;<span class="comment">// 使用 std 命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;<span class="comment">// 函数入口【主函数】</span></span><br><span class="line">    ……;<span class="comment">// 程序编写区</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">// 返回值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><div class="note success no-icon flat"><p>C++ 语言中定义了一部分<strong>头文件</strong>，在这些头文件之中包含一部分已有的<strong>函数【功能】</strong>，可以在编写程序的过程中<strong>直接调用</strong>即可。</p></div><h3 id="程序内片段"><a href="#程序内片段" class="headerlink" title="程序内片段"></a>程序内片段</h3><div class="note success no-icon flat"><p>在上述代码片段中，首行代码就是调用头文件的过程，格式为：<b>#include &lt;头文件名&gt;</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>&lt;iostream&gt;</strong> 头文件中内置了基本的<strong>输入、输出、换行</strong>函数：<strong>cin、cout、endl</strong></p></div><div class="note danger no-icon flat"><p>学过 <strong>Python</strong> 的同学，在 <strong>Python</strong> 学习的过程中也需要<strong>调用库</strong>，<strong>C++ 中头文件</strong>的作用是和 <strong>Python 中库</strong>的作用是类似的。</p></div><h3 id="常用头文件"><a href="#常用头文件" class="headerlink" title="常用头文件"></a>常用头文件</h3><div class="note success no-icon flat"><p>在 C++ 中，<strong>常用的头文件</strong>有如下一些：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span><span class="comment">// 内置输入输出流函数：cin、cout、endl等等</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span><span class="comment">// 内置格式化输入输出函数：scanf，printf等等</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math&gt;</span><span class="comment">// 内置一些常用的数学符号：根号 sqrt、幂 pow、绝对值 abs 等等</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span><span class="comment">// 内置一些简单算法：排序 sort、取最大值 max、最小值 min 等等</span></span></span><br></pre></td></tr></table></figure></div><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><div class="note success no-icon flat"><p><strong>命名空间</strong>是 C++ 中一个相对新的概念。其主要作用是为了<strong>避免命名冲突</strong>。</p><p>在 C++ 运行的过程中，为了<strong>避免变量的命名与关键词冲突</strong>，会调用命名空间来<strong>限制冲突</strong>，可以更好的编写和维护代码。</p></div><h3 id="程序内片段-1"><a href="#程序内片段-1" class="headerlink" title="程序内片段"></a>程序内片段</h3><div class="note success no-icon flat"><p>在上述代码片段中，第二行代码就是调用头文件的过程，格式为：<b>using namespace 命名空间名;</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br></pre></td></tr></table></figure><p>std 命名空间中包含基本的 <strong>cin cout endl</strong> 等等函数名。</p></div><div class="note danger no-icon flat"><p>可以尝试运行<strong>缺少调用命名空间</strong>的程序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span><span class="comment">// 头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;<span class="comment">// 函数入口【主函数】</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">// 返回值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行之后会发现 <strong>cout</strong> 和 <strong>endl</strong> 函数<strong>未被定义</strong>，同时<strong>提示调用命名空间</strong>。</p></div><h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><div class="note success no-icon flat"><p>调用命名空间有<strong>两种常用的方法</strong>。</p><p>第一种就是像上述代码片段中，直接在头文件之后使用 <strong>using namespace XXX;</strong> 进行调用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;<span class="comment">// 使用 std 命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种方法就是在使用函数时，在<strong>函数前加上该命名空间名</strong>，并且用 <strong>::</strong> 链接。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; std::endl;<span class="comment">// 直接程序内调用</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="主函数【程序入口】"><a href="#主函数【程序入口】" class="headerlink" title="主函数【程序入口】"></a>主函数【程序入口】</h2><div class="note success no-icon flat"><p><strong>主函数</strong>是 C++ 中必须要有的部分，必须以 <strong>main()</strong> 进行命名。</p><p>主函数是<strong>所有程序内容的入口</strong>，一段 C++ 程序就是从 <strong>main 函数</strong> 开始运行的。</p></div><div class="note danger no-icon flat"><p>主函数必须定义为 <strong>int 类型</strong>，同时在程序结束是<strong>返回值为 0【return 0;】</strong>。</p><p>对于<strong>函数类型</strong>的知识点，在之后的<strong>函数篇章</strong>内具体讲解。</p></div><h3 id="程序内片段-2"><a href="#程序内片段-2" class="headerlink" title="程序内片段"></a>程序内片段</h3><div class="note success no-icon flat"><p>在上述代码中，<strong>主函数</strong>片段如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ……;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="note danger no-icon flat"><p>任何函数都是通过<b>大括号 { }</b>来规定函数范围的。</p><p>学习过 Python 的同学，在 <strong>Python</strong> 中函数内容是通过<strong>缩进</strong>来规定函数范围的，在 <strong>C++</strong> 中所有的函数都是通过<strong>大括号</strong>来规定的。</p></div><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><div class="note success no-icon flat"><p>在 C++ 的函数运行过程中，<strong>返回值</strong>是标记程序<strong>是否正常结束</strong>的标志。</p><p>当<strong>返回值为 0</strong> 时，表示程序<strong>正常结束</strong>。</p><p>否则，当其<strong>为非 0 值</strong>时，表示程序<strong>出现错误</strong>。</p></div><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h3><div class="note success no-icon flat"><p>在 C++ 程序编写的过程中，要区分<strong>各种括号</strong>的区别。</p><blockquote><p><strong>&lt; &gt;</strong> 一般用于<strong>头文件的调用</strong>等等。</p><p><strong>{ }</strong> 一般用于判断、循环、函数的<strong>范围限制</strong>等等。</p><p><strong>[ ]</strong> 一般用于<strong>数组的定义</strong>等等。</p><p><strong>( )</strong> 一般用于<strong>运算</strong>、函数<strong>参数的传递</strong>等等。</p></blockquote></div><h3 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h3><div class="note success no-icon flat"><p>在 C++ 程序编写的过程中，要注意 <b> ; </b>的使用。</p><p>具体的使用规则在后续<strong>每个模块</strong>学习的过程中会详解。</p></div><h3 id="英文输入"><a href="#英文输入" class="headerlink" title="英文输入"></a>英文输入</h3><div class="note success no-icon flat"><p>在 C++ 程序编写的过程中，<strong>除注释外</strong>，所有的内容都要用<strong>英文输入</strong>，包括所有的符号。</p></div><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><div class="note success no-icon flat"><p>在 C++ 中，注释有两种写法。</p><ul><li>单行注释：使用 <code>//</code> 表明注释范围，<code>//</code> 后的内容为注释内容，不参与编译。</li><li>多行注释：使用<code>/* ... */</code>表明注释范围。</li></ul></div><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><div class="note success no-icon flat"><p>不管使用编程语言进行编程时，都需要用到<strong>各种变量</strong>来<strong>存储各种信息</strong>。变量保留的是它<strong>所存储的值的内存位置</strong>。</p><p>这意味着，当您<strong>创建一个变量</strong>时，就会在内存中<strong>保留一些空间</strong>。</p></div><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><div class="note success no-icon flat"><p>在 C++ 中，<strong>常用的数据类型</strong>有如下几种：</p></div><table><thead><tr><th align="left">类型</th><th align="left">关键字</th><th>示例</th></tr></thead><tbody><tr><td align="left">布尔型</td><td align="left">bool</td><td>true, false</td></tr><tr><td align="left">字符型</td><td align="left">char</td><td>‘a’, ‘A’, ‘ ‘, ‘\n’</td></tr><tr><td align="left">整型</td><td align="left">int</td><td>1, 3, 1231231,123</td></tr><tr><td align="left">浮点型</td><td align="left">float</td><td>1.2, 231.45, 1.235e2</td></tr><tr><td align="left">双浮点型</td><td align="left">double</td><td>1.2, 231.45, 1.235e2</td></tr><tr><td align="left">无类型</td><td align="left">void</td><td>-</td></tr></tbody></table><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><div class="note success no-icon flat"><p>在 C++ 中，<strong>不同的数据类型</strong>所能表示的<strong>数据范围也是不同</strong>的，这具体取决于不同的数据类型<strong>在内存中所占的位数</strong>。</p></div><div class="note danger no-icon flat"><p>在这里注意内存中单位的转化。</p><p><strong>1 位 &#x3D; 1 字节 &#x3D; 8 比特</strong></p><p><strong>【1 Byte &#x3D; 8 bit】</strong></p></div><table><thead><tr><th align="left">类型</th><th align="left">位</th><th align="left">范围</th></tr></thead><tbody><tr><td align="left">char</td><td align="left">1 个字节</td><td align="left">-128 到 127 或者 0 到 255</td></tr><tr><td align="left">int</td><td align="left">4 个字节</td><td align="left">-2147483648 到 2147483647 【-2^31 ~ 2^31 - 1】</td></tr><tr><td align="left">float</td><td align="left">4 个字节</td><td align="left">精度型占4个字节（32位）内存空间，+&#x2F;- 3.4e +&#x2F;- 38 (~7 个数字)</td></tr><tr><td align="left">double</td><td align="left">8 个字节</td><td align="left">双精度型占8 个字节（64位）内存空间，+&#x2F;- 1.7e +&#x2F;- 308 (~15 个数字)</td></tr></tbody></table><div class="note danger flat"><p>那这个范围是如何计算的呢？为什么负数范围比正数多一个呢？</p></div><div class="note success no-icon flat"><p>在计算机内部，数据都是以<strong>补码</strong>的形式存储到<strong>内存</strong>中的，每一种类型可以表示的<strong>范围都是不同的</strong>。</p></div><h4 id="原码，反码，补码"><a href="#原码，反码，补码" class="headerlink" title="原码，反码，补码"></a>原码，反码，补码</h4><div class="note success no-icon flat"><p>在计算机中，数据都是以<strong>二进制</strong>形式存储的，也就是都是以 <strong>01 序列</strong> 字符串存储的。</p><p>在此基础上，对于数据有三种不同的存储方式，也就是<strong>原码、反码和补码</strong>。</p><p>在编码过程中，用<strong>首位作为符号位</strong>，首位为 <strong>0 表示正数</strong>、首位为 <strong>1 表示负数</strong>。</p></div><div class="note success no-icon flat"><p>对于<strong>正数</strong>来说，原码、反码和补码的表示形式都是<strong>相同的</strong>。</p><p>对于<strong>负数</strong>来说：</p><p>反码是在原码的基础上，<strong>符号位不变，其他所有位取反</strong>得到的</p><p>补码是<strong>符号位不变，反码+1</strong> 得到的。</p></div><table><thead><tr><th align="center">十进制</th><th align="center">原码</th><th align="center">反码</th><th align="center">补码</th></tr></thead><tbody><tr><td align="center">90</td><td align="center">01011010</td><td align="center">01011010</td><td align="center">01011010</td></tr><tr><td align="center">-90</td><td align="center">11011010</td><td align="center">10100101</td><td align="center">10100110</td></tr></tbody></table><div class="note success no-icon flat"><p>因此，对于负数来说，可以<strong>全部都为 1</strong> 表示最大的负数</p><p>但是，对于正数来说，因为<strong>第一位为符号位</strong>，只能为 <strong>0</strong>，最大值仅为 <strong>01111111……</strong>，所以正数范围的最大值要 <strong>-1</strong></p></div><h2 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h2><div class="note success no-icon flat"><p>在 C++ 中，定义变量时要有固定的格式：<strong>变量类型 变量名 赋值;</strong></p><p>多个同类型变量定义时用 <strong>,</strong> 隔开。</p><p><strong>浮点数</strong>的赋值可以用<strong>科学计数法</strong>。</p></div><div class="note danger no-icon flat"><p>赋值可以省略。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义类型为整数型，变量名为 a 的变量，不赋值</span></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="comment">// 定义三个整数型变量，用逗号隔开，同时给 c 变量赋值，d 变量赋值为 c 变量的值</span></span><br><span class="line"><span class="type">int</span> b, c = <span class="number">10</span>, d = c;</span><br><span class="line"><span class="comment">// 定义三个双精度浮点数的变量</span></span><br><span class="line"><span class="type">double</span> e, f = <span class="number">1.2345</span>, g = <span class="number">1.23e4</span>;</span><br><span class="line"><span class="comment">// 定义一个字符型变量</span></span><br><span class="line"><span class="type">char</span> h;</span><br><span class="line"><span class="comment">// 定义一个布尔型变量</span></span><br><span class="line"><span class="type">bool</span> i;</span><br></pre></td></tr></table></figure><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><div class="note success no-icon flat"><p>变量处于<strong>不同的位置</strong>有着<strong>不同的效果</strong>，可以作用的<strong>范围也不同</strong>。该范围一般称为<strong>作用域</strong>。</p><p>在 C++ 中，变量常用的作用域有<strong>局部变量，全局变量，形式变量【形式参数】</strong></p></div><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><div class="note success no-icon flat"><p>在函数或一个代码块内部声明的变量，称为<strong>局部变量</strong>。</p><p>通俗来讲，在一个 <strong>{ } 内部定义的变量</strong>就被称为局部变量，其作用域也<strong>仅限于该 { } 内部</strong>。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// x 作用域为整个 main 函数内部</span></span><br><span class="line">    <span class="type">int</span> x = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &gt;= <span class="number">10</span>)&#123;</span><br><span class="line">        <span class="comment">// y 作用域为 if 函数内部</span></span><br><span class="line">        <span class="type">int</span> y = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;</span><br><span class="line">        <span class="comment">// z 作用域为 for 函数内部</span></span><br><span class="line">        <span class="type">int</span> z = <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; z &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note danger no-icon flat"><p>运行上述代码，x 可以正常输出，y 和 z 会报错。</p></div><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><div class="note success no-icon flat"><p>在所有函数外部声明的变量，称为<strong>全局变量</strong>。</p><p>一般来说，全局变量直接<strong>定义到头文件和命名空间下方</strong>。</p><p>全局变量在<strong>任何一个函数</strong>中都可以使用。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 全局变量声明</span></span><br><span class="line"><span class="type">int</span> g;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 局部变量声明</span></span><br><span class="line">  <span class="type">int</span> a, b;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 实际初始化</span></span><br><span class="line">  a = <span class="number">10</span>;</span><br><span class="line">  b = <span class="number">20</span>;</span><br><span class="line">  g = a + b;</span><br><span class="line"> </span><br><span class="line">  cout &lt;&lt; g &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note danger no-icon flat"><p>在程序中，局部变量和全局变量的<strong>名称可以相同</strong>，但是在函数内，<strong>局部变量的值会覆盖全局变量的值</strong>。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 全局变量声明</span></span><br><span class="line"><span class="type">int</span> g = <span class="number">20</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 局部变量声明</span></span><br><span class="line">  <span class="type">int</span> g = <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line">  cout &lt;&lt; g &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="形式变量【形式参数】"><a href="#形式变量【形式参数】" class="headerlink" title="形式变量【形式参数】"></a>形式变量【形式参数】</h3><div class="note success no-icon flat"><p>在函数参数的定义中声明的变量，称为<strong>形式参数</strong>。</p><p>具体的使用方法在后续的<strong>函数</strong>课程内容中会讲解。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// x 和 y 为 add 函数的形式参数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">10</span>, m = <span class="number">15</span>;</span><br><span class="line">    <span class="type">int</span> ans = <span class="built_in">add</span>(n, m);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="输入-输出"><a href="#输入-输出" class="headerlink" title="输入&#x2F;输出"></a>输入&#x2F;输出</h1><div class="note success no-icon flat"><p>C++ 常用的输入输出方式有两种</p><ul><li>第一种是基于<b> iostream 头文件</b>下的<strong>输入输出流</strong>函数</li><li>第二种是基于<b> cstdio 头文件</b>下的<strong>标准输入输出</strong>函数</li></ul></div><h2 id="输入输出流"><a href="#输入输出流" class="headerlink" title="输入输出流"></a>输入输出流</h2><div class="note success no-icon flat"><p>使用输入输出流函数来实现程序的输入输出时，<strong>无需考虑变量类型</strong>，输入输出都是同样的格式。</p><ul><li>输入：cin &gt;&gt; 变量名1 &gt;&gt; 变量名2;</li><li>输出：cout &lt;&lt; 变量名1 &lt;&lt; 变量名2;</li></ul></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用 iostream 头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">double</span> b;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输入函数 cin</span></span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输出函数 cout，换行函数 endl</span></span><br><span class="line">    cout &lt;&lt; a &lt;&lt; b &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="标准输入输出"><a href="#标准输入输出" class="headerlink" title="标准输入输出"></a>标准输入输出</h2><div class="note success no-icon flat"><p>使用标准输入输出来实现程序的输入输出时，<strong>需考虑变量类型</strong>，不同的类型对应的格式不同。</p><p>在输入输出的过程中都需要<strong>声明变量类型</strong>。</p></div><div class="note success no-icon flat"><p>在输入的过程中，要注意<strong>标明地址符【&amp;】</strong></p><p>因为在输入的过程中是需要在计算机的内存中<strong>申请一块地址</strong>后将变量存储到该地址的，所以要声明地址符。</p><p><strong>输入格式：scanf(“标准格式”, &amp;变量名);</strong></p></div><div class="note success no-icon flat"><p>在输出的过程中，<strong>无需声明地址符</strong></p><p>因为在输出的过程中说明<strong>该变量已经存储到内存</strong>中，<strong>直接读取该变量值</strong>即可。</p><p><strong>输出格式：printf(“标准格式”, 变量名);</strong></p></div><table><thead><tr><th>变量类型</th><th>声明</th><th>标准格式</th></tr></thead><tbody><tr><td>整数型</td><td>int</td><td>%d</td></tr><tr><td>单精度浮点数</td><td>float</td><td>%f</td></tr><tr><td>双精度浮点数</td><td>double</td><td>%lf</td></tr><tr><td>字符型</td><td>char</td><td>%c</td></tr><tr><td>长整数型</td><td>long long</td><td>%lld</td></tr></tbody></table><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 变量声明</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">float</span> b;</span><br><span class="line">    <span class="type">double</span> c;</span><br><span class="line">    <span class="type">char</span> d;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> e;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 标准输入</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;b);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;c);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;d);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;e);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 标准输出, \n 表示换行</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>, c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, d);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, e);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><div class="note success no-icon flat"><p>在 C++ 中，上述两种方式都可以控制输入输出，那么区别是什么呢。</p></div><h3 id="保留小数位"><a href="#保留小数位" class="headerlink" title="保留小数位"></a>保留小数位</h3><div class="note success no-icon flat"><p>使用输入输出流函数时，想要保留小数位需要调用函数进行保留。</p><p>需要使用 <code>iomanip</code> 库中的 <code>setprecision</code> 函数和 <code>fixed</code> 函数。 <code>setprecision</code> 用于设置数字的精度，而 <code>fixed</code> 用于保证数字以固定点的方式输出。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> num = <span class="number">3.14159</span>;</span><br><span class="line">    cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">2</span>) &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note success no-icon flat"><p>使用标准输入输出函数时，想要保留小数位只需<strong>在输出函数中表明要保留的位数</strong>即可。</p><p><strong>格式：printf(“%.2lf”, c);</strong></p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> num = <span class="number">3.14159</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>, num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><div class="note success no-icon flat"><p>使用输入输出流函数时，想要格式化输出需要调用函数。</p><p>可以使用<code>iomanip</code>库中的函数来实现格式化输出。以下是一些常用的格式化操作：</p><ul><li><code>setprecision(n)</code>: 设置浮点数的精度为<code>n</code>位。</li><li><code>fixed</code>: 使用定点表示法来表示浮点数。</li><li><code>scientific</code>: 使用科学表示法来表示浮点数。</li><li><code>setw(n)</code>: 设置下一个输出值的宽度为<code>n</code>个字符。</li><li><code>left</code>: 输出左对齐。</li><li><code>right</code>: 输出右对齐。</li><li><code>setfill(c)</code>: 在未填充的部分使用字符<code>c</code>来填充。</li></ul></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> width = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; right &lt;&lt; <span class="built_in">setw</span>(width) &lt;&lt; <span class="string">&quot;Hello&quot;</span> &lt;&lt; endl; <span class="comment">// 输出宽度为10的右对齐字符串</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">char</span> fill_char = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">setfill</span>(fill_char) &lt;&lt; <span class="built_in">setw</span>(width) &lt;&lt; <span class="string">&quot;World&quot;</span> &lt;&lt; endl; <span class="comment">// 使用&#x27;*&#x27;来填充宽度不足的部分</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note success no-icon flat"><p>使用标准输入输出函数时，想要保留小数位只需<strong>在输出函数中表明要使用的格式</strong>即可。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">12</span>, b = <span class="number">123</span>, c = <span class="number">1234</span>; </span><br><span class="line">    <span class="type">double</span> d = <span class="number">1.2345</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 宽度为 5 左对齐输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%5d\n&quot;</span>, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%5d\n&quot;</span>, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%5d\n&quot;</span>, c);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 宽度为 5 ,不足位补 0 输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%05d\n&quot;</span>, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%05d\n&quot;</span>, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%05d\n&quot;</span>, c);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 宽度为 5 右对齐输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%-5d\n&quot;</span>, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%-5d\n&quot;</span>, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%-5d\n&quot;</span>, c);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 宽度为 5，保留两位输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%5.2lf\n&quot;</span>, d);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h1><div class="note success no-icon flat"><p>运算符是一种告诉编译器执行特定的<strong>数学或逻辑操作</strong>的符号。</p><p>基本的运算符包括简单的<strong>加【+】减【-】乘【*】除【&#x2F;】</strong></p><p>在 C++ 语言中，额外的运算还包括<strong>取余数【%】</strong>，<strong>自增1【++】</strong>，<strong>自减1【–】</strong></p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">21</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> c;</span><br><span class="line"> </span><br><span class="line">c = a + b;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Line 1 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ;</span><br><span class="line">c = a - b;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Line 2 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ;</span><br><span class="line">    c = a * b;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Line 3 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ;</span><br><span class="line">    c = a / b;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Line 4 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ;</span><br><span class="line">c = a % b;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Line 5 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ;</span><br><span class="line">    </span><br><span class="line"><span class="type">int</span> d = <span class="number">10</span>;   <span class="comment">//  测试自增、自减</span></span><br><span class="line">c = d++;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Line 6 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ;</span><br><span class="line"> </span><br><span class="line">d = <span class="number">10</span>;    <span class="comment">// 重新赋值</span></span><br><span class="line">c = d--;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Line 7 - c 的值是 &quot;</span> &lt;&lt; c &lt;&lt; endl ;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="强制转化"><a href="#强制转化" class="headerlink" title="强制转化"></a>强制转化</h1><h1 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1>]]></content>
      
      
      <categories>
          
          <category> 信奥赛 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ 基础语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始的 C++ 学习之旅</title>
      <link href="/CPP_lesson/"/>
      <url>/CPP_lesson/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note warning flat"><p>本文将介绍 C++ 的<strong>相关历史背景</strong>、<strong>编译环境</strong>、<strong>IDE</strong>以及介绍 C++ 的<strong>学习路线</strong>。</p><p>主要介绍有关于<strong>信息学奥赛</strong>所需要的知识点，面向对象所需的类与对象知识不在本文讨论。</p></div><div class="note warning flat"><p>在阅读过程中有任何问题都可以发布到评论区，有价值的问题将会放到文章末尾Q&amp;A之中！</p></div><h1 id="第一段-C-代码"><a href="#第一段-C-代码" class="headerlink" title="第一段 C++ 代码"></a>第一段 C++ 代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello, world!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-的发展经历"><a href="#C-的发展经历" class="headerlink" title="C++ 的发展经历"></a>C++ 的发展经历</h1><div class="note success no-icon flat"><p><strong>C++<strong>（</strong>C Plus Plus</strong>）是一种高级语言，它是由 <strong>Bjarne Stroustrup</strong> 于 <strong>1979</strong> 年在贝尔实验室开始设计开发的。C++ 进一步扩充和完善了 C 语言，是一种<strong>面向对象</strong>的程序设计语言。</p></div><div class="note info flat"><p>同时，在<strong>信息学奥林匹克竞赛</strong>【以下简称<strong>信奥赛</strong>】中，C++ 是<strong>唯一可以使用</strong>的语言。</p></div><h1 id="C-的标准库"><a href="#C-的标准库" class="headerlink" title="C++ 的标准库"></a>C++ 的标准库</h1><div class="note success no-icon flat"><p>标准的 C++ 由<strong>三个重要部分</strong>组成：</p><ul><li>核心语言，提供了所有构件块，包括<strong>变量、数据类型和常量</strong>，等等。</li><li>C++ 标准库，提供了大量的<strong>函数</strong>，用于操作文件、字符串等。</li><li>标准模板库<strong>（STL）</strong>，提供了大量的方法，用于操作数据结构等。</li></ul></div><h1 id="IDE-集成开发环境"><a href="#IDE-集成开发环境" class="headerlink" title="IDE(集成开发环境)"></a>IDE(集成开发环境)</h1><h2 id="CodeBlocks"><a href="#CodeBlocks" class="headerlink" title="CodeBlocks"></a>CodeBlocks</h2><div class="note success no-icon flat"><p><strong>Code::Blocks</strong>是一个免费开源的C&#x2F;C++IDE,最早的版本发布于2005年，一个开源的跨平台集成开发环境（IDE），主要用于 <strong>C、C++ 和 Fortran</strong> 等编程语言的开发。也可以说是专门为C&#x2F;C++搭建的IDE,它拥有其他IDE的基本功能，更多功能通过下载插件来获得，与其他IDE相比相对简单，对于新手也比较友好。</p></div><h3 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h3><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://sourceforge.net/projects/codeblocks/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Code::Blocks</div>            <div class="tag-link-sitename">C/C++ IDE</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h2 id="DEV-C"><a href="#DEV-C" class="headerlink" title="DEV C++"></a>DEV C++</h2><div class="note success no-icon flat"><p>这是一款免费的，功能齐全的集成IDE,<strong>主要适用于刷题，推荐初学者使用。</strong>占用内存小，轻量级IDE,在C语言初阶<strong>学习和刷题</strong>时是很好用的工具，但不适用于后期的调试和项目开发(没有其他IDE那么明显直观)，前期学习C语言&#x2F;C++必备神器!</p></div><h3 id="下载链接-1"><a href="#下载链接-1" class="headerlink" title="下载链接"></a>下载链接</h3><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://bloodshed-dev-c.en.softonic.com/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">DEVC++</div>            <div class="tag-link-sitename">C/C++ IDE</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h3 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h3><h2 id="Visual-Studio-Code-VS-Code"><a href="#Visual-Studio-Code-VS-Code" class="headerlink" title="Visual Studio Code(VS Code)"></a>Visual Studio Code(VS Code)</h2><div class="note success no-icon flat"><p><strong>Visual Studio Code(VS Code)<strong>是由Microsoft创建的开源，跨平台源代码编辑器。由微软开发，针对 Web 开发人员和前端工程师而设计。这是一款功能强大，</strong>可编译多语言</strong>的IDE,不仅仅是C&#x2F;C++,Python,Java等编程语言都可以进行编译运行，并且目前不仅支持Windows,还支持于Mac和Linux。VS Code自身足够轻巧强大，并且有一个看满足绝大部分功能的<strong>完全免费版本</strong>，以及有附加功能和支持的企业版本。此外，VS Code中可下载<strong>大量实用插件</strong>，它可能是市面上最好的免费IDE。</p></div><h3 id="下载链接-2"><a href="#下载链接-2" class="headerlink" title="下载链接"></a>下载链接</h3><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://code.visualstudio.com/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Visual Studio Code</div>            <div class="tag-link-sitename">C/C++ IDE</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h3 id="使用方法-2"><a href="#使用方法-2" class="headerlink" title="使用方法"></a>使用方法</h3><h1 id="C-学习路线"><a href="#C-学习路线" class="headerlink" title="C++ 学习路线"></a>C++ 学习路线</h1><h2 id="C-基础语法"><a href="#C-基础语法" class="headerlink" title="C++ 基础语法"></a>C++ 基础语法</h2><div class="note success no-icon flat"><p>C++ 的基础语法知识主要包括<strong>数据类型、数据结构、判断逻辑结构、循环逻辑结构、函数、指针</strong>等等。</p></div><h3 id="基本数据类型与数据结构"><a href="#基本数据类型与数据结构" class="headerlink" title="基本数据类型与数据结构"></a>基本数据类型与数据结构</h3><div class="note info no-icon flat"><p>C++ 的<strong>数据类型与数据结构</strong>主要包括<strong>变量、输入输出、运算</strong>等基本结构。</p></div><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.y-liberty.cn/CPP_data/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">数据类型与数据结构</div>            <div class="tag-link-sitename">C++</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h3 id="判断与循环逻辑结构"><a href="#判断与循环逻辑结构" class="headerlink" title="判断与循环逻辑结构"></a>判断与循环逻辑结构</h3><div class="note info no-icon flat"><p>C++ 的<strong>判断与循环逻辑结构</strong>主要包括 <strong>if 判断、for 循环、while循环</strong>与 <strong>do-while 循环</strong>等基本逻辑结构。</p></div><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.y-liberty.cn/CPP_if_for/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">判断逻辑结构与循环逻辑结构</div>            <div class="tag-link-sitename">C++</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><div class="note info no-icon flat"><p>C++ 的<strong>函数</strong>相关的知识点主要包括<strong>无参函数、有参函数</strong>与<strong>函数的递归与调用</strong>等知识点。</p></div><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.y-liberty.cn/CPP_func/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">函数</div>            <div class="tag-link-sitename">C++</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><div class="note info no-icon flat"><p>C++ 的<strong>指针</strong>相关的知识点主要包括指针的<strong>定义、引用</strong>与<strong>地址</strong>相关的知识点。</p></div><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.y-liberty.cn/index/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">指针</div>            <div class="tag-link-sitename">C++</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="C-算法与数据结构"><a href="#C-算法与数据结构" class="headerlink" title="C++ 算法与数据结构"></a>C++ 算法与数据结构</h2><div class="note warning flat"><p>C++ 的<strong>算法与数据结构</strong>是信奥赛<strong>最重要的部分！</strong></p></div><div class="note success no-icon flat"><p>C++ 的<strong>算法</strong>主要包括<strong>排序、贪心、二分、搜索与图论、数论、动态规划与一系列基础算法</strong>。</p></div><h3 id="基础数据结构"><a href="#基础数据结构" class="headerlink" title="基础数据结构"></a>基础数据结构</h3><div class="note success no-icon flat"><p>C++ 的<strong>数据结构</strong>主要包括<strong>链表、栈、队列、KMP、堆、Trie树、并查集，HASH表与STL的基础用法</strong>等等。</p></div><div class="note info flat"><p>C++ 的 <strong>STL</strong> 主要包括是C++内置的<strong>标准模板库</strong>、集成了大部分的<strong>数据结构的基础操作</strong>。</p></div><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.y-liberty.cn/CPP_data_str/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">基础数据结构</div>            <div class="tag-link-sitename">C++</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h3 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h3><div class="note info no-icon flat"><p>C++ 的<strong>基础算法</strong>主要包括的<strong>排序、二分、贪心、高精度、前缀与差分</strong>等等基础算法。</p></div><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.y-liberty.cn/CPP_Ele_algorithm/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">基础算法</div>            <div class="tag-link-sitename">C++</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h3 id="搜索与图论"><a href="#搜索与图论" class="headerlink" title="搜索与图论"></a>搜索与图论</h3><div class="note info no-icon flat"><p>C++ 的<strong>搜索与图论算法</strong>主要包括的<strong>DFS、BFS、最短路与最小生成树</strong>算法。</p></div><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.y-liberty.cn/CPP_Graph_Theory/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">搜索与图论</div>            <div class="tag-link-sitename">C++</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h3 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h3><div class="note info no-icon flat"><p>C++ 的<strong>数论算法</strong>主要包括的<strong>质数、约数、容斥原理与博弈论</strong>等等基础数学算法。</p></div><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.y-liberty.cn/CPP_Math_Theory/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">数论</div>            <div class="tag-link-sitename">C++</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h3 id="动态规划【DP】"><a href="#动态规划【DP】" class="headerlink" title="动态规划【DP】"></a>动态规划【DP】</h3><div class="note info no-icon flat"><p>C++ 的<strong>动态规划算法</strong>主要包括的<strong>背包问题、线性DP、区间DP、树形DP与记忆化搜索</strong>等等基础DP算法。</p></div><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.y-liberty.cn/CPP_DP/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">动态规划</div>            <div class="tag-link-sitename">C++</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div>]]></content>
      
      
      <categories>
          
          <category> 信奥赛 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ 基础语法 </tag>
            
            <tag> C++ 算法与数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
